ARM GAS  /tmp/ccDqKevX.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_ui2d
  16              		.global	__aeabi_dmul
  17              		.global	__aeabi_d2uiz
  18              		.section	.text.delay_us,"ax",%progbits
  19              		.align	1
  20              		.global	delay_us
  21              		.arch armv7-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu softvfp
  27              	delay_us:
  28              	.LVL0:
  29              	.LFB66:
  30              		.file 1 "Inc/delay_own.h"
   1:Inc/delay_own.h **** #include "stm32f1xx_hal.h"
   2:Inc/delay_own.h **** 
   3:Inc/delay_own.h **** // Provisorisches ÂµS Delay (Funktioniert bei 72Mhz ganz okay)
   4:Inc/delay_own.h **** void delay_us(uint32_t microseconds) {
  31              		.loc 1 4 38 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 4 38 is_stmt 0 view .LVU1
  36 0000 00B5     		push	{lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39              		.cfi_offset 14, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
   5:Inc/delay_own.h **** 
   6:Inc/delay_own.h ****   uint32_t cycles = 4.65 * microseconds;
  43              		.loc 1 6 3 is_stmt 1 view .LVU2
  44              		.loc 1 6 26 is_stmt 0 view .LVU3
  45 0004 FFF7FEFF 		bl	__aeabi_ui2d
  46              	.LVL1:
  47              		.loc 1 6 26 view .LVU4
  48 0008 09A3     		adr	r3, .L6
  49 000a D3E90023 		ldrd	r2, [r3]
  50 000e FFF7FEFF 		bl	__aeabi_dmul
  51              	.LVL2:
  52              		.loc 1 6 12 view .LVU5
ARM GAS  /tmp/ccDqKevX.s 			page 2


  53 0012 FFF7FEFF 		bl	__aeabi_d2uiz
  54              	.LVL3:
   7:Inc/delay_own.h ****   for (volatile int i = 0; i < cycles; i++) {}
  55              		.loc 1 7 3 is_stmt 1 view .LVU6
  56              	.LBB2:
  57              		.loc 1 7 8 view .LVU7
  58              		.loc 1 7 21 is_stmt 0 view .LVU8
  59 0016 0023     		movs	r3, #0
  60 0018 0193     		str	r3, [sp, #4]
  61              	.L2:
  62              		.loc 1 7 28 is_stmt 1 discriminator 1 view .LVU9
  63              		.loc 1 7 30 is_stmt 0 discriminator 1 view .LVU10
  64 001a 019B     		ldr	r3, [sp, #4]
  65              		.loc 1 7 3 discriminator 1 view .LVU11
  66 001c 8342     		cmp	r3, r0
  67 001e 03D2     		bcs	.L5
  68              		.loc 1 7 46 is_stmt 1 discriminator 3 view .LVU12
  69              		.loc 1 7 40 discriminator 3 view .LVU13
  70              		.loc 1 7 41 is_stmt 0 discriminator 3 view .LVU14
  71 0020 019B     		ldr	r3, [sp, #4]
  72 0022 0133     		adds	r3, r3, #1
  73 0024 0193     		str	r3, [sp, #4]
  74 0026 F8E7     		b	.L2
  75              	.L5:
  76              	.LBE2:
   8:Inc/delay_own.h **** }...
  77              		.loc 1 8 1 view .LVU15
  78 0028 03B0     		add	sp, sp, #12
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 4
  81              		@ sp needed
  82 002a 5DF804FB 		ldr	pc, [sp], #4
  83              	.L7:
  84 002e 00BF     		.align	3
  85              	.L6:
  86 0030 9A999999 		.word	2576980378
  87 0034 99991240 		.word	1074960793
  88              		.cfi_endproc
  89              	.LFE66:
  91              		.section	.text.ringbuffer_init,"ax",%progbits
  92              		.align	1
  93              		.global	ringbuffer_init
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu softvfp
  99              	ringbuffer_init:
 100              	.LFB67:
 101              		.file 2 "Inc/ringbuffer.h"
   1:Inc/ringbuffer.h **** #include <stdint.h>
   2:Inc/ringbuffer.h **** 
   3:Inc/ringbuffer.h **** 
   4:Inc/ringbuffer.h **** #define _RINGBUFFER_SIZE 2048
   5:Inc/ringbuffer.h **** unsigned char _RINGBUFFER[_RINGBUFFER_SIZE];
   6:Inc/ringbuffer.h **** uint32_t _ringbuffer_pos_write = 0;
   7:Inc/ringbuffer.h **** uint32_t _ringbuffer_pos_read = 0;
   8:Inc/ringbuffer.h **** 
ARM GAS  /tmp/ccDqKevX.s 			page 3


   9:Inc/ringbuffer.h **** 
  10:Inc/ringbuffer.h **** // init/clear ringbuffer
  11:Inc/ringbuffer.h **** void ringbuffer_init() {
 102              		.loc 2 11 24 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
  12:Inc/ringbuffer.h ****     _ringbuffer_pos_write = 0;
 107              		.loc 2 12 5 view .LVU17
 108              		.loc 2 12 27 is_stmt 0 view .LVU18
 109 0000 0023     		movs	r3, #0
 110 0002 024A     		ldr	r2, .L9
 111 0004 1360     		str	r3, [r2]
  13:Inc/ringbuffer.h ****     _ringbuffer_pos_read = 0;
 112              		.loc 2 13 5 is_stmt 1 view .LVU19
 113              		.loc 2 13 26 is_stmt 0 view .LVU20
 114 0006 024A     		ldr	r2, .L9+4
 115 0008 1360     		str	r3, [r2]
  14:Inc/ringbuffer.h **** }
 116              		.loc 2 14 1 view .LVU21
 117 000a 7047     		bx	lr
 118              	.L10:
 119              		.align	2
 120              	.L9:
 121 000c 00000000 		.word	.LANCHOR0
 122 0010 00000000 		.word	.LANCHOR1
 123              		.cfi_endproc
 124              	.LFE67:
 126              		.section	.text.ringbuffer_pushback,"ax",%progbits
 127              		.align	1
 128              		.global	ringbuffer_pushback
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu softvfp
 134              	ringbuffer_pushback:
 135              	.LVL4:
 136              	.LFB68:
  15:Inc/ringbuffer.h **** 
  16:Inc/ringbuffer.h **** 
  17:Inc/ringbuffer.h **** // fill ringbuffer with data
  18:Inc/ringbuffer.h **** void ringbuffer_pushback(unsigned char data) {
 137              		.loc 2 18 46 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
  19:Inc/ringbuffer.h ****     _RINGBUFFER[_ringbuffer_pos_write] = data;
 142              		.loc 2 19 5 view .LVU23
 143              		.loc 2 19 16 is_stmt 0 view .LVU24
 144 0000 064A     		ldr	r2, .L13
 145 0002 1368     		ldr	r3, [r2]
 146              		.loc 2 19 40 view .LVU25
 147 0004 0649     		ldr	r1, .L13+4
 148 0006 C854     		strb	r0, [r1, r3]
  20:Inc/ringbuffer.h ****     _ringbuffer_pos_write++;
ARM GAS  /tmp/ccDqKevX.s 			page 4


 149              		.loc 2 20 5 is_stmt 1 view .LVU26
 150              		.loc 2 20 26 is_stmt 0 view .LVU27
 151 0008 0133     		adds	r3, r3, #1
 152 000a 1360     		str	r3, [r2]
  21:Inc/ringbuffer.h ****     if (_ringbuffer_pos_write >= _RINGBUFFER_SIZE) {
 153              		.loc 2 21 5 is_stmt 1 view .LVU28
 154              		.loc 2 21 8 is_stmt 0 view .LVU29
 155 000c B3F5006F 		cmp	r3, #2048
 156 0010 02D3     		bcc	.L11
  22:Inc/ringbuffer.h ****         _ringbuffer_pos_write = 0;
 157              		.loc 2 22 9 is_stmt 1 view .LVU30
 158              		.loc 2 22 31 is_stmt 0 view .LVU31
 159 0012 1346     		mov	r3, r2
 160 0014 0022     		movs	r2, #0
 161 0016 1A60     		str	r2, [r3]
 162              	.L11:
  23:Inc/ringbuffer.h ****     }
  24:Inc/ringbuffer.h **** }
 163              		.loc 2 24 1 view .LVU32
 164 0018 7047     		bx	lr
 165              	.L14:
 166 001a 00BF     		.align	2
 167              	.L13:
 168 001c 00000000 		.word	.LANCHOR0
 169 0020 00000000 		.word	_RINGBUFFER
 170              		.cfi_endproc
 171              	.LFE68:
 173              		.section	.text.ringbuffer_get,"ax",%progbits
 174              		.align	1
 175              		.global	ringbuffer_get
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu softvfp
 181              	ringbuffer_get:
 182              	.LFB69:
  25:Inc/ringbuffer.h **** 
  26:Inc/ringbuffer.h **** 
  27:Inc/ringbuffer.h **** // read data from ringbuffer
  28:Inc/ringbuffer.h **** unsigned char ringbuffer_get() {
 183              		.loc 2 28 32 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
  29:Inc/ringbuffer.h **** 
  30:Inc/ringbuffer.h ****     // nothing to read
  31:Inc/ringbuffer.h ****     if (_ringbuffer_pos_read == _ringbuffer_pos_write) {
 188              		.loc 2 31 5 view .LVU34
 189              		.loc 2 31 30 is_stmt 0 view .LVU35
 190 0000 094B     		ldr	r3, .L18
 191 0002 1B68     		ldr	r3, [r3]
 192 0004 094A     		ldr	r2, .L18+4
 193 0006 1268     		ldr	r2, [r2]
 194              		.loc 2 31 8 view .LVU36
 195 0008 9342     		cmp	r3, r2
 196 000a 0BD0     		beq	.L17
ARM GAS  /tmp/ccDqKevX.s 			page 5


  32:Inc/ringbuffer.h ****         return 0;
  33:Inc/ringbuffer.h ****     }
  34:Inc/ringbuffer.h **** 
  35:Inc/ringbuffer.h ****     // read data
  36:Inc/ringbuffer.h ****     unsigned char temp = _RINGBUFFER[_ringbuffer_pos_read];
 197              		.loc 2 36 5 is_stmt 1 view .LVU37
 198              		.loc 2 36 19 is_stmt 0 view .LVU38
 199 000c 084A     		ldr	r2, .L18+8
 200 000e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 201              	.LVL5:
  37:Inc/ringbuffer.h ****     _ringbuffer_pos_read++;
 202              		.loc 2 37 5 is_stmt 1 view .LVU39
 203              		.loc 2 37 25 is_stmt 0 view .LVU40
 204 0010 0133     		adds	r3, r3, #1
 205 0012 054A     		ldr	r2, .L18
 206 0014 1360     		str	r3, [r2]
  38:Inc/ringbuffer.h ****     if (_ringbuffer_pos_read >= _RINGBUFFER_SIZE) {
 207              		.loc 2 38 5 is_stmt 1 view .LVU41
 208              		.loc 2 38 8 is_stmt 0 view .LVU42
 209 0016 B3F5006F 		cmp	r3, #2048
 210 001a 04D3     		bcc	.L16
  39:Inc/ringbuffer.h ****         _ringbuffer_pos_read = 0;
 211              		.loc 2 39 9 is_stmt 1 view .LVU43
 212              		.loc 2 39 30 is_stmt 0 view .LVU44
 213 001c 1346     		mov	r3, r2
 214 001e 0022     		movs	r2, #0
 215 0020 1A60     		str	r2, [r3]
 216 0022 7047     		bx	lr
 217              	.LVL6:
 218              	.L17:
  32:Inc/ringbuffer.h ****     }
 219              		.loc 2 32 16 view .LVU45
 220 0024 0020     		movs	r0, #0
 221              	.L16:
  40:Inc/ringbuffer.h ****     }
  41:Inc/ringbuffer.h ****     return temp;
  42:Inc/ringbuffer.h **** }
 222              		.loc 2 42 1 view .LVU46
 223 0026 7047     		bx	lr
 224              	.L19:
 225              		.align	2
 226              	.L18:
 227 0028 00000000 		.word	.LANCHOR1
 228 002c 00000000 		.word	.LANCHOR0
 229 0030 00000000 		.word	_RINGBUFFER
 230              		.cfi_endproc
 231              	.LFE69:
 233              		.section	.text.isBusy,"ax",%progbits
 234              		.align	1
 235              		.global	isBusy
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu softvfp
 241              	isBusy:
 242              	.LFB72:
 243              		.file 3 "Src/main.c"
ARM GAS  /tmp/ccDqKevX.s 			page 6


   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2022 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f1xx_hal.h"
  42:Src/main.c    **** #include "spi.h"
  43:Src/main.c    **** #include "tim.h"
  44:Src/main.c    **** #include "usart.h"
  45:Src/main.c    **** #include "gpio.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** #include <stdio.h>
  50:Src/main.c    **** #include <stdlib.h>
  51:Src/main.c    **** #include <string.h>
  52:Src/main.c    **** #include "delay_own.h"
  53:Src/main.c    **** #include "ringbuffer.h"
  54:Src/main.c    **** #include "fnt8x8.h"
  55:Src/main.c    **** #include "6x8_vertikal_LSB_1.h"
  56:Src/main.c    **** 
  57:Src/main.c    **** //    ______ _ _        _____            _             _ 
ARM GAS  /tmp/ccDqKevX.s 			page 7


  58:Src/main.c    **** //   |  ____| (_)      / ____|          | |           | |
  59:Src/main.c    **** //   | |__  | |_ _ __ | |     ___  _ __ | |_ _ __ ___ | |
  60:Src/main.c    **** //   |  __| | | | '_ \| |    / _ \| '_ \| __| '__/ _ \| |
  61:Src/main.c    **** //   | |    | | | |_) | |___| (_) | | | | |_| | | (_) | |
  62:Src/main.c    **** //   |_|    |_|_| .__/ \_____\___/|_| |_|\__|_|  \___/|_|
  63:Src/main.c    **** //              | |                                      
  64:Src/main.c    **** //              |_|   written by @ThiroDragon
  65:Src/main.c    **** //                    Version 1.2 (August 2022)
  66:Src/main.c    **** //
  67:Src/main.c    **** //////////////////////////////////////////////////////////
  68:Src/main.c    **** // Changelog:
  69:Src/main.c    **** //
  70:Src/main.c    **** //    V1.0
  71:Src/main.c    **** //      - Initaler Code
  72:Src/main.c    **** //
  73:Src/main.c    **** //    V1.1
  74:Src/main.c    **** //      - Zweite (schmalere) Schriftart implmentiert.
  75:Src/main.c    **** //      - Befehlssatz umgebaut, statt fixer BefehlslÃ¤nge schlieÃt
  76:Src/main.c    **** //        nun ein Return (0x0A) den jeweiligen Befehl ab
  77:Src/main.c    **** //      - Fehlender PullUp bei SW1-4 aktiviert
  78:Src/main.c    **** //      - "fast_refresh" eingebaut. Wenn dies aktiviert ist, dann
  79:Src/main.c    **** //        wird ein Dot nur noch gesetzt, wenn sich der Zustand vom
  80:Src/main.c    **** //        letzten mal davor geÃ¤ndert hat. Diese Funktion liegt nun
  81:Src/main.c    **** //        auf Schalter SW3.
  82:Src/main.c    **** //      - paar unbenutze Sachen rausgeworfen
  83:Src/main.c    **** //
  84:Src/main.c    **** //    V1.2
  85:Src/main.c    **** //      - Ringpuffer eingebaut und die Befehlsverarbeitung aus dem
  86:Src/main.c    **** //        UART Interrupt entfernt. Desweiteren den Befehlssatz auf
  87:Src/main.c    **** //        lesbare und sinnvolle Befehle umgebaut.
  88:Src/main.c    **** //        Alle Befehle mÃ¼ssen weiterhin mit einem \n abgeschlossen werden.
  89:Src/main.c    **** //      - Textoption fÃ¼r left/center/right, wie auch manuellen Offset eingebaut
  90:Src/main.c    **** //      - Bugfix beim UART Reset
  91:Src/main.c    **** //
  92:Src/main.c    **** //
  93:Src/main.c    **** //    To Do:
  94:Src/main.c    **** //      - Overflow Bug lÃ¶sen?
  95:Src/main.c    **** //      - Option einfÃ¼gen, dass Dots nur auf refresh Befehl hin aktualisiert werden
  96:Src/main.c    **** //      - erstes/letztes byte von schrift beinhaltet manchmal keine pixel -< beheben!
  97:Src/main.c    **** //
  98:Src/main.c    **** 
  99:Src/main.c    **** 
 100:Src/main.c    **** /* USER CODE END Includes */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 103:Src/main.c    **** 
 104:Src/main.c    **** /* USER CODE BEGIN PV */
 105:Src/main.c    **** 
 106:Src/main.c    **** //////////////////////////////////////////////////////
 107:Src/main.c    **** // Grundlegende Einstellungen
 108:Src/main.c    **** //////////////////////////////////////////////////////
 109:Src/main.c    **** 
 110:Src/main.c    **** // BROSE oder LAWO Panel (Ãnderbar Ã¼ber Onboard Schalter)
 111:Src/main.c    **** // 0 = LAWO
 112:Src/main.c    **** // 1 = BROSE
 113:Src/main.c    **** uint8_t Paneltyp;
 114:Src/main.c    **** 
ARM GAS  /tmp/ccDqKevX.s 			page 8


 115:Src/main.c    **** // Anzahl Panels (Ãnderbar Ã¼ber Onboard Schalter)
 116:Src/main.c    **** uint8_t Panelanzahl;
 117:Src/main.c    **** 
 118:Src/main.c    **** 
 119:Src/main.c    **** 
 120:Src/main.c    **** 
 121:Src/main.c    **** 
 122:Src/main.c    **** //////////////////////////////////////////////////////
 123:Src/main.c    **** // Variablen
 124:Src/main.c    **** //////////////////////////////////////////////////////
 125:Src/main.c    **** 
 126:Src/main.c    **** // Pixelspeicher
 127:Src/main.c    **** uint32_t* dots;
 128:Src/main.c    **** uint32_t* dots_old;
 129:Src/main.c    **** 
 130:Src/main.c    **** // SPI Handler
 131:Src/main.c    **** SPI_HandleTypeDef hspi1;                // SPI_1 (Zeilen ULN2803, UDN2981)
 132:Src/main.c    **** SPI_HandleTypeDef hspi2;                // SPI_2 (Modulauswahl, Daten + Adressleitungen FP2800)
 133:Src/main.c    **** uint8_t hspi2_data[2] = {0x00, 0x00};   // SPI_2 Zwischenspeicher
 134:Src/main.c    **** 
 135:Src/main.c    **** // UART
 136:Src/main.c    **** uint8_t  uart_puffer = 0;                     // UART Puffer fÃ¼r ein Byte
 137:Src/main.c    **** uint32_t uart_last_time = 0;                  // Zeitmerker, wann letztes Byte kam
 138:Src/main.c    **** #define cmd_buffer_size 100                   // max. BefehlslÃ¤nge
 139:Src/main.c    **** unsigned char cmd_buffer[cmd_buffer_size];    // Befehlszwischenspeicher
 140:Src/main.c    **** 
 141:Src/main.c    **** // Text
 142:Src/main.c    **** #define max_text_size 200                     // PuffergrÃ¶Ãe fÃ¼r Texterzeugung (Pixeldaten)
 143:Src/main.c    **** #define max_cmd_args 10                       // maximale Anzahl an Argumenten pro Befehl
 144:Src/main.c    **** uint8_t textbuffer_8px_UP[max_text_size];     // Zwischenspeicher Pixeldaten
 145:Src/main.c    **** uint8_t textbuffer_8px_DOWN[max_text_size];   // Zwischenspeicher Pixeldaten
 146:Src/main.c    **** 
 147:Src/main.c    **** 
 148:Src/main.c    **** 
 149:Src/main.c    **** // Optionen und Merker
 150:Src/main.c    **** uint8_t enable_fast_refresh = 0;        // Setze nur Dots, welche sich Ã¤ndern -> schneller! (Ã¼ber
 151:Src/main.c    **** uint8_t enable_manually_refresh = 0;    // Nur nach Refresh-Befehl Dots schreiben (Ausnahme: Gelb/S
 152:Src/main.c    **** uint8_t yellow_test_or_center = 0;
 153:Src/main.c    **** uint8_t yellow_test_or_UP_DOWN = 0;
 154:Src/main.c    **** uint8_t start_refresh = 0;              // Vormerker: Pixeldaten ausgeben
 155:Src/main.c    **** uint8_t start_refresh_center = 0;       // Vormerker: Center Text ausgeben
 156:Src/main.c    **** uint8_t start_refresh_UP = 0;           // Vormerker: Top Text ausgeben
 157:Src/main.c    **** uint8_t start_refresh_DOWN = 0;         // Vormerker: Bottom Text ausgeben
 158:Src/main.c    **** uint8_t start_black = 0;                // Vormerker: Schwarzttest
 159:Src/main.c    **** uint8_t start_yellow = 0;               // Vormerker: Gelbtest
 160:Src/main.c    **** 
 161:Src/main.c    **** 
 162:Src/main.c    **** // ENUM fÃ¼r Befehle
 163:Src/main.c    **** enum {
 164:Src/main.c    ****   CMD_ERROR, // error
 165:Src/main.c    ****   CMD_LIGHT,
 166:Src/main.c    ****   CMD_SET_ALL,
 167:Src/main.c    ****   CMD_SET_BUFF,
 168:Src/main.c    ****   CMD_REFRESH,
 169:Src/main.c    ****   CMD_SET_DOT,
 170:Src/main.c    ****   CMD_TEXT_BOTTOM,
 171:Src/main.c    ****   CMD_TEXT_TOP,
ARM GAS  /tmp/ccDqKevX.s 			page 9


 172:Src/main.c    ****   CMD_TEXT_CENTER
 173:Src/main.c    **** };
 174:Src/main.c    **** 
 175:Src/main.c    **** 
 176:Src/main.c    **** 
 177:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 178:Src/main.c    **** 
 179:Src/main.c    **** /* USER CODE END PV */
 180:Src/main.c    **** 
 181:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 182:Src/main.c    **** void SystemClock_Config(void);
 183:Src/main.c    **** 
 184:Src/main.c    **** /* USER CODE BEGIN PFP */
 185:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 186:Src/main.c    **** 
 187:Src/main.c    **** // Hardware Funktionen
 188:Src/main.c    **** void Zeile_aktivieren(uint8_t Zeile, uint8_t SET_RESET);
 189:Src/main.c    **** void Spalte_aktivieren(uint8_t Spalte, uint8_t SET_RESET);
 190:Src/main.c    **** void Modul_aktivieren(uint8_t Modul, uint8_t ON_OFF);
 191:Src/main.c    **** void Write_Dots(uint8_t from_x, uint8_t to_x, uint8_t from_y, uint8_t to_y);
 192:Src/main.c    **** 
 193:Src/main.c    **** // Software Funktionen
 194:Src/main.c    **** int generate_text(uint8_t* text_in, uint8_t* text_out, int start, int end, uint8_t text_selector);
 195:Src/main.c    **** uint8_t bit_not_changed(uint8_t x, uint8_t y);
 196:Src/main.c    **** void save_written_dots(void);
 197:Src/main.c    **** int Run_CMD(unsigned char* command);
 198:Src/main.c    **** int isBusy();
 199:Src/main.c    **** 
 200:Src/main.c    **** 
 201:Src/main.c    **** /* USER CODE END PFP */
 202:Src/main.c    **** 
 203:Src/main.c    **** /* USER CODE BEGIN 0 */
 204:Src/main.c    **** 
 205:Src/main.c    **** /* USER CODE END 0 */
 206:Src/main.c    **** 
 207:Src/main.c    **** /**
 208:Src/main.c    ****   * @brief  The application entry point.
 209:Src/main.c    ****   *
 210:Src/main.c    ****   * @retval None
 211:Src/main.c    ****   */
 212:Src/main.c    **** int main(void)
 213:Src/main.c    **** {
 214:Src/main.c    ****   /* USER CODE BEGIN 1 */
 215:Src/main.c    **** 
 216:Src/main.c    ****   /* USER CODE END 1 */
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 221:Src/main.c    ****   HAL_Init();
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* USER CODE BEGIN Init */
 224:Src/main.c    **** 
 225:Src/main.c    ****   /* USER CODE END Init */
 226:Src/main.c    **** 
 227:Src/main.c    ****   /* Configure the system clock */
 228:Src/main.c    ****   SystemClock_Config();
ARM GAS  /tmp/ccDqKevX.s 			page 10


 229:Src/main.c    **** 
 230:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 231:Src/main.c    **** 
 232:Src/main.c    ****   /* USER CODE END SysInit */
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* Initialize all configured peripherals */
 235:Src/main.c    ****   MX_GPIO_Init();
 236:Src/main.c    ****   MX_SPI1_Init();
 237:Src/main.c    ****   MX_SPI2_Init();
 238:Src/main.c    ****   MX_USART1_UART_Init();
 239:Src/main.c    ****   MX_TIM2_Init();
 240:Src/main.c    ****   /* USER CODE BEGIN 2 */
 241:Src/main.c    **** 
 242:Src/main.c    **** 
 243:Src/main.c    ****   //////////////////////////////////////////////////////
 244:Src/main.c    ****   // Basiseinstellungen abfragen
 245:Src/main.c    ****   //////////////////////////////////////////////////////
 246:Src/main.c    **** 
 247:Src/main.c    ****   // Switch 1
 248:Src/main.c    ****   // ---------
 249:Src/main.c    ****   #define LAWO 0
 250:Src/main.c    ****   #define BROSE 1
 251:Src/main.c    ****   if(!HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin)) {
 252:Src/main.c    ****     Paneltyp = BROSE; // ON
 253:Src/main.c    ****   } else {
 254:Src/main.c    ****     Paneltyp = LAWO; // OFF
 255:Src/main.c    ****   }
 256:Src/main.c    **** 
 257:Src/main.c    ****   // Switch 2
 258:Src/main.c    ****   // ---------
 259:Src/main.c    ****   // 0 = 3 Panels (84px  Breite)
 260:Src/main.c    ****   // 1 = 4 Panels (112px Breite)
 261:Src/main.c    ****   if(!HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin)) {
 262:Src/main.c    ****     Panelanzahl = 4; // ON (Brose)
 263:Src/main.c    ****   } else {
 264:Src/main.c    ****     Panelanzahl = 3; // OFF (Lawo)
 265:Src/main.c    ****   }
 266:Src/main.c    **** 
 267:Src/main.c    ****   // Switch 3
 268:Src/main.c    ****   // ---------
 269:Src/main.c    ****   // 0 = fast_refresh OFF
 270:Src/main.c    ****   // 1 = fast_refresh ON
 271:Src/main.c    ****   if(!HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin)) {
 272:Src/main.c    ****     enable_fast_refresh = 1;
 273:Src/main.c    ****   } else {
 274:Src/main.c    ****     enable_fast_refresh = 0;
 275:Src/main.c    ****   }
 276:Src/main.c    **** 
 277:Src/main.c    ****   // Switch 4
 278:Src/main.c    ****   // ---------
 279:Src/main.c    ****   // 0 = deaktiviere manuelles Refreshen
 280:Src/main.c    ****   // 1 =   aktiviere manuelles Refreshen
 281:Src/main.c    ****   if(!HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin)) {
 282:Src/main.c    ****     enable_manually_refresh = 1;
 283:Src/main.c    ****   } else {
 284:Src/main.c    ****     enable_manually_refresh = 0;
 285:Src/main.c    ****   }
ARM GAS  /tmp/ccDqKevX.s 			page 11


 286:Src/main.c    **** 
 287:Src/main.c    **** 
 288:Src/main.c    **** 
 289:Src/main.c    ****   //////////////////////////////////////////////////////
 290:Src/main.c    ****   // Speicher initalisieren
 291:Src/main.c    ****   //////////////////////////////////////////////////////
 292:Src/main.c    **** 
 293:Src/main.c    ****   // InitalzustÃ¤nde aktivieren
 294:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_RESET_GPIO_Port, Spalten_RESET_Pin, 1);
 295:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_OE_GPIO_Port, Spalten_OE_Pin, 0);
 296:Src/main.c    **** 
 297:Src/main.c    ****   // Pixelspeicher
 298:Src/main.c    ****   dots = (uint32_t*)malloc(Panelanzahl * 28 * sizeof(uint32_t));
 299:Src/main.c    ****   if (dots == NULL) {
 300:Src/main.c    ****     while (1) {
 301:Src/main.c    **** 
 302:Src/main.c    ****       // Bei Speicherfehler -> blinken
 303:Src/main.c    ****       HAL_GPIO_WritePin(OnboardLED_GPIO_Port, OnboardLED_Pin, 1);
 304:Src/main.c    ****       HAL_Delay(500);
 305:Src/main.c    ****       HAL_GPIO_WritePin(OnboardLED_GPIO_Port, OnboardLED_Pin, 0);
 306:Src/main.c    ****       HAL_Delay(500);
 307:Src/main.c    ****     }
 308:Src/main.c    ****   }
 309:Src/main.c    **** 
 310:Src/main.c    ****   // Pixelspeicher (letzter Zustand)
 311:Src/main.c    ****   dots_old = (uint32_t*)malloc(Panelanzahl * 28 * sizeof(uint32_t));
 312:Src/main.c    ****   if (dots_old == NULL) {
 313:Src/main.c    ****     while (1) {
 314:Src/main.c    **** 
 315:Src/main.c    ****       // Bei Speicherfehler -> blinken
 316:Src/main.c    ****       HAL_GPIO_WritePin(OnboardLED_GPIO_Port, OnboardLED_Pin, 1);
 317:Src/main.c    ****       HAL_Delay(500);
 318:Src/main.c    ****       HAL_GPIO_WritePin(OnboardLED_GPIO_Port, OnboardLED_Pin, 0);
 319:Src/main.c    ****       HAL_Delay(500);
 320:Src/main.c    ****     }
 321:Src/main.c    ****   }
 322:Src/main.c    **** 
 323:Src/main.c    ****   // Pixelspeicher initalisieren
 324:Src/main.c    ****   for (uint8_t i=0; i < Panelanzahl * 28; i++) {
 325:Src/main.c    ****     dots[i] = 0;
 326:Src/main.c    ****     dots_old[i] = 0;
 327:Src/main.c    ****   }
 328:Src/main.c    **** 
 329:Src/main.c    ****   // Ringbuffer initalisieren
 330:Src/main.c    ****   ringbuffer_init();
 331:Src/main.c    **** 
 332:Src/main.c    ****   
 333:Src/main.c    **** 
 334:Src/main.c    **** 
 335:Src/main.c    **** 
 336:Src/main.c    **** 
 337:Src/main.c    ****   //////////////////////////////////////////////////////
 338:Src/main.c    ****   // Interrupts initalisieren
 339:Src/main.c    ****   //////////////////////////////////////////////////////
 340:Src/main.c    **** 
 341:Src/main.c    ****   // UART1 Interrupt aktivieren
 342:Src/main.c    ****   HAL_UART_Receive_IT(&huart1, &uart_puffer, 1);
ARM GAS  /tmp/ccDqKevX.s 			page 12


 343:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART1_IRQn);
 344:Src/main.c    **** 
 345:Src/main.c    ****   // Timer2 Interrupt aktivieren (aktuell nicht in Verwendung!!)
 346:Src/main.c    ****   // HAL_TIM_Base_Start_IT(&htim2);
 347:Src/main.c    **** 
 348:Src/main.c    **** 
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* USER CODE END 2 */
 351:Src/main.c    **** 
 352:Src/main.c    ****   /* Infinite loop */
 353:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 354:Src/main.c    ****   while (1)
 355:Src/main.c    ****   {
 356:Src/main.c    **** 
 357:Src/main.c    ****   /* USER CODE END WHILE */
 358:Src/main.c    **** 
 359:Src/main.c    ****   /* USER CODE BEGIN 3 */
 360:Src/main.c    **** 
 361:Src/main.c    ****   //////////////////////////////////////////////////////
 362:Src/main.c    ****   // Taster u. Variablen Abfragen durchfÃ¼hren
 363:Src/main.c    ****   //////////////////////////////////////////////////////
 364:Src/main.c    **** 
 365:Src/main.c    ****   // Taster Abfrage: Gelb-Test
 366:Src/main.c    ****   if (!HAL_GPIO_ReadPin(Test_Gelb_GPIO_Port, Test_Gelb_Pin) || start_yellow) {
 367:Src/main.c    ****     uint8_t Zeilen = 0;
 368:Src/main.c    ****     uint8_t enable_fast_refresh_current = enable_fast_refresh;
 369:Src/main.c    ****     enable_fast_refresh = 0; // disable fast_refresh for bl/yl test
 370:Src/main.c    ****     for (uint8_t i=0; i < Panelanzahl * 28; i++)
 371:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 372:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 373:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 374:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 375:Src/main.c    ****     enable_fast_refresh = enable_fast_refresh_current;
 376:Src/main.c    ****     yellow_test_or_center = 1;
 377:Src/main.c    ****     yellow_test_or_UP_DOWN = 1;
 378:Src/main.c    ****     start_yellow = 0;
 379:Src/main.c    **** 
 380:Src/main.c    ****     // Speichere aktuellen Zustand
 381:Src/main.c    ****     save_written_dots();
 382:Src/main.c    ****   }
 383:Src/main.c    **** 
 384:Src/main.c    ****   // Taster Abfrage: Schwarz-Test
 385:Src/main.c    ****   if (!HAL_GPIO_ReadPin(Test_Schwarz_GPIO_Port, Test_Schwarz_Pin) || start_black) {
 386:Src/main.c    ****     uint8_t Zeilen = 0;
 387:Src/main.c    ****     uint8_t enable_fast_refresh_current = enable_fast_refresh;
 388:Src/main.c    ****     enable_fast_refresh = 0; // disable fast_refresh for bl/yl test
 389:Src/main.c    ****     for (uint8_t i=0; i < Panelanzahl * 28; i++)
 390:Src/main.c    ****         dots[i] = 0x00000000;
 391:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 392:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 393:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 394:Src/main.c    ****     enable_fast_refresh = enable_fast_refresh_current;
 395:Src/main.c    ****     yellow_test_or_center = 0;
 396:Src/main.c    ****     yellow_test_or_UP_DOWN = 0;
 397:Src/main.c    ****     start_black = 0;
 398:Src/main.c    **** 
 399:Src/main.c    ****     // Speichere aktuellen Zustand
ARM GAS  /tmp/ccDqKevX.s 			page 13


 400:Src/main.c    ****     save_written_dots();
 401:Src/main.c    ****   }
 402:Src/main.c    **** 
 403:Src/main.c    ****   // Taster Abfrage: Lampen-Test
 404:Src/main.c    ****   if (!HAL_GPIO_ReadPin(Test_Lampe_GPIO_Port, Test_Lampe_Pin)) {
 405:Src/main.c    ****     static uint32_t blocked_until = 0;
 406:Src/main.c    ****     if (HAL_GetTick() > blocked_until) {
 407:Src/main.c    ****       if (HAL_GPIO_ReadPin(Lampe_GPIO_Port, Lampe_Pin)) {
 408:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 0);
 409:Src/main.c    ****       } else {
 410:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 1);
 411:Src/main.c    ****       }
 412:Src/main.c    ****       blocked_until = HAL_GetTick() + 400;
 413:Src/main.c    ****     }
 414:Src/main.c    ****   }
 415:Src/main.c    **** 
 416:Src/main.c    **** 
 417:Src/main.c    ****   //////////////////////////////////////////////////////
 418:Src/main.c    ****   // Anzeigeninhalt aktualisieren
 419:Src/main.c    ****   //////////////////////////////////////////////////////
 420:Src/main.c    ****   if (start_refresh) {
 421:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 422:Src/main.c    ****     if (Paneltyp == LAWO)  { anzahl_spalten=16; }
 423:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 424:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, anzahl_spalten - 1);
 425:Src/main.c    ****     start_refresh = 0;
 426:Src/main.c    **** 
 427:Src/main.c    ****     // Speichere aktuellen Zustand
 428:Src/main.c    ****     save_written_dots();
 429:Src/main.c    ****   }
 430:Src/main.c    **** 
 431:Src/main.c    **** 
 432:Src/main.c    **** 
 433:Src/main.c    **** 
 434:Src/main.c    ****   ////////////////////////////////////////////////////////////
 435:Src/main.c    ****   // Anzeigeninhalt aktualisieren (Text)
 436:Src/main.c    ****   ////////////////////////////////////////////////////////////
 437:Src/main.c    ****   // Text mittig
 438:Src/main.c    ****   if (start_refresh_center) {
 439:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 4, 11);
 440:Src/main.c    ****     start_refresh_center = 0;
 441:Src/main.c    **** 
 442:Src/main.c    ****     // Speichere aktuellen Zustand
 443:Src/main.c    ****     save_written_dots();
 444:Src/main.c    ****   }
 445:Src/main.c    **** 
 446:Src/main.c    ****   // Text oben
 447:Src/main.c    ****   if (start_refresh_UP) {
 448:Src/main.c    ****     uint8_t offset = 0;
 449:Src/main.c    ****     if (Paneltyp == LAWO)  { offset=0; }
 450:Src/main.c    ****     if (Paneltyp == BROSE) { offset=0; }
 451:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, 7+offset);
 452:Src/main.c    ****     start_refresh_UP = 0;
 453:Src/main.c    **** 
 454:Src/main.c    ****     // Speichere aktuellen Zustand
 455:Src/main.c    ****     save_written_dots();
 456:Src/main.c    ****   }
ARM GAS  /tmp/ccDqKevX.s 			page 14


 457:Src/main.c    **** 
 458:Src/main.c    ****   // Text unten
 459:Src/main.c    ****   if (start_refresh_DOWN) {
 460:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 461:Src/main.c    ****     if (Paneltyp == LAWO)  { anzahl_spalten=16; }
 462:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 463:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, anzahl_spalten - 8, anzahl_spalten - 1);
 464:Src/main.c    ****     start_refresh_DOWN = 0;
 465:Src/main.c    **** 
 466:Src/main.c    ****     // Speichere aktuellen Zustand
 467:Src/main.c    ****     save_written_dots();
 468:Src/main.c    ****   }
 469:Src/main.c    **** 
 470:Src/main.c    **** 
 471:Src/main.c    ****   //////////////////////////////////////////////////////
 472:Src/main.c    ****   // UART Buffer auslesen und Befehle starten
 473:Src/main.c    ****   //////////////////////////////////////////////////////
 474:Src/main.c    ****   unsigned char _temp_char = ringbuffer_get();
 475:Src/main.c    ****   static uint32_t cmd_buffer_pos = 0;
 476:Src/main.c    ****   while (_temp_char) {
 477:Src/main.c    **** 
 478:Src/main.c    ****     // Aktuelles Zeichen in Befehlspuffer laden
 479:Src/main.c    ****     cmd_buffer[cmd_buffer_pos] = _temp_char;
 480:Src/main.c    ****     cmd_buffer_pos++;
 481:Src/main.c    ****     if (cmd_buffer_pos >= cmd_buffer_size) {
 482:Src/main.c    ****       cmd_buffer_pos = 0;
 483:Src/main.c    ****       break;
 484:Src/main.c    ****     }
 485:Src/main.c    **** 
 486:Src/main.c    ****     // Befehl vollstÃ¤ndig ausgelesen ?
 487:Src/main.c    ****     if (_temp_char == '\n') {
 488:Src/main.c    ****       cmd_buffer[cmd_buffer_pos] = '\0';
 489:Src/main.c    ****       cmd_buffer_pos = 0;
 490:Src/main.c    **** 
 491:Src/main.c    ****       // Befehl ausfÃ¼hren
 492:Src/main.c    ****       Run_CMD(cmd_buffer);
 493:Src/main.c    ****       break;
 494:Src/main.c    ****     }
 495:Src/main.c    **** 
 496:Src/main.c    ****     // Neues Zeichen aus UART/Ringpuffer laden
 497:Src/main.c    ****     _temp_char = ringbuffer_get();
 498:Src/main.c    ****   }
 499:Src/main.c    **** 
 500:Src/main.c    ****   
 501:Src/main.c    **** 
 502:Src/main.c    ****   
 503:Src/main.c    ****   
 504:Src/main.c    **** 
 505:Src/main.c    **** 
 506:Src/main.c    **** 
 507:Src/main.c    **** 
 508:Src/main.c    ****   //////////////////////////////////////////////////////
 509:Src/main.c    ****   // UART nach 250ms zurÃ¼cksetzen
 510:Src/main.c    ****   //////////////////////////////////////////////////////
 511:Src/main.c    ****   if (HAL_GetTick() > (uart_last_time + 250) && uart_last_time != 0 && !isBusy()) {
 512:Src/main.c    ****     cmd_buffer_pos = 0;
 513:Src/main.c    ****     ringbuffer_init();
ARM GAS  /tmp/ccDqKevX.s 			page 15


 514:Src/main.c    ****     uart_last_time = HAL_GetTick();
 515:Src/main.c    ****   }
 516:Src/main.c    ****   if (HAL_GetTick() > (uart_last_time + 50)) {
 517:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 518:Src/main.c    ****     uart_last_time = HAL_GetTick();
 519:Src/main.c    ****   }
 520:Src/main.c    **** 
 521:Src/main.c    **** 
 522:Src/main.c    **** 
 523:Src/main.c    ****   }
 524:Src/main.c    ****   /* USER CODE END 3 */
 525:Src/main.c    **** 
 526:Src/main.c    **** }
 527:Src/main.c    **** 
 528:Src/main.c    **** /**
 529:Src/main.c    ****   * @brief System Clock Configuration
 530:Src/main.c    ****   * @retval None
 531:Src/main.c    ****   */
 532:Src/main.c    **** void SystemClock_Config(void)
 533:Src/main.c    **** {
 534:Src/main.c    **** 
 535:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 536:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 537:Src/main.c    **** 
 538:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 539:Src/main.c    ****     */
 540:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 541:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 542:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 543:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 544:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 545:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 546:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 547:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 548:Src/main.c    ****   {
 549:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 550:Src/main.c    ****   }
 551:Src/main.c    **** 
 552:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 553:Src/main.c    ****     */
 554:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 555:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 556:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 557:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 558:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 559:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 560:Src/main.c    **** 
 561:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 562:Src/main.c    ****   {
 563:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 564:Src/main.c    ****   }
 565:Src/main.c    **** 
 566:Src/main.c    ****     /**Configure the Systick interrupt time
 567:Src/main.c    ****     */
 568:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 569:Src/main.c    **** 
 570:Src/main.c    ****     /**Configure the Systick
ARM GAS  /tmp/ccDqKevX.s 			page 16


 571:Src/main.c    ****     */
 572:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 573:Src/main.c    **** 
 574:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 575:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 576:Src/main.c    **** }
 577:Src/main.c    **** 
 578:Src/main.c    **** /* USER CODE BEGIN 4 */
 579:Src/main.c    **** 
 580:Src/main.c    **** //////////////////////////////////////////////////////
 581:Src/main.c    **** // FlipDot Schreibprozess aktiv?
 582:Src/main.c    **** //////////////////////////////////////////////////////
 583:Src/main.c    **** int isBusy() {
 244              		.loc 3 583 14 is_stmt 1 view -0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 584:Src/main.c    ****   return start_refresh | start_refresh_center | start_refresh_DOWN | start_refresh_UP | start_yello
 249              		.loc 3 584 3 view .LVU48
 250              		.loc 3 584 102 is_stmt 0 view .LVU49
 251 0000 084B     		ldr	r3, .L21
 252 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 253 0004 084A     		ldr	r2, .L21+4
 254 0006 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 255 0008 0343     		orrs	r3, r3, r0
 256 000a 084A     		ldr	r2, .L21+8
 257 000c 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 258 000e 0343     		orrs	r3, r3, r0
 259 0010 074A     		ldr	r2, .L21+12
 260 0012 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 261 0014 0343     		orrs	r3, r3, r0
 262 0016 074A     		ldr	r2, .L21+16
 263 0018 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 264 001a 0343     		orrs	r3, r3, r0
 265 001c 064A     		ldr	r2, .L21+20
 266 001e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 585:Src/main.c    **** }
 267              		.loc 3 585 1 view .LVU50
 268 0020 1843     		orrs	r0, r0, r3
 269 0022 7047     		bx	lr
 270              	.L22:
 271              		.align	2
 272              	.L21:
 273 0024 00000000 		.word	.LANCHOR2
 274 0028 00000000 		.word	.LANCHOR3
 275 002c 00000000 		.word	.LANCHOR4
 276 0030 00000000 		.word	.LANCHOR5
 277 0034 00000000 		.word	.LANCHOR6
 278 0038 00000000 		.word	.LANCHOR7
 279              		.cfi_endproc
 280              	.LFE72:
 282              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 283              		.align	1
 284              		.global	HAL_UART_RxCpltCallback
 285              		.syntax unified
 286              		.thumb
ARM GAS  /tmp/ccDqKevX.s 			page 17


 287              		.thumb_func
 288              		.fpu softvfp
 290              	HAL_UART_RxCpltCallback:
 291              	.LVL7:
 292              	.LFB73:
 586:Src/main.c    **** 
 587:Src/main.c    **** 
 588:Src/main.c    **** //////////////////////////////////////////////////////
 589:Src/main.c    **** // UART Interrupts verarbeiten
 590:Src/main.c    **** //////////////////////////////////////////////////////
 591:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 293              		.loc 3 591 57 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 592:Src/main.c    **** 
 593:Src/main.c    ****   // UART 1
 594:Src/main.c    ****   if (huart->Instance == USART1) {
 297              		.loc 3 594 3 view .LVU52
 298              		.loc 3 594 12 is_stmt 0 view .LVU53
 299 0000 0268     		ldr	r2, [r0]
 300              		.loc 3 594 6 view .LVU54
 301 0002 0C4B     		ldr	r3, .L30
 302 0004 9A42     		cmp	r2, r3
 303 0006 00D0     		beq	.L29
 304 0008 7047     		bx	lr
 305              	.L29:
 591:Src/main.c    **** 
 306              		.loc 3 591 57 view .LVU55
 307 000a 10B5     		push	{r4, lr}
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 4, -8
 311              		.cfi_offset 14, -4
 595:Src/main.c    **** 
 596:Src/main.c    ****     // RX LED einschalten
 597:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  1);
 312              		.loc 3 597 5 is_stmt 1 view .LVU56
 313 000c 0122     		movs	r2, #1
 314 000e 8021     		movs	r1, #128
 315 0010 0948     		ldr	r0, .L30+4
 316              	.LVL8:
 317              		.loc 3 597 5 is_stmt 0 view .LVU57
 318 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 319              	.LVL9:
 598:Src/main.c    **** 
 599:Src/main.c    ****     //////////////////////////////////////////////////////
 600:Src/main.c    ****     // Daten wegschreiben
 601:Src/main.c    ****     //////////////////////////////////////////////////////
 602:Src/main.c    ****     ringbuffer_pushback((unsigned char)uart_puffer);
 320              		.loc 3 602 5 is_stmt 1 view .LVU58
 321 0016 094C     		ldr	r4, .L30+8
 322 0018 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 323 001a FFF7FEFF 		bl	ringbuffer_pushback
 324              	.LVL10:
 603:Src/main.c    **** 
 604:Src/main.c    ****     // RX LED wieder ausschalten
ARM GAS  /tmp/ccDqKevX.s 			page 18


 605:Src/main.c    ****     // HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 606:Src/main.c    ****     // Wird im Hauptprogramm nach einem gewissen Delay wieder ausgeschaltet!
 607:Src/main.c    **** 
 608:Src/main.c    ****     // Aktuelle Zeit speichern
 609:Src/main.c    ****     uart_last_time = HAL_GetTick();
 325              		.loc 3 609 5 view .LVU59
 326              		.loc 3 609 22 is_stmt 0 view .LVU60
 327 001e FFF7FEFF 		bl	HAL_GetTick
 328              	.LVL11:
 329              		.loc 3 609 20 view .LVU61
 330 0022 074B     		ldr	r3, .L30+12
 331 0024 1860     		str	r0, [r3]
 610:Src/main.c    ****     
 611:Src/main.c    ****     // Interrupt erneut starten
 612:Src/main.c    ****     HAL_UART_Receive_IT(&huart1, &uart_puffer, 1);
 332              		.loc 3 612 5 is_stmt 1 view .LVU62
 333 0026 0122     		movs	r2, #1
 334 0028 2146     		mov	r1, r4
 335 002a 0648     		ldr	r0, .L30+16
 336 002c FFF7FEFF 		bl	HAL_UART_Receive_IT
 337              	.LVL12:
 613:Src/main.c    ****   }
 614:Src/main.c    **** }
 338              		.loc 3 614 1 is_stmt 0 view .LVU63
 339 0030 10BD     		pop	{r4, pc}
 340              	.L31:
 341 0032 00BF     		.align	2
 342              	.L30:
 343 0034 00380140 		.word	1073821696
 344 0038 000C0140 		.word	1073810432
 345 003c 00000000 		.word	.LANCHOR8
 346 0040 00000000 		.word	.LANCHOR9
 347 0044 00000000 		.word	huart1
 348              		.cfi_endproc
 349              	.LFE73:
 351              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 352              		.align	1
 353              		.global	HAL_TIM_PeriodElapsedCallback
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu softvfp
 359              	HAL_TIM_PeriodElapsedCallback:
 360              	.LVL13:
 361              	.LFB74:
 615:Src/main.c    **** 
 616:Src/main.c    **** 
 617:Src/main.c    **** 
 618:Src/main.c    **** //////////////////////////////////////////////////////
 619:Src/main.c    **** // Timer Interrupts verarbeiten
 620:Src/main.c    **** //////////////////////////////////////////////////////
 621:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 362              		.loc 3 621 61 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
ARM GAS  /tmp/ccDqKevX.s 			page 19


 622:Src/main.c    **** 
 623:Src/main.c    ****   // Timer 2 (Multiplexing)
 624:Src/main.c    ****   if (htim->Instance == TIM2) {
 367              		.loc 3 624 3 view .LVU65
 625:Src/main.c    **** 
 626:Src/main.c    ****     // TIMER 2 ist deaktiviert!!
 627:Src/main.c    **** 
 628:Src/main.c    ****     // Auf nÃ¤chsten Schritt umschalten und berechnete Zeit warten!
 629:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&htim2, 0);
 630:Src/main.c    ****     //__HAL_TIM_SET_AUTORELOAD(&htim2, (on_time)+4);
 631:Src/main.c    ****   }
 368              		.loc 3 631 3 view .LVU66
 632:Src/main.c    **** }
 369              		.loc 3 632 1 is_stmt 0 view .LVU67
 370 0000 7047     		bx	lr
 371              		.cfi_endproc
 372              	.LFE74:
 374              		.section	.text.Zeile_aktivieren,"ax",%progbits
 375              		.align	1
 376              		.global	Zeile_aktivieren
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu softvfp
 382              	Zeile_aktivieren:
 383              	.LVL14:
 384              	.LFB76:
 633:Src/main.c    **** 
 634:Src/main.c    **** 
 635:Src/main.c    **** 
 636:Src/main.c    **** //////////////////////////////////////////////////////
 637:Src/main.c    **** // Befehl verarbeiten
 638:Src/main.c    **** //////////////////////////////////////////////////////
 639:Src/main.c    **** int Run_CMD(unsigned char* command) {
 640:Src/main.c    **** 
 641:Src/main.c    **** 
 642:Src/main.c    ****   //////////////////////////////////////////////////////
 643:Src/main.c    ****   // 1. Befehl aufsplitten
 644:Src/main.c    ****   //////////////////////////////////////////////////////
 645:Src/main.c    ****   
 646:Src/main.c    ****   // count and replace " with \0
 647:Src/main.c    ****   uint32_t str_len = strlen((const char*)command);
 648:Src/main.c    ****   uint8_t quotation_marks_cnt = 0;
 649:Src/main.c    ****   char* arg_text = NULL;
 650:Src/main.c    ****   for (uint32_t i=0; i<str_len; i++) {
 651:Src/main.c    ****     if (command[i] == '\"') {
 652:Src/main.c    ****       command[i] = '\0';
 653:Src/main.c    ****       quotation_marks_cnt++;
 654:Src/main.c    **** 
 655:Src/main.c    ****       // set text arg pointer
 656:Src/main.c    ****       if (!arg_text) {
 657:Src/main.c    ****         arg_text = (char*)(command + i + 1);
 658:Src/main.c    ****       }
 659:Src/main.c    ****     }
 660:Src/main.c    ****     if (command[i] == '\n') { // delete newline
 661:Src/main.c    ****       command[i] = '\0';
 662:Src/main.c    ****     }
ARM GAS  /tmp/ccDqKevX.s 			page 20


 663:Src/main.c    ****   }
 664:Src/main.c    ****   if (quotation_marks_cnt != 0 && quotation_marks_cnt != 2) {
 665:Src/main.c    ****     return -1; // invalid command
 666:Src/main.c    ****   }
 667:Src/main.c    **** 
 668:Src/main.c    ****   // separate command into args
 669:Src/main.c    ****   char* args[max_cmd_args];
 670:Src/main.c    ****   args[0] = strtok((char*)command, " ");
 671:Src/main.c    ****   int f = 0;
 672:Src/main.c    ****   while (args[f]) {
 673:Src/main.c    ****     f++;
 674:Src/main.c    ****     if (f >= max_cmd_args) { break; }
 675:Src/main.c    ****     args[f] = strtok(NULL, " ");
 676:Src/main.c    ****   }
 677:Src/main.c    ****   if (f < max_cmd_args && !arg_text) {
 678:Src/main.c    ****     args[f] = NULL;
 679:Src/main.c    ****   }
 680:Src/main.c    **** 
 681:Src/main.c    ****   // append the text-string to args
 682:Src/main.c    ****   if (arg_text) {
 683:Src/main.c    ****     uint8_t pos_text = f;
 684:Src/main.c    ****     if (!(pos_text >= max_cmd_args)) {
 685:Src/main.c    ****       args[pos_text] = arg_text;
 686:Src/main.c    ****     }
 687:Src/main.c    ****     if (pos_text+1 < max_cmd_args) {
 688:Src/main.c    ****       args[pos_text+1] = NULL;
 689:Src/main.c    ****     }
 690:Src/main.c    ****   }
 691:Src/main.c    ****  
 692:Src/main.c    ****   // count args
 693:Src/main.c    ****   uint8_t arg_cnt = 0;
 694:Src/main.c    ****   while (args[arg_cnt] && arg_cnt < max_cmd_args) { arg_cnt++; }
 695:Src/main.c    ****   if (!arg_cnt) {
 696:Src/main.c    ****     return -1;
 697:Src/main.c    ****   }
 698:Src/main.c    **** 
 699:Src/main.c    ****   // Befehl bestimmen
 700:Src/main.c    ****   uint8_t current_cmd = CMD_ERROR;
 701:Src/main.c    ****   if        (arg_cnt == 4 && !strcmp(args[0], "SET_DOT")) {   current_cmd = CMD_SET_DOT;
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 703:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 704:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_BUFF")) {  current_cmd = CMD_SET_BUFF;
 705:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 708:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 709:Src/main.c    ****   }
 710:Src/main.c    ****   if (current_cmd == CMD_ERROR) {
 711:Src/main.c    ****     return -1;
 712:Src/main.c    ****   }
 713:Src/main.c    **** 
 714:Src/main.c    **** 
 715:Src/main.c    **** 
 716:Src/main.c    ****   //////////////////////////////////////////////////////
 717:Src/main.c    ****   // 2. Befehl ausfÃ¼hren
 718:Src/main.c    ****   //////////////////////////////////////////////////////
 719:Src/main.c    ****   switch (current_cmd) {
ARM GAS  /tmp/ccDqKevX.s 			page 21


 720:Src/main.c    **** 
 721:Src/main.c    ****     // Lampe ein/aus
 722:Src/main.c    ****     // usage: LIGHT <1/0>
 723:Src/main.c    ****     case CMD_LIGHT:
 724:Src/main.c    ****       if (atoi(args[1])) {
 725:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 1);
 726:Src/main.c    ****       } else {
 727:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 0);
 728:Src/main.c    ****       }
 729:Src/main.c    ****       break;
 730:Src/main.c    **** 
 731:Src/main.c    ****     // Alle Dots setzen/lÃ¶schen
 732:Src/main.c    ****     // usage: SET_ALL <1/0> (1=yellow, 0=black)
 733:Src/main.c    ****     case CMD_SET_ALL:
 734:Src/main.c    ****       if (atoi(args[1])) {
 735:Src/main.c    ****         start_yellow = 1;
 736:Src/main.c    ****       } else {
 737:Src/main.c    ****         start_black = 1;
 738:Src/main.c    ****       }
 739:Src/main.c    ****       break;
 740:Src/main.c    ****     
 741:Src/main.c    ****     // Alle Dots setzen/lÃ¶schen (Zwischenspeicher)
 742:Src/main.c    ****     // usage: CMD_SET_BUFF <1/0> (1=yellow, 0=black)
 743:Src/main.c    ****     case CMD_SET_BUFF:
 744:Src/main.c    ****       if (atoi(args[1])) {
 745:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++)
 746:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 747:Src/main.c    ****       } else {
 748:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++)
 749:Src/main.c    ****           dots[i] |= 0;
 750:Src/main.c    ****       }
 751:Src/main.c    ****       break;
 752:Src/main.c    **** 
 753:Src/main.c    ****     // Dot setzen/lÃ¶schen (Zwischenspeicher)
 754:Src/main.c    ****     // usage: SET_DOT <x> <y> <1/0>
 755:Src/main.c    ****     case CMD_SET_DOT: {
 756:Src/main.c    ****       uint32_t x = atoi(args[1]);
 757:Src/main.c    ****       uint32_t y = atoi(args[2]);
 758:Src/main.c    ****       if (x > (Panelanzahl * 28) - 1) { break; }
 759:Src/main.c    ****       if (y > (20 - 1)) { break; }
 760:Src/main.c    ****       if (atoi(args[3])) {
 761:Src/main.c    **** 
 762:Src/main.c    ****         // Setzen
 763:Src/main.c    ****         dots[x] |= ((uint32_t)0x00000001 << y);
 764:Src/main.c    ****       
 765:Src/main.c    ****       } else {
 766:Src/main.c    **** 
 767:Src/main.c    ****         // LÃ¶schen
 768:Src/main.c    ****         dots[x] &= ~((uint32_t)0x00000001 << y);
 769:Src/main.c    ****       }
 770:Src/main.c    ****       break; }
 771:Src/main.c    ****     
 772:Src/main.c    ****     // Pixeldaten ausgeben (Refresh)
 773:Src/main.c    ****     // usage: REFRESH
 774:Src/main.c    ****     case CMD_REFRESH:
 775:Src/main.c    ****       start_refresh = 1;
 776:Src/main.c    ****       break;
ARM GAS  /tmp/ccDqKevX.s 			page 22


 777:Src/main.c    **** 
 778:Src/main.c    ****     // Text (mittig)
 779:Src/main.c    ****     // usage: TEXT_CENTER <Font_ID> <Position> "<Text>"
 780:Src/main.c    ****     // (Position: L=left, C=center, R=right, 0..83/111=offset von links)
 781:Src/main.c    ****     case CMD_TEXT_CENTER: {
 782:Src/main.c    **** 
 783:Src/main.c    ****       // TextlÃ¤nge festlegen
 784:Src/main.c    ****       int text_laenge = strlen(args[3]);
 785:Src/main.c    ****       if (text_laenge <= 0) { break; }
 786:Src/main.c    **** 
 787:Src/main.c    ****       // Checke auf gÃ¼ltige Schriftart und Position
 788:Src/main.c    ****       int font = atoi(args[1]);
 789:Src/main.c    ****       if (font != 1 && font != 0)
 790:Src/main.c    ****         break;
 791:Src/main.c    ****       int offset_mode = -1;
 792:Src/main.c    ****       unsigned char position = atoi(args[2]);
 793:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 794:Src/main.c    ****         offset_mode = 0;
 795:Src/main.c    ****         position = args[2][0];
 796:Src/main.c    ****       } else {
 797:Src/main.c    ****         if (position < (28 * Panelanzahl))
 798:Src/main.c    ****           offset_mode = 1;
 799:Src/main.c    ****       }
 800:Src/main.c    ****       if (offset_mode < 0)
 801:Src/main.c    ****         break; // error
 802:Src/main.c    ****       
 803:Src/main.c    ****       // Text generieren
 804:Src/main.c    ****       for (int i=0; i<max_text_size; i++) { textbuffer_8px_UP[i] = 0; }
 805:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 806:Src/main.c    ****       if (!text_breite) { break; }
 807:Src/main.c    **** 
 808:Src/main.c    ****       // Mittlere Textreihe im Dot-Buffer lÃ¶schen
 809:Src/main.c    ****       for (int i=0; i<(28 * Panelanzahl); i++)
 810:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 811:Src/main.c    **** 
 812:Src/main.c    ****       // evtl. alles lÃ¶schen
 813:Src/main.c    ****       if (yellow_test_or_UP_DOWN) {
 814:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 815:Src/main.c    ****           dots[i] = 0; }
 816:Src/main.c    ****       }
 817:Src/main.c    **** 
 818:Src/main.c    ****       // Text in Dot-Buffer schreiben
 819:Src/main.c    ****       uint8_t offset = 0;
 820:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 821:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 822:Src/main.c    ****       }
 823:Src/main.c    ****       if (text_breite >= (28 * Panelanzahl))
 824:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 825:Src/main.c    ****       if (position == 'L') // linksbÃ¼ndig
 826:Src/main.c    ****         offset = 0;
 827:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 828:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 829:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 830:Src/main.c    ****         } else { offset = 0; }
 831:Src/main.c    ****       }
 832:Src/main.c    ****       if (offset_mode) // 0..83/111 - offset manuell
 833:Src/main.c    ****         offset = position;
ARM GAS  /tmp/ccDqKevX.s 			page 23


 834:Src/main.c    ****       for (int i=0; i<text_breite && i+offset<(28*Panelanzahl); i++) {
 835:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 836:Src/main.c    ****       }
 837:Src/main.c    **** 
 838:Src/main.c    ****       // Schreibflags setzen
 839:Src/main.c    ****       if (!enable_manually_refresh) {
 840:Src/main.c    ****         if (yellow_test_or_UP_DOWN) {
 841:Src/main.c    ****           start_refresh = 1;
 842:Src/main.c    ****         } else {
 843:Src/main.c    ****           start_refresh_center = 1;
 844:Src/main.c    ****         }
 845:Src/main.c    ****       }
 846:Src/main.c    ****       yellow_test_or_center = 1;
 847:Src/main.c    ****       yellow_test_or_UP_DOWN = 0;
 848:Src/main.c    ****       break; }
 849:Src/main.c    **** 
 850:Src/main.c    ****     // Text (oben)
 851:Src/main.c    ****     // usage: TEXT_TOP <Font_ID> <Position 1/2/3> "<Text>"
 852:Src/main.c    ****     // (Position: 1=left, 2=center, 3=right)
 853:Src/main.c    ****     case CMD_TEXT_TOP: {
 854:Src/main.c    **** 
 855:Src/main.c    ****       // TextlÃ¤nge festlegen
 856:Src/main.c    ****       int text_laenge = strlen(args[3]);
 857:Src/main.c    ****       if (text_laenge <= 0) { break; }
 858:Src/main.c    **** 
 859:Src/main.c    ****       // Checke auf gÃ¼ltige Schriftart und Position
 860:Src/main.c    ****       int font = atoi(args[1]);
 861:Src/main.c    ****       if (font != 1 && font != 0)
 862:Src/main.c    ****         break;
 863:Src/main.c    ****       int offset_mode = -1;
 864:Src/main.c    ****       unsigned char position = atoi(args[2]);
 865:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 866:Src/main.c    ****         offset_mode = 0;
 867:Src/main.c    ****         position = args[2][0];
 868:Src/main.c    ****       } else {
 869:Src/main.c    ****         if (position < (28 * Panelanzahl))
 870:Src/main.c    ****           offset_mode = 1;
 871:Src/main.c    ****       }
 872:Src/main.c    ****       if (offset_mode < 0)
 873:Src/main.c    ****         break; // error
 874:Src/main.c    ****       
 875:Src/main.c    ****       // Text generieren
 876:Src/main.c    ****       for (int i=0; i<max_text_size; i++) { textbuffer_8px_UP[i] = 0; }
 877:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 878:Src/main.c    ****       if (!text_breite) { break; }
 879:Src/main.c    **** 
 880:Src/main.c    ****       // Obere Textreihe im Dot-Buffer lÃ¶schen
 881:Src/main.c    ****       for (int i=0; i<(28 * Panelanzahl); i++)
 882:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 883:Src/main.c    ****       
 884:Src/main.c    ****       // evtl. alles lÃ¶schen
 885:Src/main.c    ****       if (yellow_test_or_center) {
 886:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 887:Src/main.c    ****           dots[i] = 0; }
 888:Src/main.c    ****       }
 889:Src/main.c    **** 
 890:Src/main.c    ****       // Text in Dot-Buffer schreiben
ARM GAS  /tmp/ccDqKevX.s 			page 24


 891:Src/main.c    ****       uint8_t offset = 0;
 892:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 893:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 894:Src/main.c    ****       }
 895:Src/main.c    ****       if (text_breite >= (28 * Panelanzahl))
 896:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 897:Src/main.c    ****       if (position == 'L') // linksbÃ¼ndig
 898:Src/main.c    ****         offset = 0;
 899:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 900:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 901:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 902:Src/main.c    ****         } else { offset = 0; }
 903:Src/main.c    ****       }
 904:Src/main.c    ****       if (offset_mode) // 0..83/111 - offset manuell
 905:Src/main.c    ****         offset = position;
 906:Src/main.c    ****       for (int i=0; i<text_breite && i+offset<(28*Panelanzahl); i++) {
 907:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 908:Src/main.c    ****       }
 909:Src/main.c    **** 
 910:Src/main.c    ****       // Schreibflags setzen
 911:Src/main.c    ****       if (!enable_manually_refresh) {
 912:Src/main.c    ****         if (yellow_test_or_center) {
 913:Src/main.c    ****           start_refresh = 1;
 914:Src/main.c    ****         } else {
 915:Src/main.c    ****           start_refresh_UP = 1;
 916:Src/main.c    ****         }
 917:Src/main.c    ****       }
 918:Src/main.c    ****       yellow_test_or_center = 0;
 919:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 920:Src/main.c    ****       break; }
 921:Src/main.c    **** 
 922:Src/main.c    ****     // Text (unten)
 923:Src/main.c    ****     // usage: TEXT_BOTTOM <Font_ID> <Position 1/2/3> "<Text>"
 924:Src/main.c    ****     // (Position: 1=left, 2=center, 3=right)
 925:Src/main.c    ****     case CMD_TEXT_BOTTOM: {
 926:Src/main.c    **** 
 927:Src/main.c    ****       // TextlÃ¤nge festlegen
 928:Src/main.c    ****       int text_laenge = strlen(args[3]);
 929:Src/main.c    ****       if (text_laenge <= 0) { break; }
 930:Src/main.c    **** 
 931:Src/main.c    ****       // Checke auf gÃ¼ltige Schriftart und Position
 932:Src/main.c    ****       int font = atoi(args[1]);
 933:Src/main.c    ****       if (font != 1 && font != 0)
 934:Src/main.c    ****         break;
 935:Src/main.c    ****       int offset_mode = -1;
 936:Src/main.c    ****       unsigned char position = atoi(args[2]);
 937:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 938:Src/main.c    ****         offset_mode = 0;
 939:Src/main.c    ****         position = args[2][0];
 940:Src/main.c    ****       } else {
 941:Src/main.c    ****         if (position < (28 * Panelanzahl))
 942:Src/main.c    ****           offset_mode = 1;
 943:Src/main.c    ****       }
 944:Src/main.c    ****       if (offset_mode < 0)
 945:Src/main.c    ****         break; // error
 946:Src/main.c    ****       
 947:Src/main.c    ****       // Text generieren
ARM GAS  /tmp/ccDqKevX.s 			page 25


 948:Src/main.c    ****       for (int i=0; i<max_text_size; i++) { textbuffer_8px_UP[i] = 0; }
 949:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 950:Src/main.c    ****       if (!text_breite) { break; }
 951:Src/main.c    **** 
 952:Src/main.c    ****       // Unterste Textreihe im Dot-Buffer lÃ¶schen
 953:Src/main.c    ****       for (int i=0; i<(28 * Panelanzahl); i++)
 954:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 955:Src/main.c    ****       
 956:Src/main.c    ****       // evtl. alles lÃ¶schen
 957:Src/main.c    ****       if (yellow_test_or_center) {
 958:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 959:Src/main.c    ****           dots[i] = 0; }
 960:Src/main.c    ****       }
 961:Src/main.c    **** 
 962:Src/main.c    ****       // Text in Dot-Buffer schreiben
 963:Src/main.c    ****       uint8_t offset = 0;
 964:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 965:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 966:Src/main.c    ****       }
 967:Src/main.c    ****       if (text_breite >= (28 * Panelanzahl))
 968:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 969:Src/main.c    ****       if (position == 'L') // linksbÃ¼ndig
 970:Src/main.c    ****         offset = 0;
 971:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 972:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 973:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 974:Src/main.c    ****         } else { offset = 0; }
 975:Src/main.c    ****       }
 976:Src/main.c    ****       if (offset_mode) // 0..83/111 - offset manuell
 977:Src/main.c    ****         offset = position;
 978:Src/main.c    ****       for (int i=0; i<text_breite && i+offset<(28*Panelanzahl); i++) {
 979:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 980:Src/main.c    ****       }
 981:Src/main.c    **** 
 982:Src/main.c    ****       // Schreibflags setzen
 983:Src/main.c    ****       if (!enable_manually_refresh) {
 984:Src/main.c    ****         if (yellow_test_or_center) {
 985:Src/main.c    ****           start_refresh = 1;
 986:Src/main.c    ****         } else {
 987:Src/main.c    ****           start_refresh_DOWN = 1;
 988:Src/main.c    ****         }
 989:Src/main.c    ****       }
 990:Src/main.c    ****       yellow_test_or_center = 0;
 991:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 992:Src/main.c    ****       break; }
 993:Src/main.c    **** 
 994:Src/main.c    ****     default:
 995:Src/main.c    ****       // Default
 996:Src/main.c    ****       return -1;
 997:Src/main.c    ****       break;
 998:Src/main.c    ****   }
 999:Src/main.c    **** 
1000:Src/main.c    ****   return 0;
1001:Src/main.c    **** }
1002:Src/main.c    **** 
1003:Src/main.c    **** 
1004:Src/main.c    **** 
ARM GAS  /tmp/ccDqKevX.s 			page 26


1005:Src/main.c    **** //////////////////////////////////////////////////////
1006:Src/main.c    **** // Zeile aktivieren
1007:Src/main.c    **** //////////////////////////////////////////////////////
1008:Src/main.c    **** void Zeile_aktivieren(uint8_t Zeile, uint8_t SET_RESET) {
 385              		.loc 3 1008 57 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 0, uses_anonymous_args = 0
1009:Src/main.c    **** 
1010:Src/main.c    ****   // Variabelcheck
1011:Src/main.c    ****   if (Zeile >= 24 || SET_RESET > 1) { return; }
 389              		.loc 3 1011 3 view .LVU69
 390              		.loc 3 1011 6 is_stmt 0 view .LVU70
 391 0000 1728     		cmp	r0, #23
 392 0002 37D8     		bhi	.L40
1008:Src/main.c    **** 
 393              		.loc 3 1008 57 discriminator 2 view .LVU71
 394 0004 10B5     		push	{r4, lr}
 395              	.LCFI4:
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 4, -8
 398              		.cfi_offset 14, -4
 399 0006 82B0     		sub	sp, sp, #8
 400              	.LCFI5:
 401              		.cfi_def_cfa_offset 16
 402 0008 0C46     		mov	r4, r1
 403              		.loc 3 1011 19 discriminator 2 view .LVU72
 404 000a 0129     		cmp	r1, #1
 405 000c 01D9     		bls	.L43
 406              	.LVL15:
 407              	.L33:
1012:Src/main.c    **** 
1013:Src/main.c    ****   // Passendes Bit auf 1 setzen
1014:Src/main.c    ****   uint8_t array_pos = (Zeile / 8);
1015:Src/main.c    ****   uint8_t shift_data[3] = {0x00, 0x00, 0x00};
1016:Src/main.c    ****   uint8_t bit_pos = Zeile - (8 * array_pos);
1017:Src/main.c    ****   shift_data[2 - array_pos] = 0x01 << bit_pos;
1018:Src/main.c    **** 
1019:Src/main.c    ****   // Daten rausschieben
1020:Src/main.c    ****   HAL_SPI_Transmit(&hspi1, (uint8_t*)&shift_data, 3, 100);
1021:Src/main.c    **** 
1022:Src/main.c    ****   // SET oder RESET (UDN2981 oder ULN2803 aktivieren)
1023:Src/main.c    ****   if (SET_RESET) {
1024:Src/main.c    ****     HAL_GPIO_WritePin(Zeilen_SET_RESET_GPIO_Port, Zeilen_SET_RESET_Pin, 1);
1025:Src/main.c    ****   } else {
1026:Src/main.c    ****     HAL_GPIO_WritePin(Zeilen_SET_RESET_GPIO_Port, Zeilen_SET_RESET_Pin, 0);
1027:Src/main.c    ****   }
1028:Src/main.c    **** 
1029:Src/main.c    ****   // Latch Toggeln
1030:Src/main.c    ****   // (Anmerkung: OE wird extern Ã¼ber Timer gesteuert!)
1031:Src/main.c    ****   HAL_GPIO_WritePin(Zeilen_LATCH_GPIO_Port, Zeilen_LATCH_Pin, 1);
1032:Src/main.c    ****   HAL_GPIO_WritePin(Zeilen_LATCH_GPIO_Port, Zeilen_LATCH_Pin, 0);
1033:Src/main.c    **** }
 408              		.loc 3 1033 1 view .LVU73
 409 000e 02B0     		add	sp, sp, #8
 410              	.LCFI6:
 411              		.cfi_remember_state
ARM GAS  /tmp/ccDqKevX.s 			page 27


 412              		.cfi_def_cfa_offset 8
 413              		@ sp needed
 414 0010 10BD     		pop	{r4, pc}
 415              	.LVL16:
 416              	.L43:
 417              	.LCFI7:
 418              		.cfi_restore_state
1014:Src/main.c    ****   uint8_t shift_data[3] = {0x00, 0x00, 0x00};
 419              		.loc 3 1014 3 is_stmt 1 view .LVU74
1014:Src/main.c    ****   uint8_t shift_data[3] = {0x00, 0x00, 0x00};
 420              		.loc 3 1014 11 is_stmt 0 view .LVU75
 421 0012 C308     		lsrs	r3, r0, #3
 422              	.LVL17:
1015:Src/main.c    ****   uint8_t bit_pos = Zeile - (8 * array_pos);
 423              		.loc 3 1015 3 is_stmt 1 view .LVU76
1015:Src/main.c    ****   uint8_t bit_pos = Zeile - (8 * array_pos);
 424              		.loc 3 1015 11 is_stmt 0 view .LVU77
 425 0014 184A     		ldr	r2, .L44
 426 0016 1268     		ldr	r2, [r2]
 427 0018 ADF80420 		strh	r2, [sp, #4]	@ movhi
 428 001c 120C     		lsrs	r2, r2, #16
 429 001e 8DF80620 		strb	r2, [sp, #6]
1016:Src/main.c    ****   shift_data[2 - array_pos] = 0x01 << bit_pos;
 430              		.loc 3 1016 3 is_stmt 1 view .LVU78
 431              	.LVL18:
1017:Src/main.c    **** 
 432              		.loc 3 1017 3 view .LVU79
1017:Src/main.c    **** 
 433              		.loc 3 1017 36 is_stmt 0 view .LVU80
 434 0022 00F00700 		and	r0, r0, #7
 435              	.LVL19:
1017:Src/main.c    **** 
 436              		.loc 3 1017 36 view .LVU81
 437 0026 0122     		movs	r2, #1
 438 0028 02FA00F0 		lsl	r0, r2, r0
1017:Src/main.c    **** 
 439              		.loc 3 1017 16 view .LVU82
 440 002c C3F10203 		rsb	r3, r3, #2
 441              	.LVL20:
1017:Src/main.c    **** 
 442              		.loc 3 1017 29 view .LVU83
 443 0030 02AA     		add	r2, sp, #8
 444 0032 1344     		add	r3, r3, r2
 445 0034 03F8040C 		strb	r0, [r3, #-4]
1020:Src/main.c    **** 
 446              		.loc 3 1020 3 is_stmt 1 view .LVU84
 447 0038 6423     		movs	r3, #100
 448 003a 0322     		movs	r2, #3
 449 003c 01A9     		add	r1, sp, #4
 450              	.LVL21:
1020:Src/main.c    **** 
 451              		.loc 3 1020 3 is_stmt 0 view .LVU85
 452 003e 0F48     		ldr	r0, .L44+4
 453 0040 FFF7FEFF 		bl	HAL_SPI_Transmit
 454              	.LVL22:
1023:Src/main.c    ****     HAL_GPIO_WritePin(Zeilen_SET_RESET_GPIO_Port, Zeilen_SET_RESET_Pin, 1);
 455              		.loc 3 1023 3 is_stmt 1 view .LVU86
ARM GAS  /tmp/ccDqKevX.s 			page 28


1023:Src/main.c    ****     HAL_GPIO_WritePin(Zeilen_SET_RESET_GPIO_Port, Zeilen_SET_RESET_Pin, 1);
 456              		.loc 3 1023 6 is_stmt 0 view .LVU87
 457 0044 84B1     		cbz	r4, .L37
1024:Src/main.c    ****   } else {
 458              		.loc 3 1024 5 is_stmt 1 view .LVU88
 459 0046 0122     		movs	r2, #1
 460 0048 0821     		movs	r1, #8
 461 004a 0D48     		ldr	r0, .L44+8
 462 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 463              	.LVL23:
 464              	.L38:
1031:Src/main.c    ****   HAL_GPIO_WritePin(Zeilen_LATCH_GPIO_Port, Zeilen_LATCH_Pin, 0);
 465              		.loc 3 1031 3 view .LVU89
 466 0050 0B4C     		ldr	r4, .L44+8
 467 0052 0122     		movs	r2, #1
 468 0054 4021     		movs	r1, #64
 469 0056 2046     		mov	r0, r4
 470 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 471              	.LVL24:
1032:Src/main.c    **** }
 472              		.loc 3 1032 3 view .LVU90
 473 005c 0022     		movs	r2, #0
 474 005e 4021     		movs	r1, #64
 475 0060 2046     		mov	r0, r4
 476 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 477              	.LVL25:
 478 0066 D2E7     		b	.L33
 479              	.L37:
1026:Src/main.c    ****   }
 480              		.loc 3 1026 5 view .LVU91
 481 0068 0022     		movs	r2, #0
 482 006a 0821     		movs	r1, #8
 483 006c 0448     		ldr	r0, .L44+8
 484 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 485              	.LVL26:
 486 0072 EDE7     		b	.L38
 487              	.LVL27:
 488              	.L40:
 489              	.LCFI8:
 490              		.cfi_def_cfa_offset 0
 491              		.cfi_restore 4
 492              		.cfi_restore 14
1026:Src/main.c    ****   }
 493              		.loc 3 1026 5 is_stmt 0 view .LVU92
 494 0074 7047     		bx	lr
 495              	.L45:
 496 0076 00BF     		.align	2
 497              	.L44:
 498 0078 00000000 		.word	.LANCHOR10
 499 007c 00000000 		.word	hspi1
 500 0080 00080140 		.word	1073809408
 501              		.cfi_endproc
 502              	.LFE76:
 504              		.section	.text.Spalte_aktivieren,"ax",%progbits
 505              		.align	1
 506              		.global	Spalte_aktivieren
 507              		.syntax unified
ARM GAS  /tmp/ccDqKevX.s 			page 29


 508              		.thumb
 509              		.thumb_func
 510              		.fpu softvfp
 512              	Spalte_aktivieren:
 513              	.LVL28:
 514              	.LFB77:
1034:Src/main.c    **** 
1035:Src/main.c    **** 
1036:Src/main.c    **** 
1037:Src/main.c    **** //////////////////////////////////////////////////////
1038:Src/main.c    **** // Spalte aktivieren (Daten + Adressleitungen von FP2800)
1039:Src/main.c    **** //////////////////////////////////////////////////////
1040:Src/main.c    **** void Spalte_aktivieren(uint8_t Spalte, uint8_t SET_RESET) {
 515              		.loc 3 1040 59 is_stmt 1 view -0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
1041:Src/main.c    **** 
1042:Src/main.c    ****   // Variabelcheck
1043:Src/main.c    ****   if (Spalte >= 28) { return; }
 519              		.loc 3 1043 3 view .LVU94
 520              		.loc 3 1043 6 is_stmt 0 view .LVU95
 521 0000 1B28     		cmp	r0, #27
 522 0002 34D8     		bhi	.L52
1040:Src/main.c    **** 
 523              		.loc 3 1040 59 view .LVU96
 524 0004 10B5     		push	{r4, lr}
 525              	.LCFI9:
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 4, -8
 528              		.cfi_offset 14, -4
1044:Src/main.c    **** 
1045:Src/main.c    ****   // Spalte umwandeln nach FP2800 Wahrheitstabelle
1046:Src/main.c    ****   if (Paneltyp == 0) { Spalte = 27 - Spalte; }
 529              		.loc 3 1046 3 is_stmt 1 view .LVU97
 530              		.loc 3 1046 16 is_stmt 0 view .LVU98
 531 0006 1A4B     		ldr	r3, .L55
 532 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 533              		.loc 3 1046 6 view .LVU99
 534 000a 13B9     		cbnz	r3, .L48
 535              		.loc 3 1046 24 is_stmt 1 discriminator 1 view .LVU100
 536              		.loc 3 1046 31 is_stmt 0 discriminator 1 view .LVU101
 537 000c C0F11B00 		rsb	r0, r0, #27
 538              	.LVL29:
 539              		.loc 3 1046 31 discriminator 1 view .LVU102
 540 0010 C0B2     		uxtb	r0, r0
 541              	.LVL30:
 542              	.L48:
1047:Src/main.c    ****   uint8_t Spalte_FP2800 = Spalte + 1;
 543              		.loc 3 1047 3 is_stmt 1 view .LVU103
 544              		.loc 3 1047 11 is_stmt 0 view .LVU104
 545 0012 431C     		adds	r3, r0, #1
 546 0014 DBB2     		uxtb	r3, r3
 547              	.LVL31:
1048:Src/main.c    ****   if (Spalte > 6) {
 548              		.loc 3 1048 3 is_stmt 1 view .LVU105
 549              		.loc 3 1048 6 is_stmt 0 view .LVU106
ARM GAS  /tmp/ccDqKevX.s 			page 30


 550 0016 0628     		cmp	r0, #6
 551 0018 09D9     		bls	.L49
1049:Src/main.c    ****     Spalte_FP2800++;
 552              		.loc 3 1049 5 is_stmt 1 view .LVU107
 553              		.loc 3 1049 18 is_stmt 0 view .LVU108
 554 001a 831C     		adds	r3, r0, #2
 555              	.LVL32:
 556              		.loc 3 1049 18 view .LVU109
 557 001c DBB2     		uxtb	r3, r3
 558              	.LVL33:
1050:Src/main.c    ****     if (Spalte > 13) {
 559              		.loc 3 1050 5 is_stmt 1 view .LVU110
 560              		.loc 3 1050 8 is_stmt 0 view .LVU111
 561 001e 0D28     		cmp	r0, #13
 562 0020 05D9     		bls	.L49
1051:Src/main.c    ****       Spalte_FP2800++;
 563              		.loc 3 1051 7 is_stmt 1 view .LVU112
 564              		.loc 3 1051 20 is_stmt 0 view .LVU113
 565 0022 C31C     		adds	r3, r0, #3
 566              	.LVL34:
 567              		.loc 3 1051 20 view .LVU114
 568 0024 DBB2     		uxtb	r3, r3
 569              	.LVL35:
1052:Src/main.c    ****       if (Spalte > 20) {
 570              		.loc 3 1052 7 is_stmt 1 view .LVU115
 571              		.loc 3 1052 10 is_stmt 0 view .LVU116
 572 0026 1428     		cmp	r0, #20
 573 0028 01D9     		bls	.L49
1053:Src/main.c    ****         Spalte_FP2800++;
 574              		.loc 3 1053 9 is_stmt 1 view .LVU117
 575              		.loc 3 1053 22 is_stmt 0 view .LVU118
 576 002a 0430     		adds	r0, r0, #4
 577              	.LVL36:
 578              		.loc 3 1053 22 view .LVU119
 579 002c C3B2     		uxtb	r3, r0
 580              	.LVL37:
 581              	.L49:
1054:Src/main.c    ****       }
1055:Src/main.c    ****     }
1056:Src/main.c    ****   }
1057:Src/main.c    **** 
1058:Src/main.c    ****   // Adressbits in Zwischenspeicher schreiben
1059:Src/main.c    ****   hspi2_data[1] = hspi2_data[1] & 0xC0;
 582              		.loc 3 1059 3 is_stmt 1 view .LVU120
 583              		.loc 3 1059 29 is_stmt 0 view .LVU121
 584 002e 114C     		ldr	r4, .L55+4
 585 0030 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 586              		.loc 3 1059 33 view .LVU122
 587 0032 00F0C002 		and	r2, r0, #192
1060:Src/main.c    ****   Spalte_FP2800 = Spalte_FP2800 << 1;
 588              		.loc 3 1060 3 is_stmt 1 view .LVU123
 589              		.loc 3 1060 17 is_stmt 0 view .LVU124
 590 0036 5800     		lsls	r0, r3, #1
 591 0038 C0B2     		uxtb	r0, r0
 592              	.LVL38:
1061:Src/main.c    ****   hspi2_data[1] = hspi2_data[1] | Spalte_FP2800;
 593              		.loc 3 1061 3 is_stmt 1 view .LVU125
ARM GAS  /tmp/ccDqKevX.s 			page 31


 594              		.loc 3 1061 17 is_stmt 0 view .LVU126
 595 003a 1043     		orrs	r0, r0, r2
 596              	.LVL39:
 597              		.loc 3 1061 17 view .LVU127
 598 003c 6070     		strb	r0, [r4, #1]
1062:Src/main.c    **** 
1063:Src/main.c    ****   // Datenbit in Zwischenspeicher schreiben
1064:Src/main.c    ****   if (SET_RESET) {
 599              		.loc 3 1064 3 is_stmt 1 view .LVU128
 600              		.loc 3 1064 6 is_stmt 0 view .LVU129
 601 003e 11B1     		cbz	r1, .L50
1065:Src/main.c    ****     hspi2_data[1] = hspi2_data[1] | 0x01;
 602              		.loc 3 1065 5 is_stmt 1 view .LVU130
 603              		.loc 3 1065 19 is_stmt 0 view .LVU131
 604 0040 40F00100 		orr	r0, r0, #1
 605 0044 6070     		strb	r0, [r4, #1]
 606              	.L50:
1066:Src/main.c    ****   }
1067:Src/main.c    **** 
1068:Src/main.c    ****   // Daten rausschieben
1069:Src/main.c    ****   HAL_SPI_Transmit(&hspi2, (uint8_t*)&hspi2_data, 2, 100);  
 607              		.loc 3 1069 3 is_stmt 1 view .LVU132
 608 0046 6423     		movs	r3, #100
 609              	.LVL40:
 610              		.loc 3 1069 3 is_stmt 0 view .LVU133
 611 0048 0222     		movs	r2, #2
 612 004a 0A49     		ldr	r1, .L55+4
 613              	.LVL41:
 614              		.loc 3 1069 3 view .LVU134
 615 004c 0A48     		ldr	r0, .L55+8
 616 004e FFF7FEFF 		bl	HAL_SPI_Transmit
 617              	.LVL42:
1070:Src/main.c    **** 
1071:Src/main.c    ****   // Latch Toggeln
1072:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_LATCH_GPIO_Port, Spalten_LATCH_Pin, 1);
 618              		.loc 3 1072 3 is_stmt 1 view .LVU135
 619 0052 0A4C     		ldr	r4, .L55+12
 620 0054 0122     		movs	r2, #1
 621 0056 4FF48041 		mov	r1, #16384
 622 005a 2046     		mov	r0, r4
 623 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 624              	.LVL43:
1073:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_LATCH_GPIO_Port, Spalten_LATCH_Pin, 0);
 625              		.loc 3 1073 3 view .LVU136
 626 0060 0022     		movs	r2, #0
 627 0062 4FF48041 		mov	r1, #16384
 628 0066 2046     		mov	r0, r4
 629 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 630              	.LVL44:
1074:Src/main.c    **** }
 631              		.loc 3 1074 1 is_stmt 0 view .LVU137
 632 006c 10BD     		pop	{r4, pc}
 633              	.LVL45:
 634              	.L52:
 635              	.LCFI10:
 636              		.cfi_def_cfa_offset 0
 637              		.cfi_restore 4
ARM GAS  /tmp/ccDqKevX.s 			page 32


 638              		.cfi_restore 14
 639              		.loc 3 1074 1 view .LVU138
 640 006e 7047     		bx	lr
 641              	.L56:
 642              		.align	2
 643              	.L55:
 644 0070 00000000 		.word	Paneltyp
 645 0074 00000000 		.word	.LANCHOR11
 646 0078 00000000 		.word	hspi2
 647 007c 000C0140 		.word	1073810432
 648              		.cfi_endproc
 649              	.LFE77:
 651              		.section	.text.Modul_aktivieren,"ax",%progbits
 652              		.align	1
 653              		.global	Modul_aktivieren
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu softvfp
 659              	Modul_aktivieren:
 660              	.LVL46:
 661              	.LFB78:
1075:Src/main.c    **** 
1076:Src/main.c    **** 
1077:Src/main.c    **** 
1078:Src/main.c    **** //////////////////////////////////////////////////////
1079:Src/main.c    **** // Modul aktivieren (Enable von FP2800)
1080:Src/main.c    **** //////////////////////////////////////////////////////
1081:Src/main.c    **** void Modul_aktivieren(uint8_t Modul, uint8_t ON_OFF) {
 662              		.loc 3 1081 54 is_stmt 1 view -0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		.loc 3 1081 54 is_stmt 0 view .LVU140
 667 0000 38B5     		push	{r3, r4, r5, lr}
 668              	.LCFI11:
 669              		.cfi_def_cfa_offset 16
 670              		.cfi_offset 3, -16
 671              		.cfi_offset 4, -12
 672              		.cfi_offset 5, -8
 673              		.cfi_offset 14, -4
1082:Src/main.c    **** 
1083:Src/main.c    ****   // LAWO
1084:Src/main.c    ****   if (Paneltyp == 0) {
 674              		.loc 3 1084 3 is_stmt 1 view .LVU141
 675              		.loc 3 1084 16 is_stmt 0 view .LVU142
 676 0002 344B     		ldr	r3, .L70
 677 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 678              		.loc 3 1084 6 view .LVU143
 679 0006 DAB9     		cbnz	r2, .L58
1085:Src/main.c    **** 
1086:Src/main.c    ****     // Variabelcheck
1087:Src/main.c    ****     if (Modul >= 4) { return; }
 680              		.loc 3 1087 5 is_stmt 1 view .LVU144
 681              		.loc 3 1087 8 is_stmt 0 view .LVU145
 682 0008 0328     		cmp	r0, #3
 683 000a 4CD8     		bhi	.L57
ARM GAS  /tmp/ccDqKevX.s 			page 33


1088:Src/main.c    **** 
1089:Src/main.c    ****     // Alte Modulbits lÃ¶schen
1090:Src/main.c    ****     hspi2_data[1] = hspi2_data[1] & 0x3F;
 684              		.loc 3 1090 5 is_stmt 1 view .LVU146
 685              		.loc 3 1090 31 is_stmt 0 view .LVU147
 686 000c 324B     		ldr	r3, .L70+4
 687 000e 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 688              		.loc 3 1090 35 view .LVU148
 689 0010 05F03F05 		and	r5, r5, #63
 690              		.loc 3 1090 19 view .LVU149
 691 0014 5D70     		strb	r5, [r3, #1]
1091:Src/main.c    ****     hspi2_data[0] = hspi2_data[0] & 0xC0;
 692              		.loc 3 1091 5 is_stmt 1 view .LVU150
 693              		.loc 3 1091 31 is_stmt 0 view .LVU151
 694 0016 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 695              		.loc 3 1091 35 view .LVU152
 696 0018 04F0C004 		and	r4, r4, #192
 697              		.loc 3 1091 19 view .LVU153
 698 001c 1C70     		strb	r4, [r3]
1092:Src/main.c    **** 
1093:Src/main.c    ****     // Modulbit setzen
1094:Src/main.c    ****     if (Paneltyp == 0) { Modul = (Panelanzahl - 1) - Modul; }
 699              		.loc 3 1094 5 is_stmt 1 view .LVU154
 700              		.loc 3 1094 26 view .LVU155
 701              		.loc 3 1094 52 is_stmt 0 view .LVU156
 702 001e 2F4B     		ldr	r3, .L70+8
 703 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 704 0022 181A     		subs	r0, r3, r0
 705              	.LVL47:
 706              		.loc 3 1094 52 view .LVU157
 707 0024 C0B2     		uxtb	r0, r0
 708              		.loc 3 1094 32 view .LVU158
 709 0026 0138     		subs	r0, r0, #1
 710 0028 C0B2     		uxtb	r0, r0
 711              	.LVL48:
1095:Src/main.c    ****     if (ON_OFF) {
 712              		.loc 3 1095 5 is_stmt 1 view .LVU159
 713              		.loc 3 1095 8 is_stmt 0 view .LVU160
 714 002a 49B1     		cbz	r1, .L58
1096:Src/main.c    ****       switch (Modul) {
 715              		.loc 3 1096 7 is_stmt 1 view .LVU161
 716 002c 0328     		cmp	r0, #3
 717 002e 07D8     		bhi	.L58
 718 0030 DFE800F0 		tbb	[pc, r0]
 719              	.L61:
 720 0034 02       		.byte	(.L64-.L61)/2
 721 0035 44       		.byte	(.L63-.L61)/2
 722 0036 3F       		.byte	(.L62-.L61)/2
 723 0037 3A       		.byte	(.L60-.L61)/2
 724              		.p2align 1
 725              	.L64:
1097:Src/main.c    ****         case 0: hspi2_data[1] = hspi2_data[1] | 0x40; break;
 726              		.loc 3 1097 17 view .LVU162
 727              		.loc 3 1097 31 is_stmt 0 view .LVU163
 728 0038 45F04005 		orr	r5, r5, #64
 729 003c 264B     		ldr	r3, .L70+4
 730 003e 5D70     		strb	r5, [r3, #1]
ARM GAS  /tmp/ccDqKevX.s 			page 34


 731              		.loc 3 1097 55 is_stmt 1 view .LVU164
 732              	.L58:
1098:Src/main.c    ****         case 3: hspi2_data[1] = hspi2_data[1] | 0x80; break;
1099:Src/main.c    ****         case 2: hspi2_data[0] = hspi2_data[0] | 0x01; break;
1100:Src/main.c    ****         case 1: hspi2_data[0] = hspi2_data[0] | 0x02; break;
1101:Src/main.c    ****         default: break;
1102:Src/main.c    ****       }
1103:Src/main.c    ****     }
1104:Src/main.c    ****   }
1105:Src/main.c    **** 
1106:Src/main.c    ****   // BROSE
1107:Src/main.c    ****   if (Paneltyp == 1) {
 733              		.loc 3 1107 3 view .LVU165
 734              		.loc 3 1107 6 is_stmt 0 view .LVU166
 735 0040 012A     		cmp	r2, #1
 736 0042 1DD1     		bne	.L65
1108:Src/main.c    **** 
1109:Src/main.c    ****     // Variabelcheck
1110:Src/main.c    ****     if (Modul >= 8) { return; }
 737              		.loc 3 1110 5 is_stmt 1 view .LVU167
 738              		.loc 3 1110 8 is_stmt 0 view .LVU168
 739 0044 0728     		cmp	r0, #7
 740 0046 2ED8     		bhi	.L57
1111:Src/main.c    **** 
1112:Src/main.c    ****     // Alle Bits auf 1 setzten
1113:Src/main.c    ****     hspi2_data[1] = hspi2_data[1] | 0xC0;
 741              		.loc 3 1113 5 is_stmt 1 view .LVU169
 742              		.loc 3 1113 31 is_stmt 0 view .LVU170
 743 0048 234B     		ldr	r3, .L70+4
 744 004a 5C78     		ldrb	r4, [r3, #1]	@ zero_extendqisi2
 745              		.loc 3 1113 19 view .LVU171
 746 004c 44F0C004 		orr	r4, r4, #192
 747 0050 5C70     		strb	r4, [r3, #1]
1114:Src/main.c    ****     hspi2_data[0] = hspi2_data[0] | 0x3F;
 748              		.loc 3 1114 5 is_stmt 1 view .LVU172
 749              		.loc 3 1114 31 is_stmt 0 view .LVU173
 750 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 751              		.loc 3 1114 19 view .LVU174
 752 0054 42F03F02 		orr	r2, r2, #63
 753 0058 1A70     		strb	r2, [r3]
1115:Src/main.c    **** 
1116:Src/main.c    ****     // Modulbit lÃ¶schen
1117:Src/main.c    ****     if (ON_OFF) {
 754              		.loc 3 1117 5 is_stmt 1 view .LVU175
 755              		.loc 3 1117 8 is_stmt 0 view .LVU176
 756 005a 89B1     		cbz	r1, .L65
1118:Src/main.c    ****       if (Modul == 0) { hspi2_data[1] = hspi2_data[1] & 0xBF; }
 757              		.loc 3 1118 7 is_stmt 1 view .LVU177
 758              		.loc 3 1118 10 is_stmt 0 view .LVU178
 759 005c 10B9     		cbnz	r0, .L66
 760              		.loc 3 1118 25 is_stmt 1 discriminator 1 view .LVU179
 761              		.loc 3 1118 55 is_stmt 0 discriminator 1 view .LVU180
 762 005e 04F0BF04 		and	r4, r4, #191
 763              		.loc 3 1118 39 discriminator 1 view .LVU181
 764 0062 5C70     		strb	r4, [r3, #1]
 765              	.L66:
1119:Src/main.c    ****       if (Modul == 1) { hspi2_data[1] = hspi2_data[1] & 0x7F; }
ARM GAS  /tmp/ccDqKevX.s 			page 35


 766              		.loc 3 1119 7 is_stmt 1 view .LVU182
 767              		.loc 3 1119 10 is_stmt 0 view .LVU183
 768 0064 0128     		cmp	r0, #1
 769 0066 2ED0     		beq	.L69
 770              	.LVL49:
 771              	.L67:
1120:Src/main.c    ****       if (Modul >= 2) {
 772              		.loc 3 1120 7 is_stmt 1 view .LVU184
 773              		.loc 3 1120 10 is_stmt 0 view .LVU185
 774 0068 0128     		cmp	r0, #1
 775 006a 09D9     		bls	.L65
 776              	.LBB3:
1121:Src/main.c    ****         Modul = Modul - 2;
 777              		.loc 3 1121 9 is_stmt 1 view .LVU186
 778              		.loc 3 1121 15 is_stmt 0 view .LVU187
 779 006c 0238     		subs	r0, r0, #2
 780              	.LVL50:
 781              		.loc 3 1121 15 view .LVU188
 782 006e C0B2     		uxtb	r0, r0
 783              	.LVL51:
1122:Src/main.c    ****         uint8_t bit = 0x01 << Modul;
 784              		.loc 3 1122 9 is_stmt 1 view .LVU189
 785              		.loc 3 1122 28 is_stmt 0 view .LVU190
 786 0070 0123     		movs	r3, #1
 787 0072 03FA00F0 		lsl	r0, r3, r0
 788              	.LVL52:
 789              		.loc 3 1122 17 view .LVU191
 790 0076 C0B2     		uxtb	r0, r0
 791              	.LVL53:
1123:Src/main.c    ****         bit = ~bit;
 792              		.loc 3 1123 9 is_stmt 1 view .LVU192
1124:Src/main.c    ****         hspi2_data[0] = hspi2_data[0] & bit;
 793              		.loc 3 1124 9 view .LVU193
 794              		.loc 3 1124 23 is_stmt 0 view .LVU194
 795 0078 22EA0002 		bic	r2, r2, r0
 796 007c 164B     		ldr	r3, .L70+4
 797 007e 1A70     		strb	r2, [r3]
 798              	.LVL54:
 799              	.L65:
 800              		.loc 3 1124 23 view .LVU195
 801              	.LBE3:
1125:Src/main.c    ****       }
1126:Src/main.c    ****     }
1127:Src/main.c    ****   }
1128:Src/main.c    **** 
1129:Src/main.c    ****   // Daten rausschieben
1130:Src/main.c    ****   HAL_SPI_Transmit(&hspi2, (uint8_t*)&hspi2_data, 2, 100);  
 802              		.loc 3 1130 3 is_stmt 1 view .LVU196
 803 0080 6423     		movs	r3, #100
 804 0082 0222     		movs	r2, #2
 805 0084 1449     		ldr	r1, .L70+4
 806 0086 1648     		ldr	r0, .L70+12
 807 0088 FFF7FEFF 		bl	HAL_SPI_Transmit
 808              	.LVL55:
1131:Src/main.c    **** 
1132:Src/main.c    ****   // Latch Toggeln
1133:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_LATCH_GPIO_Port, Spalten_LATCH_Pin, 1);
ARM GAS  /tmp/ccDqKevX.s 			page 36


 809              		.loc 3 1133 3 view .LVU197
 810 008c 154C     		ldr	r4, .L70+16
 811 008e 0122     		movs	r2, #1
 812 0090 4FF48041 		mov	r1, #16384
 813 0094 2046     		mov	r0, r4
 814 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 815              	.LVL56:
1134:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_LATCH_GPIO_Port, Spalten_LATCH_Pin, 0);
 816              		.loc 3 1134 3 view .LVU198
 817 009a 0022     		movs	r2, #0
 818 009c 4FF48041 		mov	r1, #16384
 819 00a0 2046     		mov	r0, r4
 820 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 821              	.LVL57:
 822              	.L57:
1135:Src/main.c    **** }
 823              		.loc 3 1135 1 is_stmt 0 view .LVU199
 824 00a6 38BD     		pop	{r3, r4, r5, pc}
 825              	.LVL58:
 826              	.L60:
1098:Src/main.c    ****         case 2: hspi2_data[0] = hspi2_data[0] | 0x01; break;
 827              		.loc 3 1098 17 is_stmt 1 view .LVU200
1098:Src/main.c    ****         case 2: hspi2_data[0] = hspi2_data[0] | 0x01; break;
 828              		.loc 3 1098 31 is_stmt 0 view .LVU201
 829 00a8 65F07F05 		orn	r5, r5, #127
 830 00ac 0A4B     		ldr	r3, .L70+4
 831 00ae 5D70     		strb	r5, [r3, #1]
1098:Src/main.c    ****         case 2: hspi2_data[0] = hspi2_data[0] | 0x01; break;
 832              		.loc 3 1098 55 is_stmt 1 view .LVU202
1098:Src/main.c    ****         case 2: hspi2_data[0] = hspi2_data[0] | 0x01; break;
 833              		.loc 3 1098 9 is_stmt 0 view .LVU203
 834 00b0 C6E7     		b	.L58
 835              	.L62:
1099:Src/main.c    ****         case 1: hspi2_data[0] = hspi2_data[0] | 0x02; break;
 836              		.loc 3 1099 17 is_stmt 1 view .LVU204
1099:Src/main.c    ****         case 1: hspi2_data[0] = hspi2_data[0] | 0x02; break;
 837              		.loc 3 1099 31 is_stmt 0 view .LVU205
 838 00b2 44F00104 		orr	r4, r4, #1
 839 00b6 084B     		ldr	r3, .L70+4
 840 00b8 1C70     		strb	r4, [r3]
1099:Src/main.c    ****         case 1: hspi2_data[0] = hspi2_data[0] | 0x02; break;
 841              		.loc 3 1099 55 is_stmt 1 view .LVU206
1099:Src/main.c    ****         case 1: hspi2_data[0] = hspi2_data[0] | 0x02; break;
 842              		.loc 3 1099 9 is_stmt 0 view .LVU207
 843 00ba C1E7     		b	.L58
 844              	.L63:
1100:Src/main.c    ****         default: break;
 845              		.loc 3 1100 17 is_stmt 1 view .LVU208
1100:Src/main.c    ****         default: break;
 846              		.loc 3 1100 31 is_stmt 0 view .LVU209
 847 00bc 44F00204 		orr	r4, r4, #2
 848 00c0 054B     		ldr	r3, .L70+4
 849 00c2 1C70     		strb	r4, [r3]
1100:Src/main.c    ****         default: break;
 850              		.loc 3 1100 55 is_stmt 1 view .LVU210
1100:Src/main.c    ****         default: break;
 851              		.loc 3 1100 9 is_stmt 0 view .LVU211
ARM GAS  /tmp/ccDqKevX.s 			page 37


 852 00c4 BCE7     		b	.L58
 853              	.L69:
1119:Src/main.c    ****       if (Modul >= 2) {
 854              		.loc 3 1119 25 is_stmt 1 discriminator 1 view .LVU212
1119:Src/main.c    ****       if (Modul >= 2) {
 855              		.loc 3 1119 51 is_stmt 0 discriminator 1 view .LVU213
 856 00c6 0449     		ldr	r1, .L70+4
 857              	.LVL59:
1119:Src/main.c    ****       if (Modul >= 2) {
 858              		.loc 3 1119 51 discriminator 1 view .LVU214
 859 00c8 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
1119:Src/main.c    ****       if (Modul >= 2) {
 860              		.loc 3 1119 55 discriminator 1 view .LVU215
 861 00ca 03F07F03 		and	r3, r3, #127
1119:Src/main.c    ****       if (Modul >= 2) {
 862              		.loc 3 1119 39 discriminator 1 view .LVU216
 863 00ce 4B70     		strb	r3, [r1, #1]
 864 00d0 CAE7     		b	.L67
 865              	.L71:
 866 00d2 00BF     		.align	2
 867              	.L70:
 868 00d4 00000000 		.word	Paneltyp
 869 00d8 00000000 		.word	.LANCHOR11
 870 00dc 00000000 		.word	Panelanzahl
 871 00e0 00000000 		.word	hspi2
 872 00e4 000C0140 		.word	1073810432
 873              		.cfi_endproc
 874              	.LFE78:
 876              		.section	.text.generate_text,"ax",%progbits
 877              		.align	1
 878              		.global	generate_text
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu softvfp
 884              	generate_text:
 885              	.LVL60:
 886              	.LFB80:
1136:Src/main.c    **** 
1137:Src/main.c    **** 
1138:Src/main.c    **** 
1139:Src/main.c    **** //////////////////////////////////////////////////////
1140:Src/main.c    **** // Dots schreiben
1141:Src/main.c    **** //////////////////////////////////////////////////////
1142:Src/main.c    **** void Write_Dots(uint8_t from_x, uint8_t to_x, uint8_t from_y, uint8_t to_y) {
1143:Src/main.c    **** 
1144:Src/main.c    ****   // Status LED ein
1145:Src/main.c    ****   HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin,  1);
1146:Src/main.c    **** 
1147:Src/main.c    ****   // Parameter bestimmen
1148:Src/main.c    ****   uint8_t x_max = Panelanzahl * 28;
1149:Src/main.c    ****   uint8_t y_max = 0;
1150:Src/main.c    ****   if (Paneltyp == LAWO)  { y_max = 16; }  // Lawo
1151:Src/main.c    ****   if (Paneltyp == BROSE) { y_max = 19; }  // Brose
1152:Src/main.c    **** 
1153:Src/main.c    ****   // Variabelcheck
1154:Src/main.c    ****   if (from_x >= x_max || to_x >= x_max || from_x > to_x) { return; }
ARM GAS  /tmp/ccDqKevX.s 			page 38


1155:Src/main.c    ****   if (from_y >= y_max || to_y >= y_max || from_y > to_y) { return; }
1156:Src/main.c    **** 
1157:Src/main.c    ****   // Spalten und Zeilen abarbeiten
1158:Src/main.c    ****   for (uint8_t Spalte = from_x; Spalte <= to_x; Spalte++) {
1159:Src/main.c    ****     for (uint8_t Zeile = from_y; Zeile <= to_y; Zeile++) {
1160:Src/main.c    **** 
1161:Src/main.c    ****       // Bit maskieren
1162:Src/main.c    ****       uint8_t skip = 0;
1163:Src/main.c    ****       uint8_t dot = 0;
1164:Src/main.c    ****       uint32_t current_data = dots[Spalte] & (0x00000001 << Zeile);
1165:Src/main.c    ****       if (current_data) { dot = 1; }
1166:Src/main.c    **** 
1167:Src/main.c    ****       // Checken ob Dot Ã¼berhaupt erneut gekippt werden muss
1168:Src/main.c    ****       if (enable_fast_refresh) {
1169:Src/main.c    ****         skip |= bit_not_changed(Spalte, Zeile);
1170:Src/main.c    ****       }
1171:Src/main.c    ****       
1172:Src/main.c    ****       // Flip Vorgang ausfÃ¼hren
1173:Src/main.c    ****       if (!skip) {
1174:Src/main.c    **** 
1175:Src/main.c    ****         // Spalten + Zeilentreiber einstellen
1176:Src/main.c    ****         Spalte_aktivieren(Spalte - ((Spalte/28)*28), !dot);
1177:Src/main.c    ****         Zeile_aktivieren(Zeile, dot);
1178:Src/main.c    **** 
1179:Src/main.c    ****         // Spalten + Zeilentreiber einschalten
1180:Src/main.c    ****         Modul_aktivieren(Spalte/28, 1);
1181:Src/main.c    ****         HAL_GPIO_WritePin(Zeilen_OE_GPIO_Port, Zeilen_OE_Pin, 1);
1182:Src/main.c    **** 
1183:Src/main.c    ****         // 1ms Delay
1184:Src/main.c    ****         delay_us(1000);
1185:Src/main.c    **** 
1186:Src/main.c    ****         // Spalten + Zeilentreiber ausschalten
1187:Src/main.c    ****         HAL_GPIO_WritePin(Zeilen_OE_GPIO_Port, Zeilen_OE_Pin, 1);
1188:Src/main.c    ****         Modul_aktivieren(Spalte/28, 0);
1189:Src/main.c    ****       }
1190:Src/main.c    ****     }
1191:Src/main.c    ****   }
1192:Src/main.c    **** 
1193:Src/main.c    ****   // Status LED aus
1194:Src/main.c    ****   HAL_GPIO_WritePin(LED_Status_GPIO_Port, LED_Status_Pin,  0);
1195:Src/main.c    **** }
1196:Src/main.c    **** 
1197:Src/main.c    **** 
1198:Src/main.c    **** 
1199:Src/main.c    **** //////////////////////////////////////////////////////
1200:Src/main.c    **** // Text generieren (8px HÃ¶he)
1201:Src/main.c    **** //////////////////////////////////////////////////////
1202:Src/main.c    **** // text_selector:
1203:Src/main.c    **** // '0' = fnt8x8.h
1204:Src/main.c    **** // '1' = 6x8_vertikal_LSB_1.h
1205:Src/main.c    **** int generate_text(uint8_t* text_in, uint8_t* text_out, int start, int end, uint8_t text_selector) {
 887              		.loc 3 1205 99 is_stmt 1 view -0
 888              		.cfi_startproc
 889              		@ args = 4, pretend = 0, frame = 0
 890              		@ frame_needed = 0, uses_anonymous_args = 0
 891              		.loc 3 1205 99 is_stmt 0 view .LVU218
 892 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccDqKevX.s 			page 39


 893              	.LCFI12:
 894              		.cfi_def_cfa_offset 24
 895              		.cfi_offset 4, -24
 896              		.cfi_offset 5, -20
 897              		.cfi_offset 6, -16
 898              		.cfi_offset 7, -12
 899              		.cfi_offset 8, -8
 900              		.cfi_offset 14, -4
 901 0004 8646     		mov	lr, r0
 902 0006 9846     		mov	r8, r3
 903 0008 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 904              	.LVL61:
1206:Src/main.c    **** 
1207:Src/main.c    ****   // Zeichenanzahl Ã¼berprÃ¼fen
1208:Src/main.c    ****   if ((end-start) <= 0) { return 0; }
 905              		.loc 3 1208 3 is_stmt 1 view .LVU219
 906              		.loc 3 1208 11 is_stmt 0 view .LVU220
 907 000c A8EB0200 		sub	r0, r8, r2
 908              	.LVL62:
 909              		.loc 3 1208 6 view .LVU221
 910 0010 0028     		cmp	r0, #0
 911 0012 2ADD     		ble	.L80
1209:Src/main.c    **** 
1210:Src/main.c    ****   // Font Init
1211:Src/main.c    ****   int char_width = 0;
 912              		.loc 3 1211 3 is_stmt 1 view .LVU222
 913              	.LVL63:
1212:Src/main.c    ****   uint8_t* font_data = NULL;
 914              		.loc 3 1212 3 view .LVU223
1213:Src/main.c    ****   switch (text_selector) {
 915              		.loc 3 1213 3 view .LVU224
 916 0014 43B1     		cbz	r3, .L81
 917 0016 012B     		cmp	r3, #1
 918 0018 29D1     		bne	.L82
1214:Src/main.c    ****     case 0: char_width = 8;   font_data = (uint8_t*)font8x8int;             break;
1215:Src/main.c    ****     case 1: char_width = 6;   font_data = (uint8_t*)font_6x8vertikal_LSB;   break;
 919              		.loc 3 1215 41 is_stmt 0 view .LVU225
 920 001a 174B     		ldr	r3, .L89
 921              		.loc 3 1215 24 view .LVU226
 922 001c 0627     		movs	r7, #6
 923              	.L74:
 924              	.LVL64:
1216:Src/main.c    ****     default: return 0; break;
 925              		.loc 3 1216 24 is_stmt 1 view .LVU227
1217:Src/main.c    ****   }
1218:Src/main.c    ****   if (font_data == NULL) { return 0; }
 926              		.loc 3 1218 3 view .LVU228
 927              		.loc 3 1218 6 is_stmt 0 view .LVU229
 928 001e 4BB3     		cbz	r3, .L83
1219:Src/main.c    **** 
1220:Src/main.c    ****   // Text aus Zeichen zusammensetzen
1221:Src/main.c    ****   int pos = 0;
1222:Src/main.c    ****   int spaceing_counter = 0;
 929              		.loc 3 1222 7 view .LVU230
 930 0020 4FF0000C 		mov	ip, #0
1221:Src/main.c    ****   int spaceing_counter = 0;
 931              		.loc 3 1221 7 view .LVU231
ARM GAS  /tmp/ccDqKevX.s 			page 40


 932 0024 6046     		mov	r0, ip
 933 0026 1CE0     		b	.L75
 934              	.LVL65:
 935              	.L81:
1213:Src/main.c    ****     case 0: char_width = 8;   font_data = (uint8_t*)font8x8int;             break;
 936              		.loc 3 1213 3 view .LVU232
 937 0028 144B     		ldr	r3, .L89+4
 938 002a 0827     		movs	r7, #8
 939 002c F7E7     		b	.L74
 940              	.LVL66:
 941              	.L84:
 942              	.LBB4:
 943              	.LBB5:
 944              	.LBB6:
1223:Src/main.c    ****   for (int i=start; i<end; i++) {
1224:Src/main.c    **** 
1225:Src/main.c    ****     // Alle Spalten eines Zeichens rÃ¼berkopieren
1226:Src/main.c    ****     for (int spalte=0; spalte<char_width; spalte++) {
1227:Src/main.c    **** 
1228:Src/main.c    ****       // Vertikale Pixeldaten abfragen
1229:Src/main.c    ****       uint8_t vert_data = (font_data[(char_width * text_in[i]) + spalte]);
1230:Src/main.c    **** 
1231:Src/main.c    ****       // evtl. ZwischenrÃ¤ume auslassen
1232:Src/main.c    ****       if (vert_data == 0 && text_in[i] != 32) { spaceing_counter++; } else { spaceing_counter=0; }
 945              		.loc 3 1232 94 view .LVU233
 946 002e 4FF0000C 		mov	ip, #0
 947              	.LVL67:
 948              	.L76:
1233:Src/main.c    ****       if (spaceing_counter <= 1) {
1234:Src/main.c    **** 
1235:Src/main.c    ****         // Pixeldaten schreiben
1236:Src/main.c    ****         text_out[pos] = vert_data;
 949              		.loc 3 1236 9 is_stmt 1 view .LVU234
 950              		.loc 3 1236 23 is_stmt 0 view .LVU235
 951 0032 0D54     		strb	r5, [r1, r0]
1237:Src/main.c    ****         pos++;
 952              		.loc 3 1237 9 is_stmt 1 view .LVU236
 953              		.loc 3 1237 12 is_stmt 0 view .LVU237
 954 0034 0130     		adds	r0, r0, #1
 955              	.LVL68:
 956              	.L77:
 957              		.loc 3 1237 12 view .LVU238
 958              	.LBE6:
1226:Src/main.c    **** 
 959              		.loc 3 1226 43 is_stmt 1 discriminator 2 view .LVU239
1226:Src/main.c    **** 
 960              		.loc 3 1226 49 is_stmt 0 discriminator 2 view .LVU240
 961 0036 0134     		adds	r4, r4, #1
 962              	.LVL69:
 963              	.L79:
1226:Src/main.c    **** 
 964              		.loc 3 1226 24 is_stmt 1 discriminator 1 view .LVU241
1226:Src/main.c    **** 
 965              		.loc 3 1226 5 is_stmt 0 discriminator 1 view .LVU242
 966 0038 A742     		cmp	r7, r4
 967 003a 11DD     		ble	.L88
 968              	.LBB7:
ARM GAS  /tmp/ccDqKevX.s 			page 41


1229:Src/main.c    **** 
 969              		.loc 3 1229 7 is_stmt 1 view .LVU243
1229:Src/main.c    **** 
 970              		.loc 3 1229 59 is_stmt 0 view .LVU244
 971 003c 1EF80260 		ldrb	r6, [lr, r2]	@ zero_extendqisi2
1229:Src/main.c    **** 
 972              		.loc 3 1229 64 view .LVU245
 973 0040 07FB0645 		mla	r5, r7, r6, r4
1229:Src/main.c    **** 
 974              		.loc 3 1229 15 view .LVU246
 975 0044 5D5D     		ldrb	r5, [r3, r5]	@ zero_extendqisi2
 976              	.LVL70:
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 977              		.loc 3 1232 7 is_stmt 1 view .LVU247
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 978              		.loc 3 1232 10 is_stmt 0 view .LVU248
 979 0046 002D     		cmp	r5, #0
 980 0048 F1D1     		bne	.L84
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 981              		.loc 3 1232 26 discriminator 1 view .LVU249
 982 004a 202E     		cmp	r6, #32
 983 004c 05D0     		beq	.L85
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 984              		.loc 3 1232 49 is_stmt 1 discriminator 3 view .LVU250
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 985              		.loc 3 1232 65 is_stmt 0 discriminator 3 view .LVU251
 986 004e 0CF1010C 		add	ip, ip, #1
 987              	.LVL71:
1233:Src/main.c    **** 
 988              		.loc 3 1233 7 is_stmt 1 discriminator 3 view .LVU252
1233:Src/main.c    **** 
 989              		.loc 3 1233 10 is_stmt 0 discriminator 3 view .LVU253
 990 0052 BCF1010F 		cmp	ip, #1
 991 0056 EEDC     		bgt	.L77
 992 0058 EBE7     		b	.L76
 993              	.L85:
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 994              		.loc 3 1232 94 view .LVU254
 995 005a 4FF0000C 		mov	ip, #0
 996              	.LVL72:
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 997              		.loc 3 1232 94 view .LVU255
 998 005e E8E7     		b	.L76
 999              	.LVL73:
 1000              	.L88:
1232:Src/main.c    ****       if (spaceing_counter <= 1) {
 1001              		.loc 3 1232 94 view .LVU256
 1002              	.LBE7:
 1003              	.LBE5:
1223:Src/main.c    **** 
 1004              		.loc 3 1223 28 is_stmt 1 discriminator 2 view .LVU257
1223:Src/main.c    **** 
 1005              		.loc 3 1223 29 is_stmt 0 discriminator 2 view .LVU258
 1006 0060 0132     		adds	r2, r2, #1
 1007              	.LVL74:
 1008              	.L75:
1223:Src/main.c    **** 
ARM GAS  /tmp/ccDqKevX.s 			page 42


 1009              		.loc 3 1223 21 is_stmt 1 discriminator 1 view .LVU259
1223:Src/main.c    **** 
 1010              		.loc 3 1223 3 is_stmt 0 discriminator 1 view .LVU260
 1011 0062 4245     		cmp	r2, r8
 1012 0064 04DA     		bge	.L72
 1013              	.LBB8:
1226:Src/main.c    **** 
 1014              		.loc 3 1226 14 view .LVU261
 1015 0066 0024     		movs	r4, #0
 1016 0068 E6E7     		b	.L79
 1017              	.LVL75:
 1018              	.L80:
1226:Src/main.c    **** 
 1019              		.loc 3 1226 14 view .LVU262
 1020              	.LBE8:
 1021              	.LBE4:
1208:Src/main.c    **** 
 1022              		.loc 3 1208 34 view .LVU263
 1023 006a 0020     		movs	r0, #0
 1024 006c 00E0     		b	.L72
 1025              	.LVL76:
 1026              	.L82:
1213:Src/main.c    ****     case 0: char_width = 8;   font_data = (uint8_t*)font8x8int;             break;
 1027              		.loc 3 1213 3 view .LVU264
 1028 006e 0020     		movs	r0, #0
 1029              	.LVL77:
 1030              	.L72:
1238:Src/main.c    ****       }
1239:Src/main.c    ****     }
1240:Src/main.c    ****   }
1241:Src/main.c    **** 
1242:Src/main.c    ****   // Geschriebe LÃ¤nge zurÃ¼ckgeben
1243:Src/main.c    ****   return pos;
1244:Src/main.c    **** }
 1031              		.loc 3 1244 1 view .LVU265
 1032 0070 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1033              	.LVL78:
 1034              	.L83:
1218:Src/main.c    **** 
 1035              		.loc 3 1218 35 view .LVU266
 1036 0074 0020     		movs	r0, #0
 1037 0076 FBE7     		b	.L72
 1038              	.L90:
 1039              		.align	2
 1040              	.L89:
 1041 0078 00000000 		.word	.LANCHOR13
 1042 007c 00000000 		.word	.LANCHOR12
 1043              		.cfi_endproc
 1044              	.LFE80:
 1046              		.section	.rodata.Run_CMD.str1.4,"aMS",%progbits,1
 1047              		.align	2
 1048              	.LC1:
 1049 0000 2000     		.ascii	" \000"
 1050 0002 0000     		.align	2
 1051              	.LC2:
 1052 0004 5345545F 		.ascii	"SET_DOT\000"
 1052      444F5400 
ARM GAS  /tmp/ccDqKevX.s 			page 43


 1053              		.align	2
 1054              	.LC3:
 1055 000c 4C494748 		.ascii	"LIGHT\000"
 1055      5400
 1056 0012 0000     		.align	2
 1057              	.LC4:
 1058 0014 5345545F 		.ascii	"SET_ALL\000"
 1058      414C4C00 
 1059              		.align	2
 1060              	.LC5:
 1061 001c 5345545F 		.ascii	"SET_BUFF\000"
 1061      42554646 
 1061      00
 1062 0025 000000   		.align	2
 1063              	.LC6:
 1064 0028 52454652 		.ascii	"REFRESH\000"
 1064      45534800 
 1065              		.align	2
 1066              	.LC7:
 1067 0030 54455854 		.ascii	"TEXT_TOP\000"
 1067      5F544F50 
 1067      00
 1068 0039 000000   		.align	2
 1069              	.LC8:
 1070 003c 54455854 		.ascii	"TEXT_CENTER\000"
 1070      5F43454E 
 1070      54455200 
 1071              		.align	2
 1072              	.LC9:
 1073 0048 54455854 		.ascii	"TEXT_BOTTOM\000"
 1073      5F424F54 
 1073      544F4D00 
 1074              		.section	.text.Run_CMD,"ax",%progbits
 1075              		.align	1
 1076              		.global	Run_CMD
 1077              		.syntax unified
 1078              		.thumb
 1079              		.thumb_func
 1080              		.fpu softvfp
 1082              	Run_CMD:
 1083              	.LVL79:
 1084              	.LFB75:
 639:Src/main.c    **** 
 1085              		.loc 3 639 37 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 40
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 639:Src/main.c    **** 
 1089              		.loc 3 639 37 is_stmt 0 view .LVU268
 1090 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1091              	.LCFI13:
 1092              		.cfi_def_cfa_offset 24
 1093              		.cfi_offset 4, -24
 1094              		.cfi_offset 5, -20
 1095              		.cfi_offset 6, -16
 1096              		.cfi_offset 7, -12
 1097              		.cfi_offset 8, -8
ARM GAS  /tmp/ccDqKevX.s 			page 44


 1098              		.cfi_offset 14, -4
 1099 0004 8CB0     		sub	sp, sp, #48
 1100              	.LCFI14:
 1101              		.cfi_def_cfa_offset 72
 1102 0006 0446     		mov	r4, r0
 647:Src/main.c    ****   uint8_t quotation_marks_cnt = 0;
 1103              		.loc 3 647 3 is_stmt 1 view .LVU269
 647:Src/main.c    ****   uint8_t quotation_marks_cnt = 0;
 1104              		.loc 3 647 22 is_stmt 0 view .LVU270
 1105 0008 FFF7FEFF 		bl	strlen
 1106              	.LVL80:
 648:Src/main.c    ****   char* arg_text = NULL;
 1107              		.loc 3 648 3 is_stmt 1 view .LVU271
 649:Src/main.c    ****   for (uint32_t i=0; i<str_len; i++) {
 1108              		.loc 3 649 3 view .LVU272
 650:Src/main.c    ****     if (command[i] == '\"') {
 1109              		.loc 3 650 3 view .LVU273
 1110              	.LBB9:
 650:Src/main.c    ****     if (command[i] == '\"') {
 1111              		.loc 3 650 8 view .LVU274
 650:Src/main.c    ****     if (command[i] == '\"') {
 1112              		.loc 3 650 17 is_stmt 0 view .LVU275
 1113 000c 0023     		movs	r3, #0
 1114              	.LBE9:
 649:Src/main.c    ****   for (uint32_t i=0; i<str_len; i++) {
 1115              		.loc 3 649 9 view .LVU276
 1116 000e 1E46     		mov	r6, r3
 648:Src/main.c    ****   char* arg_text = NULL;
 1117              		.loc 3 648 11 view .LVU277
 1118 0010 1D46     		mov	r5, r3
 1119              	.LBB10:
 650:Src/main.c    ****     if (command[i] == '\"') {
 1120              		.loc 3 650 3 view .LVU278
 1121 0012 05E0     		b	.L92
 1122              	.LVL81:
 1123              	.L235:
 657:Src/main.c    ****       }
 1124              		.loc 3 657 9 is_stmt 1 view .LVU279
 657:Src/main.c    ****       }
 1125              		.loc 3 657 40 is_stmt 0 view .LVU280
 1126 0014 5E1C     		adds	r6, r3, #1
 1127              	.LVL82:
 657:Src/main.c    ****       }
 1128              		.loc 3 657 18 view .LVU281
 1129 0016 2644     		add	r6, r6, r4
 1130              	.LVL83:
 1131              	.L93:
 660:Src/main.c    ****       command[i] = '\0';
 1132              		.loc 3 660 5 is_stmt 1 view .LVU282
 660:Src/main.c    ****       command[i] = '\0';
 1133              		.loc 3 660 16 is_stmt 0 view .LVU283
 1134 0018 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 660:Src/main.c    ****       command[i] = '\0';
 1135              		.loc 3 660 8 view .LVU284
 1136 001a 0A29     		cmp	r1, #10
 1137 001c 0DD0     		beq	.L233
 1138              	.L94:
ARM GAS  /tmp/ccDqKevX.s 			page 45


 650:Src/main.c    ****     if (command[i] == '\"') {
 1139              		.loc 3 650 33 is_stmt 1 discriminator 2 view .LVU285
 650:Src/main.c    ****     if (command[i] == '\"') {
 1140              		.loc 3 650 34 is_stmt 0 discriminator 2 view .LVU286
 1141 001e 0133     		adds	r3, r3, #1
 1142              	.LVL84:
 1143              	.L92:
 650:Src/main.c    ****     if (command[i] == '\"') {
 1144              		.loc 3 650 22 is_stmt 1 discriminator 1 view .LVU287
 650:Src/main.c    ****     if (command[i] == '\"') {
 1145              		.loc 3 650 3 is_stmt 0 discriminator 1 view .LVU288
 1146 0020 8342     		cmp	r3, r0
 1147 0022 0DD2     		bcs	.L234
 651:Src/main.c    ****       command[i] = '\0';
 1148              		.loc 3 651 5 is_stmt 1 view .LVU289
 651:Src/main.c    ****       command[i] = '\0';
 1149              		.loc 3 651 16 is_stmt 0 view .LVU290
 1150 0024 E218     		adds	r2, r4, r3
 1151 0026 E15C     		ldrb	r1, [r4, r3]	@ zero_extendqisi2
 651:Src/main.c    ****       command[i] = '\0';
 1152              		.loc 3 651 8 view .LVU291
 1153 0028 2229     		cmp	r1, #34
 1154 002a F5D1     		bne	.L93
 652:Src/main.c    ****       quotation_marks_cnt++;
 1155              		.loc 3 652 7 is_stmt 1 view .LVU292
 652:Src/main.c    ****       quotation_marks_cnt++;
 1156              		.loc 3 652 18 is_stmt 0 view .LVU293
 1157 002c 0021     		movs	r1, #0
 1158 002e E154     		strb	r1, [r4, r3]
 653:Src/main.c    **** 
 1159              		.loc 3 653 7 is_stmt 1 view .LVU294
 653:Src/main.c    **** 
 1160              		.loc 3 653 26 is_stmt 0 view .LVU295
 1161 0030 0135     		adds	r5, r5, #1
 1162              	.LVL85:
 653:Src/main.c    **** 
 1163              		.loc 3 653 26 view .LVU296
 1164 0032 EDB2     		uxtb	r5, r5
 1165              	.LVL86:
 656:Src/main.c    ****         arg_text = (char*)(command + i + 1);
 1166              		.loc 3 656 7 is_stmt 1 view .LVU297
 656:Src/main.c    ****         arg_text = (char*)(command + i + 1);
 1167              		.loc 3 656 10 is_stmt 0 view .LVU298
 1168 0034 002E     		cmp	r6, #0
 1169 0036 EFD1     		bne	.L93
 1170 0038 ECE7     		b	.L235
 1171              	.L233:
 661:Src/main.c    ****     }
 1172              		.loc 3 661 7 is_stmt 1 view .LVU299
 661:Src/main.c    ****     }
 1173              		.loc 3 661 18 is_stmt 0 view .LVU300
 1174 003a 0021     		movs	r1, #0
 1175 003c 1170     		strb	r1, [r2]
 1176 003e EEE7     		b	.L94
 1177              	.L234:
 661:Src/main.c    ****     }
 1178              		.loc 3 661 18 view .LVU301
ARM GAS  /tmp/ccDqKevX.s 			page 46


 1179              	.LBE10:
 664:Src/main.c    ****     return -1; // invalid command
 1180              		.loc 3 664 3 is_stmt 1 view .LVU302
 664:Src/main.c    ****     return -1; // invalid command
 1181              		.loc 3 664 6 is_stmt 0 view .LVU303
 1182 0040 15B1     		cbz	r5, .L96
 664:Src/main.c    ****     return -1; // invalid command
 1183              		.loc 3 664 32 discriminator 1 view .LVU304
 1184 0042 022D     		cmp	r5, #2
 1185 0044 40F08483 		bne	.L185
 1186              	.L96:
 669:Src/main.c    ****   args[0] = strtok((char*)command, " ");
 1187              		.loc 3 669 3 is_stmt 1 view .LVU305
 670:Src/main.c    ****   int f = 0;
 1188              		.loc 3 670 3 view .LVU306
 670:Src/main.c    ****   int f = 0;
 1189              		.loc 3 670 13 is_stmt 0 view .LVU307
 1190 0048 AB49     		ldr	r1, .L258
 1191 004a 2046     		mov	r0, r4
 1192              	.LVL87:
 670:Src/main.c    ****   int f = 0;
 1193              		.loc 3 670 13 view .LVU308
 1194 004c FFF7FEFF 		bl	strtok
 1195              	.LVL88:
 670:Src/main.c    ****   int f = 0;
 1196              		.loc 3 670 11 view .LVU309
 1197 0050 0290     		str	r0, [sp, #8]
 671:Src/main.c    ****   while (args[f]) {
 1198              		.loc 3 671 3 is_stmt 1 view .LVU310
 1199              	.LVL89:
 672:Src/main.c    ****     f++;
 1200              		.loc 3 672 3 view .LVU311
 671:Src/main.c    ****   while (args[f]) {
 1201              		.loc 3 671 7 is_stmt 0 view .LVU312
 1202 0052 0024     		movs	r4, #0
 1203              	.LVL90:
 672:Src/main.c    ****     f++;
 1204              		.loc 3 672 9 view .LVU313
 1205 0054 08E0     		b	.L98
 1206              	.LVL91:
 1207              	.L236:
 675:Src/main.c    ****   }
 1208              		.loc 3 675 5 is_stmt 1 view .LVU314
 675:Src/main.c    ****   }
 1209              		.loc 3 675 15 is_stmt 0 view .LVU315
 1210 0056 A849     		ldr	r1, .L258
 1211 0058 0020     		movs	r0, #0
 1212 005a FFF7FEFF 		bl	strtok
 1213              	.LVL92:
 675:Src/main.c    ****   }
 1214              		.loc 3 675 13 view .LVU316
 1215 005e 0CAB     		add	r3, sp, #48
 1216 0060 03EB8403 		add	r3, r3, r4, lsl #2
 1217 0064 43F8280C 		str	r0, [r3, #-40]
 1218              	.LVL93:
 1219              	.L98:
 672:Src/main.c    ****     f++;
ARM GAS  /tmp/ccDqKevX.s 			page 47


 1220              		.loc 3 672 9 is_stmt 1 view .LVU317
 672:Src/main.c    ****     f++;
 1221              		.loc 3 672 14 is_stmt 0 view .LVU318
 1222 0068 0CAB     		add	r3, sp, #48
 1223 006a 03EB8403 		add	r3, r3, r4, lsl #2
 1224 006e 53F8283C 		ldr	r3, [r3, #-40]
 672:Src/main.c    ****     f++;
 1225              		.loc 3 672 9 view .LVU319
 1226 0072 13B1     		cbz	r3, .L99
 673:Src/main.c    ****     if (f >= max_cmd_args) { break; }
 1227              		.loc 3 673 5 is_stmt 1 view .LVU320
 673:Src/main.c    ****     if (f >= max_cmd_args) { break; }
 1228              		.loc 3 673 6 is_stmt 0 view .LVU321
 1229 0074 0134     		adds	r4, r4, #1
 1230              	.LVL94:
 674:Src/main.c    ****     args[f] = strtok(NULL, " ");
 1231              		.loc 3 674 5 is_stmt 1 view .LVU322
 674:Src/main.c    ****     args[f] = strtok(NULL, " ");
 1232              		.loc 3 674 8 is_stmt 0 view .LVU323
 1233 0076 092C     		cmp	r4, #9
 1234 0078 EDDD     		ble	.L236
 1235              	.L99:
 677:Src/main.c    ****     args[f] = NULL;
 1236              		.loc 3 677 3 is_stmt 1 view .LVU324
 677:Src/main.c    ****     args[f] = NULL;
 1237              		.loc 3 677 6 is_stmt 0 view .LVU325
 1238 007a 092C     		cmp	r4, #9
 1239 007c 00DC     		bgt	.L101
 677:Src/main.c    ****     args[f] = NULL;
 1240              		.loc 3 677 24 discriminator 1 view .LVU326
 1241 007e F6B1     		cbz	r6, .L237
 1242              	.L101:
 682:Src/main.c    ****     uint8_t pos_text = f;
 1243              		.loc 3 682 3 is_stmt 1 view .LVU327
 682:Src/main.c    ****     uint8_t pos_text = f;
 1244              		.loc 3 682 6 is_stmt 0 view .LVU328
 1245 0080 8EB1     		cbz	r6, .L102
 1246              	.LBB11:
 683:Src/main.c    ****     if (!(pos_text >= max_cmd_args)) {
 1247              		.loc 3 683 5 is_stmt 1 view .LVU329
 683:Src/main.c    ****     if (!(pos_text >= max_cmd_args)) {
 1248              		.loc 3 683 13 is_stmt 0 view .LVU330
 1249 0082 E3B2     		uxtb	r3, r4
 1250              	.LVL95:
 684:Src/main.c    ****       args[pos_text] = arg_text;
 1251              		.loc 3 684 5 is_stmt 1 view .LVU331
 684:Src/main.c    ****       args[pos_text] = arg_text;
 1252              		.loc 3 684 8 is_stmt 0 view .LVU332
 1253 0084 092B     		cmp	r3, #9
 1254 0086 04D8     		bhi	.L103
 685:Src/main.c    ****     }
 1255              		.loc 3 685 7 is_stmt 1 view .LVU333
 685:Src/main.c    ****     }
 1256              		.loc 3 685 22 is_stmt 0 view .LVU334
 1257 0088 0CA9     		add	r1, sp, #48
 1258 008a 01EB8302 		add	r2, r1, r3, lsl #2
 1259 008e 42F8286C 		str	r6, [r2, #-40]
ARM GAS  /tmp/ccDqKevX.s 			page 48


 1260              	.L103:
 687:Src/main.c    ****       args[pos_text+1] = NULL;
 1261              		.loc 3 687 5 is_stmt 1 view .LVU335
 687:Src/main.c    ****       args[pos_text+1] = NULL;
 1262              		.loc 3 687 8 is_stmt 0 view .LVU336
 1263 0092 082B     		cmp	r3, #8
 1264 0094 07D8     		bhi	.L102
 688:Src/main.c    ****     }
 1265              		.loc 3 688 7 is_stmt 1 view .LVU337
 688:Src/main.c    ****     }
 1266              		.loc 3 688 20 is_stmt 0 view .LVU338
 1267 0096 E3B2     		uxtb	r3, r4
 1268              	.LVL96:
 688:Src/main.c    ****     }
 1269              		.loc 3 688 20 view .LVU339
 1270 0098 0133     		adds	r3, r3, #1
 688:Src/main.c    ****     }
 1271              		.loc 3 688 24 view .LVU340
 1272 009a 0CAA     		add	r2, sp, #48
 1273 009c 02EB8303 		add	r3, r2, r3, lsl #2
 1274 00a0 0022     		movs	r2, #0
 1275 00a2 43F8282C 		str	r2, [r3, #-40]
 1276              	.LVL97:
 1277              	.L102:
 688:Src/main.c    ****     }
 1278              		.loc 3 688 24 view .LVU341
 1279              	.LBE11:
 693:Src/main.c    ****   while (args[arg_cnt] && arg_cnt < max_cmd_args) { arg_cnt++; }
 1280              		.loc 3 693 3 is_stmt 1 view .LVU342
 694:Src/main.c    ****   if (!arg_cnt) {
 1281              		.loc 3 694 3 view .LVU343
 693:Src/main.c    ****   while (args[arg_cnt] && arg_cnt < max_cmd_args) { arg_cnt++; }
 1282              		.loc 3 693 11 is_stmt 0 view .LVU344
 1283 00a6 0024     		movs	r4, #0
 1284              	.LVL98:
 1285              	.L104:
 694:Src/main.c    ****   if (!arg_cnt) {
 1286              		.loc 3 694 9 is_stmt 1 discriminator 1 view .LVU345
 694:Src/main.c    ****   if (!arg_cnt) {
 1287              		.loc 3 694 14 is_stmt 0 discriminator 1 view .LVU346
 1288 00a8 0CAB     		add	r3, sp, #48
 1289 00aa 03EB8403 		add	r3, r3, r4, lsl #2
 1290 00ae 53F8283C 		ldr	r3, [r3, #-40]
 694:Src/main.c    ****   if (!arg_cnt) {
 1291              		.loc 3 694 9 discriminator 1 view .LVU347
 1292 00b2 5BB1     		cbz	r3, .L105
 694:Src/main.c    ****   if (!arg_cnt) {
 1293              		.loc 3 694 24 discriminator 2 view .LVU348
 1294 00b4 092C     		cmp	r4, #9
 1295 00b6 09D8     		bhi	.L105
 694:Src/main.c    ****   if (!arg_cnt) {
 1296              		.loc 3 694 53 is_stmt 1 discriminator 3 view .LVU349
 694:Src/main.c    ****   if (!arg_cnt) {
 1297              		.loc 3 694 60 is_stmt 0 discriminator 3 view .LVU350
 1298 00b8 0134     		adds	r4, r4, #1
 1299              	.LVL99:
 694:Src/main.c    ****   if (!arg_cnt) {
ARM GAS  /tmp/ccDqKevX.s 			page 49


 1300              		.loc 3 694 60 discriminator 3 view .LVU351
 1301 00ba E4B2     		uxtb	r4, r4
 1302              	.LVL100:
 694:Src/main.c    ****   if (!arg_cnt) {
 1303              		.loc 3 694 60 discriminator 3 view .LVU352
 1304 00bc F4E7     		b	.L104
 1305              	.LVL101:
 1306              	.L237:
 678:Src/main.c    ****   }
 1307              		.loc 3 678 5 is_stmt 1 view .LVU353
 678:Src/main.c    ****   }
 1308              		.loc 3 678 13 is_stmt 0 view .LVU354
 1309 00be 0022     		movs	r2, #0
 1310 00c0 0CAB     		add	r3, sp, #48
 1311 00c2 03EB8403 		add	r3, r3, r4, lsl #2
 1312 00c6 43F8282C 		str	r2, [r3, #-40]
 1313 00ca D9E7     		b	.L101
 1314              	.LVL102:
 1315              	.L105:
 695:Src/main.c    ****     return -1;
 1316              		.loc 3 695 3 is_stmt 1 view .LVU355
 695:Src/main.c    ****     return -1;
 1317              		.loc 3 695 6 is_stmt 0 view .LVU356
 1318 00cc 002C     		cmp	r4, #0
 1319 00ce 00F04283 		beq	.L186
 700:Src/main.c    ****   if        (arg_cnt == 4 && !strcmp(args[0], "SET_DOT")) {   current_cmd = CMD_SET_DOT;
 1320              		.loc 3 700 3 is_stmt 1 view .LVU357
 1321              	.LVL103:
 701:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 1322              		.loc 3 701 3 view .LVU358
 701:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 1323              		.loc 3 701 13 is_stmt 0 view .LVU359
 1324 00d2 042C     		cmp	r4, #4
 1325 00d4 24D0     		beq	.L238
 1326              	.L107:
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 1327              		.loc 3 702 10 is_stmt 1 view .LVU360
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 1328              		.loc 3 702 13 is_stmt 0 view .LVU361
 1329 00d6 022C     		cmp	r4, #2
 1330 00d8 2AD0     		beq	.L239
 1331              	.L109:
 703:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_BUFF")) {  current_cmd = CMD_SET_BUFF;
 1332              		.loc 3 703 10 is_stmt 1 view .LVU362
 703:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_BUFF")) {  current_cmd = CMD_SET_BUFF;
 1333              		.loc 3 703 13 is_stmt 0 view .LVU363
 1334 00da 022C     		cmp	r4, #2
 1335 00dc 30D0     		beq	.L240
 1336              	.L110:
 704:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 1337              		.loc 3 704 10 is_stmt 1 view .LVU364
 704:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 1338              		.loc 3 704 13 is_stmt 0 view .LVU365
 1339 00de 022C     		cmp	r4, #2
 1340 00e0 35D0     		beq	.L241
 1341              	.L111:
 705:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
ARM GAS  /tmp/ccDqKevX.s 			page 50


 1342              		.loc 3 705 10 is_stmt 1 view .LVU366
 705:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
 1343              		.loc 3 705 13 is_stmt 0 view .LVU367
 1344 00e2 012C     		cmp	r4, #1
 1345 00e4 3BD0     		beq	.L242
 1346              	.L112:
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 1347              		.loc 3 706 10 is_stmt 1 view .LVU368
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 1348              		.loc 3 706 13 is_stmt 0 view .LVU369
 1349 00e6 042C     		cmp	r4, #4
 1350 00e8 41D0     		beq	.L243
 1351              	.L113:
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 1352              		.loc 3 707 10 is_stmt 1 view .LVU370
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 1353              		.loc 3 707 13 is_stmt 0 view .LVU371
 1354 00ea 042C     		cmp	r4, #4
 1355 00ec 47D0     		beq	.L244
 1356              	.L114:
 708:Src/main.c    ****   }
 1357              		.loc 3 708 10 is_stmt 1 view .LVU372
 708:Src/main.c    ****   }
 1358              		.loc 3 708 13 is_stmt 0 view .LVU373
 1359 00ee 042C     		cmp	r4, #4
 1360 00f0 40F03483 		bne	.L193
 708:Src/main.c    ****   }
 1361              		.loc 3 708 31 discriminator 1 view .LVU374
 1362 00f4 8149     		ldr	r1, .L258+4
 1363 00f6 0298     		ldr	r0, [sp, #8]
 1364 00f8 FFF7FEFF 		bl	strcmp
 1365              	.LVL104:
 708:Src/main.c    ****   }
 1366              		.loc 3 708 27 discriminator 1 view .LVU375
 1367 00fc 0028     		cmp	r0, #0
 1368 00fe 40F03083 		bne	.L194
 708:Src/main.c    ****   }
 1369              		.loc 3 708 79 view .LVU376
 1370 0102 0624     		movs	r4, #6
 1371              	.LVL105:
 1372              	.L108:
 719:Src/main.c    **** 
 1373              		.loc 3 719 3 is_stmt 1 view .LVU377
 1374 0104 013C     		subs	r4, r4, #1
 1375 0106 072C     		cmp	r4, #7
 1376 0108 00F22E83 		bhi	.L195
 1377 010c DFE814F0 		tbh	[pc, r4, lsl #1]
 1378              	.L116:
 1379 0110 3F00     		.2byte	(.L123-.L116)/2
 1380 0112 5100     		.2byte	(.L122-.L116)/2
 1381 0114 5F00     		.2byte	(.L121-.L116)/2
 1382 0116 B300     		.2byte	(.L120-.L116)/2
 1383 0118 8100     		.2byte	(.L119-.L116)/2
 1384 011a 5102     		.2byte	(.L118-.L116)/2
 1385 011c 9601     		.2byte	(.L117-.L116)/2
 1386 011e BB00     		.2byte	(.L115-.L116)/2
 1387              	.LVL106:
ARM GAS  /tmp/ccDqKevX.s 			page 51


 1388              		.p2align 1
 1389              	.L238:
 701:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 1390              		.loc 3 701 31 is_stmt 0 discriminator 1 view .LVU378
 1391 0120 7749     		ldr	r1, .L258+8
 1392 0122 0298     		ldr	r0, [sp, #8]
 1393 0124 FFF7FEFF 		bl	strcmp
 1394              	.LVL107:
 701:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 1395              		.loc 3 701 27 discriminator 1 view .LVU379
 1396 0128 0028     		cmp	r0, #0
 1397 012a D4D1     		bne	.L107
 701:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 1398              		.loc 3 701 75 view .LVU380
 1399 012c 0524     		movs	r4, #5
 1400              	.LVL108:
 701:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "LIGHT")) {     current_cmd = CMD_LIGHT; 
 1401              		.loc 3 701 75 view .LVU381
 1402 012e E9E7     		b	.L108
 1403              	.LVL109:
 1404              	.L239:
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 1405              		.loc 3 702 31 discriminator 1 view .LVU382
 1406 0130 7449     		ldr	r1, .L258+12
 1407 0132 0298     		ldr	r0, [sp, #8]
 1408 0134 FFF7FEFF 		bl	strcmp
 1409              	.LVL110:
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 1410              		.loc 3 702 27 discriminator 1 view .LVU383
 1411 0138 0028     		cmp	r0, #0
 1412 013a CED1     		bne	.L109
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 1413              		.loc 3 702 75 view .LVU384
 1414 013c 0124     		movs	r4, #1
 1415              	.LVL111:
 702:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_ALL")) {   current_cmd = CMD_SET_ALL;
 1416              		.loc 3 702 75 view .LVU385
 1417 013e E1E7     		b	.L108
 1418              	.LVL112:
 1419              	.L240:
 703:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_BUFF")) {  current_cmd = CMD_SET_BUFF;
 1420              		.loc 3 703 31 discriminator 1 view .LVU386
 1421 0140 7149     		ldr	r1, .L258+16
 1422 0142 0298     		ldr	r0, [sp, #8]
 1423 0144 FFF7FEFF 		bl	strcmp
 1424              	.LVL113:
 703:Src/main.c    ****   } else if (arg_cnt == 2 && !strcmp(args[0], "SET_BUFF")) {  current_cmd = CMD_SET_BUFF;
 1425              		.loc 3 703 27 discriminator 1 view .LVU387
 1426 0148 0028     		cmp	r0, #0
 1427 014a DBD0     		beq	.L108
 1428 014c C7E7     		b	.L110
 1429              	.L241:
 704:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 1430              		.loc 3 704 31 discriminator 1 view .LVU388
 1431 014e 6F49     		ldr	r1, .L258+20
 1432 0150 0298     		ldr	r0, [sp, #8]
 1433 0152 FFF7FEFF 		bl	strcmp
ARM GAS  /tmp/ccDqKevX.s 			page 52


 1434              	.LVL114:
 704:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 1435              		.loc 3 704 27 discriminator 1 view .LVU389
 1436 0156 0028     		cmp	r0, #0
 1437 0158 C3D1     		bne	.L111
 704:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 1438              		.loc 3 704 75 view .LVU390
 1439 015a 0324     		movs	r4, #3
 1440              	.LVL115:
 704:Src/main.c    ****   } else if (arg_cnt == 1 && !strcmp(args[0], "REFRESH")) {   current_cmd = CMD_REFRESH; 
 1441              		.loc 3 704 75 view .LVU391
 1442 015c D2E7     		b	.L108
 1443              	.LVL116:
 1444              	.L242:
 705:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
 1445              		.loc 3 705 31 discriminator 1 view .LVU392
 1446 015e 6C49     		ldr	r1, .L258+24
 1447 0160 0298     		ldr	r0, [sp, #8]
 1448 0162 FFF7FEFF 		bl	strcmp
 1449              	.LVL117:
 705:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
 1450              		.loc 3 705 27 discriminator 1 view .LVU393
 1451 0166 0028     		cmp	r0, #0
 1452 0168 BDD1     		bne	.L112
 705:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
 1453              		.loc 3 705 75 view .LVU394
 1454 016a 0424     		movs	r4, #4
 1455              	.LVL118:
 705:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_TOP")) {  current_cmd = CMD_TEXT_TOP; 
 1456              		.loc 3 705 75 view .LVU395
 1457 016c CAE7     		b	.L108
 1458              	.LVL119:
 1459              	.L243:
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 1460              		.loc 3 706 31 discriminator 1 view .LVU396
 1461 016e 6949     		ldr	r1, .L258+28
 1462 0170 0298     		ldr	r0, [sp, #8]
 1463 0172 FFF7FEFF 		bl	strcmp
 1464              	.LVL120:
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 1465              		.loc 3 706 27 discriminator 1 view .LVU397
 1466 0176 0028     		cmp	r0, #0
 1467 0178 B7D1     		bne	.L113
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 1468              		.loc 3 706 75 view .LVU398
 1469 017a 0724     		movs	r4, #7
 1470              	.LVL121:
 706:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_CENTER")) {   current_cmd = CMD_TEXT_CENTER;
 1471              		.loc 3 706 75 view .LVU399
 1472 017c C2E7     		b	.L108
 1473              	.LVL122:
 1474              	.L244:
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 1475              		.loc 3 707 31 discriminator 1 view .LVU400
 1476 017e 6649     		ldr	r1, .L258+32
 1477 0180 0298     		ldr	r0, [sp, #8]
 1478 0182 FFF7FEFF 		bl	strcmp
ARM GAS  /tmp/ccDqKevX.s 			page 53


 1479              	.LVL123:
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 1480              		.loc 3 707 27 discriminator 1 view .LVU401
 1481 0186 0028     		cmp	r0, #0
 1482 0188 B1D1     		bne	.L114
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 1483              		.loc 3 707 79 view .LVU402
 1484 018a 0824     		movs	r4, #8
 1485              	.LVL124:
 707:Src/main.c    ****   } else if (arg_cnt == 4 && !strcmp(args[0], "TEXT_BOTTOM")) {   current_cmd = CMD_TEXT_BOTTOM;
 1486              		.loc 3 707 79 view .LVU403
 1487 018c BAE7     		b	.L108
 1488              	.LVL125:
 1489              	.L123:
 724:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 1);
 1490              		.loc 3 724 7 is_stmt 1 view .LVU404
 724:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 1);
 1491              		.loc 3 724 11 is_stmt 0 view .LVU405
 1492 018e 0398     		ldr	r0, [sp, #12]
 1493 0190 FFF7FEFF 		bl	atoi
 1494              	.LVL126:
 724:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 1);
 1495              		.loc 3 724 10 view .LVU406
 1496 0194 0446     		mov	r4, r0
 1497 0196 30B1     		cbz	r0, .L124
 725:Src/main.c    ****       } else {
 1498              		.loc 3 725 9 is_stmt 1 view .LVU407
 1499 0198 0122     		movs	r2, #1
 1500 019a 0421     		movs	r1, #4
 1501 019c 5F48     		ldr	r0, .L258+36
 1502 019e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1503              	.LVL127:
1000:Src/main.c    **** }
 1504              		.loc 3 1000 10 is_stmt 0 view .LVU408
 1505 01a2 0024     		movs	r4, #0
 1506 01a4 6BE0     		b	.L91
 1507              	.L124:
 727:Src/main.c    ****       }
 1508              		.loc 3 727 9 is_stmt 1 view .LVU409
 1509 01a6 0022     		movs	r2, #0
 1510 01a8 0421     		movs	r1, #4
 1511 01aa 5C48     		ldr	r0, .L258+36
 1512 01ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 1513              	.LVL128:
 1514 01b0 65E0     		b	.L91
 1515              	.L122:
 734:Src/main.c    ****         start_yellow = 1;
 1516              		.loc 3 734 7 view .LVU410
 734:Src/main.c    ****         start_yellow = 1;
 1517              		.loc 3 734 11 is_stmt 0 view .LVU411
 1518 01b2 0398     		ldr	r0, [sp, #12]
 1519 01b4 FFF7FEFF 		bl	atoi
 1520              	.LVL129:
 734:Src/main.c    ****         start_yellow = 1;
 1521              		.loc 3 734 10 view .LVU412
 1522 01b8 0446     		mov	r4, r0
 1523 01ba 20B1     		cbz	r0, .L125
ARM GAS  /tmp/ccDqKevX.s 			page 54


 735:Src/main.c    ****       } else {
 1524              		.loc 3 735 9 is_stmt 1 view .LVU413
 735:Src/main.c    ****       } else {
 1525              		.loc 3 735 22 is_stmt 0 view .LVU414
 1526 01bc 584B     		ldr	r3, .L258+40
 1527 01be 0122     		movs	r2, #1
 1528 01c0 1A70     		strb	r2, [r3]
1000:Src/main.c    **** }
 1529              		.loc 3 1000 10 view .LVU415
 1530 01c2 0024     		movs	r4, #0
 1531 01c4 5BE0     		b	.L91
 1532              	.L125:
 737:Src/main.c    ****       }
 1533              		.loc 3 737 9 is_stmt 1 view .LVU416
 737:Src/main.c    ****       }
 1534              		.loc 3 737 21 is_stmt 0 view .LVU417
 1535 01c6 574B     		ldr	r3, .L258+44
 1536 01c8 0122     		movs	r2, #1
 1537 01ca 1A70     		strb	r2, [r3]
 1538 01cc 57E0     		b	.L91
 1539              	.L121:
 744:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++)
 1540              		.loc 3 744 7 is_stmt 1 view .LVU418
 744:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++)
 1541              		.loc 3 744 11 is_stmt 0 view .LVU419
 1542 01ce 0398     		ldr	r0, [sp, #12]
 1543 01d0 FFF7FEFF 		bl	atoi
 1544              	.LVL130:
 744:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++)
 1545              		.loc 3 744 10 view .LVU420
 1546 01d4 0446     		mov	r4, r0
 1547 01d6 88B9     		cbnz	r0, .L196
 1548              	.LBB12:
 748:Src/main.c    ****           dots[i] |= 0;
 1549              		.loc 3 748 18 view .LVU421
 1550 01d8 0246     		mov	r2, r0
 1551 01da 12E0     		b	.L127
 1552              	.LVL131:
 1553              	.L128:
 748:Src/main.c    ****           dots[i] |= 0;
 1554              		.loc 3 748 18 view .LVU422
 1555              	.LBE12:
 1556              	.LBB13:
 746:Src/main.c    ****       } else {
 1557              		.loc 3 746 11 is_stmt 1 discriminator 3 view .LVU423
 746:Src/main.c    ****       } else {
 1558              		.loc 3 746 19 is_stmt 0 discriminator 3 view .LVU424
 1559 01dc 524B     		ldr	r3, .L258+48
 1560 01de 1B68     		ldr	r3, [r3]
 1561 01e0 4FF0FF31 		mov	r1, #-1
 1562 01e4 43F82210 		str	r1, [r3, r2, lsl #2]
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1563              		.loc 3 745 45 is_stmt 1 discriminator 3 view .LVU425
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1564              		.loc 3 745 46 is_stmt 0 discriminator 3 view .LVU426
 1565 01e8 0132     		adds	r2, r2, #1
 1566              	.LVL132:
ARM GAS  /tmp/ccDqKevX.s 			page 55


 1567              	.L126:
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1568              		.loc 3 745 23 is_stmt 1 discriminator 1 view .LVU427
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1569              		.loc 3 745 29 is_stmt 0 discriminator 1 view .LVU428
 1570 01ea 504B     		ldr	r3, .L258+52
 1571 01ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1572 01ee C3EBC303 		rsb	r3, r3, r3, lsl #3
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1573              		.loc 3 745 9 discriminator 1 view .LVU429
 1574 01f2 B2EB830F 		cmp	r2, r3, lsl #2
 1575 01f6 F1DB     		blt	.L128
 1576              	.LBE13:
1000:Src/main.c    **** }
 1577              		.loc 3 1000 10 view .LVU430
 1578 01f8 0024     		movs	r4, #0
 1579 01fa 40E0     		b	.L91
 1580              	.LVL133:
 1581              	.L196:
 1582              	.LBB14:
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1583              		.loc 3 745 18 view .LVU431
 1584 01fc 0022     		movs	r2, #0
 1585 01fe F4E7     		b	.L126
 1586              	.LVL134:
 1587              	.L129:
 745:Src/main.c    ****           dots[i] |= 0xFFFFFFFF;
 1588              		.loc 3 745 18 view .LVU432
 1589              	.LBE14:
 1590              	.LBB15:
 749:Src/main.c    ****       }
 1591              		.loc 3 749 11 is_stmt 1 discriminator 3 view .LVU433
 748:Src/main.c    ****           dots[i] |= 0;
 1592              		.loc 3 748 45 discriminator 3 view .LVU434
 748:Src/main.c    ****           dots[i] |= 0;
 1593              		.loc 3 748 46 is_stmt 0 discriminator 3 view .LVU435
 1594 0200 0132     		adds	r2, r2, #1
 1595              	.LVL135:
 1596              	.L127:
 748:Src/main.c    ****           dots[i] |= 0;
 1597              		.loc 3 748 23 is_stmt 1 discriminator 1 view .LVU436
 748:Src/main.c    ****           dots[i] |= 0;
 1598              		.loc 3 748 29 is_stmt 0 discriminator 1 view .LVU437
 1599 0202 4A4B     		ldr	r3, .L258+52
 1600 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1601 0206 C3EBC303 		rsb	r3, r3, r3, lsl #3
 748:Src/main.c    ****           dots[i] |= 0;
 1602              		.loc 3 748 9 discriminator 1 view .LVU438
 1603 020a B2EB830F 		cmp	r2, r3, lsl #2
 1604 020e F7DB     		blt	.L129
 1605 0210 35E0     		b	.L91
 1606              	.LVL136:
 1607              	.L119:
 748:Src/main.c    ****           dots[i] |= 0;
 1608              		.loc 3 748 9 discriminator 1 view .LVU439
 1609              	.LBE15:
 1610              	.LBB16:
ARM GAS  /tmp/ccDqKevX.s 			page 56


 756:Src/main.c    ****       uint32_t y = atoi(args[2]);
 1611              		.loc 3 756 7 is_stmt 1 view .LVU440
 756:Src/main.c    ****       uint32_t y = atoi(args[2]);
 1612              		.loc 3 756 20 is_stmt 0 view .LVU441
 1613 0212 0398     		ldr	r0, [sp, #12]
 1614 0214 FFF7FEFF 		bl	atoi
 1615              	.LVL137:
 1616 0218 0546     		mov	r5, r0
 1617              	.LVL138:
 757:Src/main.c    ****       if (x > (Panelanzahl * 28) - 1) { break; }
 1618              		.loc 3 757 7 is_stmt 1 view .LVU442
 757:Src/main.c    ****       if (x > (Panelanzahl * 28) - 1) { break; }
 1619              		.loc 3 757 20 is_stmt 0 view .LVU443
 1620 021a 0498     		ldr	r0, [sp, #16]
 1621              	.LVL139:
 757:Src/main.c    ****       if (x > (Panelanzahl * 28) - 1) { break; }
 1622              		.loc 3 757 20 view .LVU444
 1623 021c FFF7FEFF 		bl	atoi
 1624              	.LVL140:
 1625 0220 0646     		mov	r6, r0
 1626              	.LVL141:
 758:Src/main.c    ****       if (y > (20 - 1)) { break; }
 1627              		.loc 3 758 7 is_stmt 1 view .LVU445
 758:Src/main.c    ****       if (y > (20 - 1)) { break; }
 1628              		.loc 3 758 28 is_stmt 0 view .LVU446
 1629 0222 424B     		ldr	r3, .L258+52
 1630 0224 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1631 0226 C3EBC303 		rsb	r3, r3, r3, lsl #3
 1632 022a 9B00     		lsls	r3, r3, #2
 758:Src/main.c    ****       if (y > (20 - 1)) { break; }
 1633              		.loc 3 758 34 view .LVU447
 1634 022c 013B     		subs	r3, r3, #1
 758:Src/main.c    ****       if (y > (20 - 1)) { break; }
 1635              		.loc 3 758 10 view .LVU448
 1636 022e AB42     		cmp	r3, r5
 1637 0230 C0F09D82 		bcc	.L197
 759:Src/main.c    ****       if (atoi(args[3])) {
 1638              		.loc 3 759 7 is_stmt 1 view .LVU449
 759:Src/main.c    ****       if (atoi(args[3])) {
 1639              		.loc 3 759 10 is_stmt 0 view .LVU450
 1640 0234 1328     		cmp	r0, #19
 1641 0236 01D9     		bls	.L245
 1642              	.LBE16:
1000:Src/main.c    **** }
 1643              		.loc 3 1000 10 view .LVU451
 1644 0238 0024     		movs	r4, #0
 1645 023a 20E0     		b	.L91
 1646              	.L245:
 1647              	.LBB17:
 760:Src/main.c    **** 
 1648              		.loc 3 760 7 is_stmt 1 view .LVU452
 760:Src/main.c    **** 
 1649              		.loc 3 760 11 is_stmt 0 view .LVU453
 1650 023c 0598     		ldr	r0, [sp, #20]
 1651              	.LVL142:
 760:Src/main.c    **** 
 1652              		.loc 3 760 11 view .LVU454
ARM GAS  /tmp/ccDqKevX.s 			page 57


 1653 023e FFF7FEFF 		bl	atoi
 1654              	.LVL143:
 760:Src/main.c    **** 
 1655              		.loc 3 760 10 view .LVU455
 1656 0242 0446     		mov	r4, r0
 1657 0244 58B1     		cbz	r0, .L130
 763:Src/main.c    ****       
 1658              		.loc 3 763 9 is_stmt 1 view .LVU456
 763:Src/main.c    ****       
 1659              		.loc 3 763 17 is_stmt 0 view .LVU457
 1660 0246 384B     		ldr	r3, .L258+48
 1661 0248 1A68     		ldr	r2, [r3]
 763:Src/main.c    ****       
 1662              		.loc 3 763 42 view .LVU458
 1663 024a 0123     		movs	r3, #1
 1664 024c 03FA06F0 		lsl	r0, r3, r6
 763:Src/main.c    ****       
 1665              		.loc 3 763 17 view .LVU459
 1666 0250 52F82530 		ldr	r3, [r2, r5, lsl #2]
 1667 0254 0343     		orrs	r3, r3, r0
 1668 0256 42F82530 		str	r3, [r2, r5, lsl #2]
 1669              	.LBE17:
1000:Src/main.c    **** }
 1670              		.loc 3 1000 10 view .LVU460
 1671 025a 0024     		movs	r4, #0
 1672              	.LBB18:
 1673 025c 0FE0     		b	.L91
 1674              	.L130:
 768:Src/main.c    ****       }
 1675              		.loc 3 768 9 is_stmt 1 view .LVU461
 768:Src/main.c    ****       }
 1676              		.loc 3 768 17 is_stmt 0 view .LVU462
 1677 025e 324B     		ldr	r3, .L258+48
 1678 0260 1A68     		ldr	r2, [r3]
 768:Src/main.c    ****       }
 1679              		.loc 3 768 43 view .LVU463
 1680 0262 0123     		movs	r3, #1
 1681 0264 03FA06F0 		lsl	r0, r3, r6
 768:Src/main.c    ****       }
 1682              		.loc 3 768 17 view .LVU464
 1683 0268 52F82530 		ldr	r3, [r2, r5, lsl #2]
 1684 026c 23EA0003 		bic	r3, r3, r0
 1685 0270 42F82530 		str	r3, [r2, r5, lsl #2]
 1686 0274 03E0     		b	.L91
 1687              	.LVL144:
 1688              	.L120:
 768:Src/main.c    ****       }
 1689              		.loc 3 768 17 view .LVU465
 1690              	.LBE18:
 775:Src/main.c    ****       break;
 1691              		.loc 3 775 7 is_stmt 1 view .LVU466
 775:Src/main.c    ****       break;
 1692              		.loc 3 775 21 is_stmt 0 view .LVU467
 1693 0276 2E4B     		ldr	r3, .L258+56
 1694 0278 0122     		movs	r2, #1
 1695 027a 1A70     		strb	r2, [r3]
 776:Src/main.c    **** 
ARM GAS  /tmp/ccDqKevX.s 			page 58


 1696              		.loc 3 776 7 is_stmt 1 view .LVU468
1000:Src/main.c    **** }
 1697              		.loc 3 1000 10 is_stmt 0 view .LVU469
 1698 027c 0024     		movs	r4, #0
 1699              	.LVL145:
 1700              	.L91:
1001:Src/main.c    **** 
 1701              		.loc 3 1001 1 view .LVU470
 1702 027e 2046     		mov	r0, r4
 1703 0280 0CB0     		add	sp, sp, #48
 1704              	.LCFI15:
 1705              		.cfi_remember_state
 1706              		.cfi_def_cfa_offset 24
 1707              		@ sp needed
 1708 0282 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1709              	.LVL146:
 1710              	.L115:
 1711              	.LCFI16:
 1712              		.cfi_restore_state
 1713              	.LBB19:
 784:Src/main.c    ****       if (text_laenge <= 0) { break; }
 1714              		.loc 3 784 7 is_stmt 1 view .LVU471
 784:Src/main.c    ****       if (text_laenge <= 0) { break; }
 1715              		.loc 3 784 36 is_stmt 0 view .LVU472
 1716 0286 059D     		ldr	r5, [sp, #20]
 1717              	.LVL147:
 784:Src/main.c    ****       if (text_laenge <= 0) { break; }
 1718              		.loc 3 784 25 view .LVU473
 1719 0288 2846     		mov	r0, r5
 1720 028a FFF7FEFF 		bl	strlen
 1721              	.LVL148:
 785:Src/main.c    **** 
 1722              		.loc 3 785 7 is_stmt 1 view .LVU474
 785:Src/main.c    **** 
 1723              		.loc 3 785 10 is_stmt 0 view .LVU475
 1724 028e 041E     		subs	r4, r0, #0
 1725 0290 01DC     		bgt	.L246
 1726              	.LBE19:
1000:Src/main.c    **** }
 1727              		.loc 3 1000 10 view .LVU476
 1728 0292 0024     		movs	r4, #0
 1729 0294 F3E7     		b	.L91
 1730              	.L246:
 1731              	.LBB26:
 788:Src/main.c    ****       if (font != 1 && font != 0)
 1732              		.loc 3 788 7 is_stmt 1 view .LVU477
 788:Src/main.c    ****       if (font != 1 && font != 0)
 1733              		.loc 3 788 18 is_stmt 0 view .LVU478
 1734 0296 0398     		ldr	r0, [sp, #12]
 1735              	.LVL149:
 788:Src/main.c    ****       if (font != 1 && font != 0)
 1736              		.loc 3 788 18 view .LVU479
 1737 0298 FFF7FEFF 		bl	atoi
 1738              	.LVL150:
 1739 029c 8046     		mov	r8, r0
 1740              	.LVL151:
 789:Src/main.c    ****         break;
ARM GAS  /tmp/ccDqKevX.s 			page 59


 1741              		.loc 3 789 7 is_stmt 1 view .LVU480
 789:Src/main.c    ****         break;
 1742              		.loc 3 789 10 is_stmt 0 view .LVU481
 1743 029e 0128     		cmp	r0, #1
 1744 02a0 01D9     		bls	.L247
 1745              	.LBE26:
1000:Src/main.c    **** }
 1746              		.loc 3 1000 10 view .LVU482
 1747 02a2 0024     		movs	r4, #0
 1748              	.LVL152:
1000:Src/main.c    **** }
 1749              		.loc 3 1000 10 view .LVU483
 1750 02a4 EBE7     		b	.L91
 1751              	.LVL153:
 1752              	.L247:
 1753              	.LBB27:
 791:Src/main.c    ****       unsigned char position = atoi(args[2]);
 1754              		.loc 3 791 7 is_stmt 1 view .LVU484
 792:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 1755              		.loc 3 792 7 view .LVU485
 792:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 1756              		.loc 3 792 41 is_stmt 0 view .LVU486
 1757 02a6 049E     		ldr	r6, [sp, #16]
 1758              	.LVL154:
 792:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 1759              		.loc 3 792 32 view .LVU487
 1760 02a8 3046     		mov	r0, r6
 1761              	.LVL155:
 792:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 1762              		.loc 3 792 32 view .LVU488
 1763 02aa FFF7FEFF 		bl	atoi
 1764              	.LVL156:
 792:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 1765              		.loc 3 792 21 view .LVU489
 1766 02ae C1B2     		uxtb	r1, r0
 1767              	.LVL157:
 793:Src/main.c    ****         offset_mode = 0;
 1768              		.loc 3 793 7 is_stmt 1 view .LVU490
 793:Src/main.c    ****         offset_mode = 0;
 1769              		.loc 3 793 18 is_stmt 0 view .LVU491
 1770 02b0 3678     		ldrb	r6, [r6]	@ zero_extendqisi2
 793:Src/main.c    ****         offset_mode = 0;
 1771              		.loc 3 793 10 view .LVU492
 1772 02b2 4C2E     		cmp	r6, #76
 1773 02b4 40D0     		beq	.L201
 793:Src/main.c    ****         offset_mode = 0;
 1774              		.loc 3 793 29 discriminator 1 view .LVU493
 1775 02b6 432E     		cmp	r6, #67
 1776 02b8 41D0     		beq	.L202
 793:Src/main.c    ****         offset_mode = 0;
 1777              		.loc 3 793 50 discriminator 2 view .LVU494
 1778 02ba 522E     		cmp	r6, #82
 1779 02bc 41D0     		beq	.L203
 797:Src/main.c    ****           offset_mode = 1;
 1780              		.loc 3 797 9 is_stmt 1 view .LVU495
 797:Src/main.c    ****           offset_mode = 1;
 1781              		.loc 3 797 28 is_stmt 0 view .LVU496
ARM GAS  /tmp/ccDqKevX.s 			page 60


 1782 02be 1B4A     		ldr	r2, .L258+52
 1783 02c0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1784 02c2 C2EBC202 		rsb	r2, r2, r2, lsl #3
 797:Src/main.c    ****           offset_mode = 1;
 1785              		.loc 3 797 12 view .LVU497
 1786 02c6 B1EB820F 		cmp	r1, r2, lsl #2
 1787 02ca 3CDB     		blt	.L204
 1788              	.LBE27:
1000:Src/main.c    **** }
 1789              		.loc 3 1000 10 view .LVU498
 1790 02cc 0024     		movs	r4, #0
 1791              	.LVL158:
1000:Src/main.c    **** }
 1792              		.loc 3 1000 10 view .LVU499
 1793 02ce D6E7     		b	.L91
 1794              	.LVL159:
 1795              	.L133:
 1796              	.LBB28:
 1797              	.LBB20:
 804:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 1798              		.loc 3 804 45 is_stmt 1 discriminator 3 view .LVU500
 804:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 1799              		.loc 3 804 66 is_stmt 0 discriminator 3 view .LVU501
 1800 02d0 184A     		ldr	r2, .L258+60
 1801 02d2 0021     		movs	r1, #0
 1802 02d4 D154     		strb	r1, [r2, r3]
 804:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 1803              		.loc 3 804 38 is_stmt 1 discriminator 3 view .LVU502
 804:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 1804              		.loc 3 804 39 is_stmt 0 discriminator 3 view .LVU503
 1805 02d6 0133     		adds	r3, r3, #1
 1806              	.LVL160:
 1807              	.L132:
 804:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 1808              		.loc 3 804 21 is_stmt 1 discriminator 1 view .LVU504
 804:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 1809              		.loc 3 804 7 is_stmt 0 discriminator 1 view .LVU505
 1810 02d8 C72B     		cmp	r3, #199
 1811 02da F9DD     		ble	.L133
 1812              	.LBE20:
 805:Src/main.c    ****       if (!text_breite) { break; }
 1813              		.loc 3 805 7 is_stmt 1 view .LVU506
 805:Src/main.c    ****       if (!text_breite) { break; }
 1814              		.loc 3 805 25 is_stmt 0 view .LVU507
 1815 02dc 5FFA88F3 		uxtb	r3, r8
 1816              	.LVL161:
 805:Src/main.c    ****       if (!text_breite) { break; }
 1817              		.loc 3 805 25 view .LVU508
 1818 02e0 0093     		str	r3, [sp]
 1819 02e2 2346     		mov	r3, r4
 1820 02e4 0022     		movs	r2, #0
 1821 02e6 1349     		ldr	r1, .L258+60
 1822 02e8 2846     		mov	r0, r5
 1823 02ea FFF7FEFF 		bl	generate_text
 1824              	.LVL162:
 806:Src/main.c    **** 
 1825              		.loc 3 806 7 is_stmt 1 view .LVU509
ARM GAS  /tmp/ccDqKevX.s 			page 61


 806:Src/main.c    **** 
 1826              		.loc 3 806 10 is_stmt 0 view .LVU510
 1827 02ee 0446     		mov	r4, r0
 1828              	.LVL163:
 806:Src/main.c    **** 
 1829              		.loc 3 806 10 view .LVU511
 1830 02f0 0028     		cmp	r0, #0
 1831 02f2 C4D0     		beq	.L91
 1832              	.LBB21:
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1833              		.loc 3 809 16 view .LVU512
 1834 02f4 0023     		movs	r3, #0
 1835 02f6 32E0     		b	.L134
 1836              	.L259:
 1837              		.align	2
 1838              	.L258:
 1839 02f8 00000000 		.word	.LC1
 1840 02fc 48000000 		.word	.LC9
 1841 0300 04000000 		.word	.LC2
 1842 0304 0C000000 		.word	.LC3
 1843 0308 14000000 		.word	.LC4
 1844 030c 1C000000 		.word	.LC5
 1845 0310 28000000 		.word	.LC6
 1846 0314 30000000 		.word	.LC7
 1847 0318 3C000000 		.word	.LC8
 1848 031c 00080140 		.word	1073809408
 1849 0320 00000000 		.word	.LANCHOR6
 1850 0324 00000000 		.word	.LANCHOR7
 1851 0328 00000000 		.word	dots
 1852 032c 00000000 		.word	Panelanzahl
 1853 0330 00000000 		.word	.LANCHOR2
 1854 0334 00000000 		.word	textbuffer_8px_UP
 1855              	.LVL164:
 1856              	.L201:
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1857              		.loc 3 809 16 view .LVU513
 1858              	.LBE21:
 794:Src/main.c    ****         position = args[2][0];
 1859              		.loc 3 794 21 view .LVU514
 1860 0338 0027     		movs	r7, #0
 1861              	.L131:
 1862              	.LVL165:
 798:Src/main.c    ****       }
 1863              		.loc 3 798 23 discriminator 1 view .LVU515
 1864 033a 0023     		movs	r3, #0
 1865 033c CCE7     		b	.L132
 1866              	.LVL166:
 1867              	.L202:
 794:Src/main.c    ****         position = args[2][0];
 1868              		.loc 3 794 21 view .LVU516
 1869 033e 0027     		movs	r7, #0
 1870 0340 FBE7     		b	.L131
 1871              	.L203:
 1872 0342 0027     		movs	r7, #0
 1873 0344 F9E7     		b	.L131
 1874              	.L204:
 792:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
ARM GAS  /tmp/ccDqKevX.s 			page 62


 1875              		.loc 3 792 21 view .LVU517
 1876 0346 0E46     		mov	r6, r1
 798:Src/main.c    ****       }
 1877              		.loc 3 798 23 view .LVU518
 1878 0348 0127     		movs	r7, #1
 1879 034a F6E7     		b	.L131
 1880              	.LVL167:
 1881              	.L135:
 1882              	.LBB22:
 810:Src/main.c    **** 
 1883              		.loc 3 810 9 is_stmt 1 discriminator 3 view .LVU519
 810:Src/main.c    **** 
 1884              		.loc 3 810 23 is_stmt 0 discriminator 3 view .LVU520
 1885 034c A14A     		ldr	r2, .L260
 1886 034e 1168     		ldr	r1, [r2]
 1887 0350 51F82320 		ldr	r2, [r1, r3, lsl #2]
 810:Src/main.c    **** 
 1888              		.loc 3 810 27 discriminator 3 view .LVU521
 1889 0354 22F47F62 		bic	r2, r2, #4080
 810:Src/main.c    **** 
 1890              		.loc 3 810 17 discriminator 3 view .LVU522
 1891 0358 41F82320 		str	r2, [r1, r3, lsl #2]
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1892              		.loc 3 809 43 is_stmt 1 discriminator 3 view .LVU523
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1893              		.loc 3 809 44 is_stmt 0 discriminator 3 view .LVU524
 1894 035c 0133     		adds	r3, r3, #1
 1895              	.LVL168:
 1896              	.L134:
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1897              		.loc 3 809 21 is_stmt 1 discriminator 1 view .LVU525
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1898              		.loc 3 809 27 is_stmt 0 discriminator 1 view .LVU526
 1899 035e 9E4A     		ldr	r2, .L260+4
 1900 0360 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1901 0362 C2EBC202 		rsb	r2, r2, r2, lsl #3
 809:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFF00F;
 1902              		.loc 3 809 7 discriminator 1 view .LVU527
 1903 0366 B3EB820F 		cmp	r3, r2, lsl #2
 1904 036a EFDB     		blt	.L135
 1905              	.LBE22:
 813:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 1906              		.loc 3 813 7 is_stmt 1 view .LVU528
 813:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 1907              		.loc 3 813 11 is_stmt 0 view .LVU529
 1908 036c 9B4B     		ldr	r3, .L260+8
 1909              	.LVL169:
 813:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 1910              		.loc 3 813 11 view .LVU530
 1911 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 813:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 1912              		.loc 3 813 10 view .LVU531
 1913 0370 4BBB     		cbnz	r3, .L205
 1914              	.L137:
 819:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 1915              		.loc 3 819 7 is_stmt 1 view .LVU532
 1916              	.LVL170:
ARM GAS  /tmp/ccDqKevX.s 			page 63


 820:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 1917              		.loc 3 820 7 view .LVU533
 820:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 1918              		.loc 3 820 29 is_stmt 0 view .LVU534
 1919 0372 994B     		ldr	r3, .L260+4
 1920 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1921 0376 C3EBC302 		rsb	r2, r3, r3, lsl #3
 1922 037a 9000     		lsls	r0, r2, #2
 1923              	.LVL171:
 820:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 1924              		.loc 3 820 10 view .LVU535
 1925 037c B4EB820F 		cmp	r4, r2, lsl #2
 1926 0380 23DA     		bge	.L206
 821:Src/main.c    ****       }
 1927              		.loc 3 821 9 is_stmt 1 view .LVU536
 821:Src/main.c    ****       }
 1928              		.loc 3 821 41 is_stmt 0 view .LVU537
 1929 0382 5200     		lsls	r2, r2, #1
 1930 0384 D2B2     		uxtb	r2, r2
 821:Src/main.c    ****       }
 1931              		.loc 3 821 55 view .LVU538
 1932 0386 04EBD471 		add	r1, r4, r4, lsr #31
 1933 038a 4910     		asrs	r1, r1, #1
 1934 038c 4942     		rsbs	r1, r1, #0
 821:Src/main.c    ****       }
 1935              		.loc 3 821 41 view .LVU539
 1936 038e C9B2     		uxtb	r1, r1
 821:Src/main.c    ****       }
 1937              		.loc 3 821 16 view .LVU540
 1938 0390 0A44     		add	r2, r2, r1
 1939 0392 D2B2     		uxtb	r2, r2
 1940              	.LVL172:
 1941              	.L139:
 823:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 1942              		.loc 3 823 7 is_stmt 1 view .LVU541
 823:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 1943              		.loc 3 823 10 is_stmt 0 view .LVU542
 1944 0394 A042     		cmp	r0, r4
 1945 0396 00DC     		bgt	.L140
 824:Src/main.c    ****       if (position == 'L') // linksbÃ¼ndig
 1946              		.loc 3 824 21 view .LVU543
 1947 0398 0446     		mov	r4, r0
 1948              	.LVL173:
 1949              	.L140:
 825:Src/main.c    ****         offset = 0;
 1950              		.loc 3 825 7 is_stmt 1 view .LVU544
 825:Src/main.c    ****         offset = 0;
 1951              		.loc 3 825 10 is_stmt 0 view .LVU545
 1952 039a 4C2E     		cmp	r6, #76
 1953 039c 17D0     		beq	.L248
 1954              	.LVL174:
 1955              	.L141:
 827:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 1956              		.loc 3 827 7 is_stmt 1 view .LVU546
 827:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 1957              		.loc 3 827 10 is_stmt 0 view .LVU547
 1958 039e 522E     		cmp	r6, #82
ARM GAS  /tmp/ccDqKevX.s 			page 64


 1959 03a0 17D0     		beq	.L249
 1960              	.LVL175:
 1961              	.L142:
 832:Src/main.c    ****         offset = position;
 1962              		.loc 3 832 7 is_stmt 1 view .LVU548
 832:Src/main.c    ****         offset = position;
 1963              		.loc 3 832 10 is_stmt 0 view .LVU549
 1964 03a2 07B9     		cbnz	r7, .L143
 1965 03a4 1646     		mov	r6, r2
 1966              	.L143:
 1967              	.LVL176:
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 1968              		.loc 3 834 7 is_stmt 1 view .LVU550
 1969              	.LBB23:
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 1970              		.loc 3 834 12 view .LVU551
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 1971              		.loc 3 834 16 is_stmt 0 view .LVU552
 1972 03a6 0023     		movs	r3, #0
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 1973              		.loc 3 834 7 view .LVU553
 1974 03a8 2AE0     		b	.L144
 1975              	.LVL177:
 1976              	.L138:
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 1977              		.loc 3 834 7 view .LVU554
 1978              	.LBE23:
 1979              	.LBB24:
 815:Src/main.c    ****       }
 1980              		.loc 3 815 11 is_stmt 1 discriminator 3 view .LVU555
 815:Src/main.c    ****       }
 1981              		.loc 3 815 15 is_stmt 0 discriminator 3 view .LVU556
 1982 03aa 8A4B     		ldr	r3, .L260
 1983 03ac 1B68     		ldr	r3, [r3]
 815:Src/main.c    ****       }
 1984              		.loc 3 815 19 discriminator 3 view .LVU557
 1985 03ae 0021     		movs	r1, #0
 1986 03b0 43F82210 		str	r1, [r3, r2, lsl #2]
 814:Src/main.c    ****           dots[i] = 0; }
 1987              		.loc 3 814 45 is_stmt 1 discriminator 3 view .LVU558
 814:Src/main.c    ****           dots[i] = 0; }
 1988              		.loc 3 814 46 is_stmt 0 discriminator 3 view .LVU559
 1989 03b4 0132     		adds	r2, r2, #1
 1990              	.LVL178:
 1991              	.L136:
 814:Src/main.c    ****           dots[i] = 0; }
 1992              		.loc 3 814 23 is_stmt 1 discriminator 1 view .LVU560
 814:Src/main.c    ****           dots[i] = 0; }
 1993              		.loc 3 814 29 is_stmt 0 discriminator 1 view .LVU561
 1994 03b6 884B     		ldr	r3, .L260+4
 1995 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1996 03ba C3EBC303 		rsb	r3, r3, r3, lsl #3
 814:Src/main.c    ****           dots[i] = 0; }
 1997              		.loc 3 814 9 discriminator 1 view .LVU562
 1998 03be B2EB830F 		cmp	r2, r3, lsl #2
 1999 03c2 F2DB     		blt	.L138
 2000 03c4 D5E7     		b	.L137
ARM GAS  /tmp/ccDqKevX.s 			page 65


 2001              	.LVL179:
 2002              	.L205:
 814:Src/main.c    ****           dots[i] = 0; }
 2003              		.loc 3 814 18 view .LVU563
 2004 03c6 0022     		movs	r2, #0
 2005 03c8 F5E7     		b	.L136
 2006              	.LVL180:
 2007              	.L206:
 814:Src/main.c    ****           dots[i] = 0; }
 2008              		.loc 3 814 18 view .LVU564
 2009              	.LBE24:
 819:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 2010              		.loc 3 819 15 view .LVU565
 2011 03ca 0022     		movs	r2, #0
 2012 03cc E2E7     		b	.L139
 2013              	.LVL181:
 2014              	.L248:
 826:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 2015              		.loc 3 826 16 view .LVU566
 2016 03ce 0022     		movs	r2, #0
 2017              	.LVL182:
 826:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 2018              		.loc 3 826 16 view .LVU567
 2019 03d0 E5E7     		b	.L141
 2020              	.LVL183:
 2021              	.L249:
 828:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 2022              		.loc 3 828 9 is_stmt 1 view .LVU568
 828:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 2023              		.loc 3 828 12 is_stmt 0 view .LVU569
 2024 03d2 A042     		cmp	r0, r4
 2025 03d4 07DB     		blt	.L209
 829:Src/main.c    ****         } else { offset = 0; }
 2026              		.loc 3 829 11 is_stmt 1 view .LVU570
 829:Src/main.c    ****         } else { offset = 0; }
 2027              		.loc 3 829 39 is_stmt 0 view .LVU571
 2028 03d6 C3EBC303 		rsb	r3, r3, r3, lsl #3
 2029 03da 9B00     		lsls	r3, r3, #2
 2030 03dc DBB2     		uxtb	r3, r3
 2031 03de E2B2     		uxtb	r2, r4
 2032              	.LVL184:
 829:Src/main.c    ****         } else { offset = 0; }
 2033              		.loc 3 829 18 view .LVU572
 2034 03e0 9B1A     		subs	r3, r3, r2
 2035 03e2 DAB2     		uxtb	r2, r3
 2036              	.LVL185:
 829:Src/main.c    ****         } else { offset = 0; }
 2037              		.loc 3 829 18 view .LVU573
 2038 03e4 DDE7     		b	.L142
 2039              	.L209:
 830:Src/main.c    ****       }
 2040              		.loc 3 830 25 view .LVU574
 2041 03e6 0022     		movs	r2, #0
 2042              	.LVL186:
 830:Src/main.c    ****       }
 2043              		.loc 3 830 25 view .LVU575
 2044 03e8 DBE7     		b	.L142
ARM GAS  /tmp/ccDqKevX.s 			page 66


 2045              	.LVL187:
 2046              	.L146:
 2047              	.LBB25:
 835:Src/main.c    ****       }
 2048              		.loc 3 835 9 is_stmt 1 discriminator 4 view .LVU576
 835:Src/main.c    ****       }
 2049              		.loc 3 835 24 is_stmt 0 discriminator 4 view .LVU577
 2050 03ea 7A4A     		ldr	r2, .L260
 2051 03ec 1068     		ldr	r0, [r2]
 835:Src/main.c    ****       }
 2052              		.loc 3 835 54 discriminator 4 view .LVU578
 2053 03ee 7C4A     		ldr	r2, .L260+12
 2054 03f0 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 835:Src/main.c    ****       }
 2055              		.loc 3 835 24 discriminator 4 view .LVU579
 2056 03f2 50F82120 		ldr	r2, [r0, r1, lsl #2]
 2057 03f6 42EA0512 		orr	r2, r2, r5, lsl #4
 2058 03fa 40F82120 		str	r2, [r0, r1, lsl #2]
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2059              		.loc 3 834 65 is_stmt 1 discriminator 4 view .LVU580
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2060              		.loc 3 834 66 is_stmt 0 discriminator 4 view .LVU581
 2061 03fe 0133     		adds	r3, r3, #1
 2062              	.LVL188:
 2063              	.L144:
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2064              		.loc 3 834 21 is_stmt 1 discriminator 1 view .LVU582
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2065              		.loc 3 834 7 is_stmt 0 discriminator 1 view .LVU583
 2066 0400 9C42     		cmp	r4, r3
 2067 0402 07DD     		ble	.L145
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2068              		.loc 3 834 39 discriminator 3 view .LVU584
 2069 0404 F118     		adds	r1, r6, r3
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2070              		.loc 3 834 50 discriminator 3 view .LVU585
 2071 0406 744A     		ldr	r2, .L260+4
 2072 0408 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2073 040a C2EBC202 		rsb	r2, r2, r2, lsl #3
 834:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 4;
 2074              		.loc 3 834 35 discriminator 3 view .LVU586
 2075 040e B1EB820F 		cmp	r1, r2, lsl #2
 2076 0412 EADB     		blt	.L146
 2077              	.L145:
 2078              	.LBE25:
 839:Src/main.c    ****         if (yellow_test_or_UP_DOWN) {
 2079              		.loc 3 839 7 is_stmt 1 view .LVU587
 839:Src/main.c    ****         if (yellow_test_or_UP_DOWN) {
 2080              		.loc 3 839 11 is_stmt 0 view .LVU588
 2081 0414 734B     		ldr	r3, .L260+16
 2082              	.LVL189:
 839:Src/main.c    ****         if (yellow_test_or_UP_DOWN) {
 2083              		.loc 3 839 11 view .LVU589
 2084 0416 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 839:Src/main.c    ****         if (yellow_test_or_UP_DOWN) {
 2085              		.loc 3 839 10 view .LVU590
 2086 0418 2BB9     		cbnz	r3, .L147
ARM GAS  /tmp/ccDqKevX.s 			page 67


 840:Src/main.c    ****           start_refresh = 1;
 2087              		.loc 3 840 9 is_stmt 1 view .LVU591
 840:Src/main.c    ****           start_refresh = 1;
 2088              		.loc 3 840 13 is_stmt 0 view .LVU592
 2089 041a 704B     		ldr	r3, .L260+8
 2090 041c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 840:Src/main.c    ****           start_refresh = 1;
 2091              		.loc 3 840 12 view .LVU593
 2092 041e 4BB1     		cbz	r3, .L148
 841:Src/main.c    ****         } else {
 2093              		.loc 3 841 11 is_stmt 1 view .LVU594
 841:Src/main.c    ****         } else {
 2094              		.loc 3 841 25 is_stmt 0 view .LVU595
 2095 0420 714B     		ldr	r3, .L260+20
 2096 0422 0122     		movs	r2, #1
 2097 0424 1A70     		strb	r2, [r3]
 2098              	.L147:
 846:Src/main.c    ****       yellow_test_or_UP_DOWN = 0;
 2099              		.loc 3 846 7 is_stmt 1 view .LVU596
 846:Src/main.c    ****       yellow_test_or_UP_DOWN = 0;
 2100              		.loc 3 846 29 is_stmt 0 view .LVU597
 2101 0426 714B     		ldr	r3, .L260+24
 2102 0428 0122     		movs	r2, #1
 2103 042a 1A70     		strb	r2, [r3]
 847:Src/main.c    ****       break; }
 2104              		.loc 3 847 7 is_stmt 1 view .LVU598
 847:Src/main.c    ****       break; }
 2105              		.loc 3 847 30 is_stmt 0 view .LVU599
 2106 042c 0024     		movs	r4, #0
 2107              	.LVL190:
 847:Src/main.c    ****       break; }
 2108              		.loc 3 847 30 view .LVU600
 2109 042e 6B4B     		ldr	r3, .L260+8
 2110 0430 1C70     		strb	r4, [r3]
 848:Src/main.c    **** 
 2111              		.loc 3 848 7 is_stmt 1 view .LVU601
 2112 0432 24E7     		b	.L91
 2113              	.LVL191:
 2114              	.L148:
 843:Src/main.c    ****         }
 2115              		.loc 3 843 11 view .LVU602
 843:Src/main.c    ****         }
 2116              		.loc 3 843 32 is_stmt 0 view .LVU603
 2117 0434 6E4B     		ldr	r3, .L260+28
 2118 0436 0122     		movs	r2, #1
 2119 0438 1A70     		strb	r2, [r3]
 2120 043a F4E7     		b	.L147
 2121              	.LVL192:
 2122              	.L117:
 843:Src/main.c    ****         }
 2123              		.loc 3 843 32 view .LVU604
 2124              	.LBE28:
 2125              	.LBB29:
 856:Src/main.c    ****       if (text_laenge <= 0) { break; }
 2126              		.loc 3 856 7 is_stmt 1 view .LVU605
 856:Src/main.c    ****       if (text_laenge <= 0) { break; }
 2127              		.loc 3 856 36 is_stmt 0 view .LVU606
ARM GAS  /tmp/ccDqKevX.s 			page 68


 2128 043c 059D     		ldr	r5, [sp, #20]
 2129              	.LVL193:
 856:Src/main.c    ****       if (text_laenge <= 0) { break; }
 2130              		.loc 3 856 25 view .LVU607
 2131 043e 2846     		mov	r0, r5
 2132 0440 FFF7FEFF 		bl	strlen
 2133              	.LVL194:
 857:Src/main.c    **** 
 2134              		.loc 3 857 7 is_stmt 1 view .LVU608
 857:Src/main.c    **** 
 2135              		.loc 3 857 10 is_stmt 0 view .LVU609
 2136 0444 041E     		subs	r4, r0, #0
 2137 0446 01DC     		bgt	.L250
 2138              	.LBE29:
1000:Src/main.c    **** }
 2139              		.loc 3 1000 10 view .LVU610
 2140 0448 0024     		movs	r4, #0
 2141 044a 18E7     		b	.L91
 2142              	.L250:
 2143              	.LBB36:
 860:Src/main.c    ****       if (font != 1 && font != 0)
 2144              		.loc 3 860 7 is_stmt 1 view .LVU611
 860:Src/main.c    ****       if (font != 1 && font != 0)
 2145              		.loc 3 860 18 is_stmt 0 view .LVU612
 2146 044c 0398     		ldr	r0, [sp, #12]
 2147              	.LVL195:
 860:Src/main.c    ****       if (font != 1 && font != 0)
 2148              		.loc 3 860 18 view .LVU613
 2149 044e FFF7FEFF 		bl	atoi
 2150              	.LVL196:
 2151 0452 8046     		mov	r8, r0
 2152              	.LVL197:
 861:Src/main.c    ****         break;
 2153              		.loc 3 861 7 is_stmt 1 view .LVU614
 861:Src/main.c    ****         break;
 2154              		.loc 3 861 10 is_stmt 0 view .LVU615
 2155 0454 0128     		cmp	r0, #1
 2156 0456 01D9     		bls	.L251
 2157              	.LBE36:
1000:Src/main.c    **** }
 2158              		.loc 3 1000 10 view .LVU616
 2159 0458 0024     		movs	r4, #0
 2160              	.LVL198:
1000:Src/main.c    **** }
 2161              		.loc 3 1000 10 view .LVU617
 2162 045a 10E7     		b	.L91
 2163              	.LVL199:
 2164              	.L251:
 2165              	.LBB37:
 863:Src/main.c    ****       unsigned char position = atoi(args[2]);
 2166              		.loc 3 863 7 is_stmt 1 view .LVU618
 864:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2167              		.loc 3 864 7 view .LVU619
 864:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2168              		.loc 3 864 41 is_stmt 0 view .LVU620
 2169 045c 049E     		ldr	r6, [sp, #16]
 2170              	.LVL200:
ARM GAS  /tmp/ccDqKevX.s 			page 69


 864:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2171              		.loc 3 864 32 view .LVU621
 2172 045e 3046     		mov	r0, r6
 2173              	.LVL201:
 864:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2174              		.loc 3 864 32 view .LVU622
 2175 0460 FFF7FEFF 		bl	atoi
 2176              	.LVL202:
 864:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2177              		.loc 3 864 21 view .LVU623
 2178 0464 C1B2     		uxtb	r1, r0
 2179              	.LVL203:
 865:Src/main.c    ****         offset_mode = 0;
 2180              		.loc 3 865 7 is_stmt 1 view .LVU624
 865:Src/main.c    ****         offset_mode = 0;
 2181              		.loc 3 865 18 is_stmt 0 view .LVU625
 2182 0466 3678     		ldrb	r6, [r6]	@ zero_extendqisi2
 865:Src/main.c    ****         offset_mode = 0;
 2183              		.loc 3 865 10 view .LVU626
 2184 0468 4C2E     		cmp	r6, #76
 2185 046a 21D0     		beq	.L212
 865:Src/main.c    ****         offset_mode = 0;
 2186              		.loc 3 865 29 discriminator 1 view .LVU627
 2187 046c 432E     		cmp	r6, #67
 2188 046e 22D0     		beq	.L213
 865:Src/main.c    ****         offset_mode = 0;
 2189              		.loc 3 865 50 discriminator 2 view .LVU628
 2190 0470 522E     		cmp	r6, #82
 2191 0472 22D0     		beq	.L214
 869:Src/main.c    ****           offset_mode = 1;
 2192              		.loc 3 869 9 is_stmt 1 view .LVU629
 869:Src/main.c    ****           offset_mode = 1;
 2193              		.loc 3 869 28 is_stmt 0 view .LVU630
 2194 0474 584A     		ldr	r2, .L260+4
 2195 0476 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2196 0478 C2EBC202 		rsb	r2, r2, r2, lsl #3
 869:Src/main.c    ****           offset_mode = 1;
 2197              		.loc 3 869 12 view .LVU631
 2198 047c B1EB820F 		cmp	r1, r2, lsl #2
 2199 0480 1DDB     		blt	.L215
 2200              	.LBE37:
1000:Src/main.c    **** }
 2201              		.loc 3 1000 10 view .LVU632
 2202 0482 0024     		movs	r4, #0
 2203              	.LVL204:
1000:Src/main.c    **** }
 2204              		.loc 3 1000 10 view .LVU633
 2205 0484 FBE6     		b	.L91
 2206              	.LVL205:
 2207              	.L151:
 2208              	.LBB38:
 2209              	.LBB30:
 876:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2210              		.loc 3 876 45 is_stmt 1 discriminator 3 view .LVU634
 876:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2211              		.loc 3 876 66 is_stmt 0 discriminator 3 view .LVU635
 2212 0486 564A     		ldr	r2, .L260+12
ARM GAS  /tmp/ccDqKevX.s 			page 70


 2213 0488 0021     		movs	r1, #0
 2214 048a D154     		strb	r1, [r2, r3]
 876:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2215              		.loc 3 876 38 is_stmt 1 discriminator 3 view .LVU636
 876:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2216              		.loc 3 876 39 is_stmt 0 discriminator 3 view .LVU637
 2217 048c 0133     		adds	r3, r3, #1
 2218              	.LVL206:
 2219              	.L150:
 876:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2220              		.loc 3 876 21 is_stmt 1 discriminator 1 view .LVU638
 876:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2221              		.loc 3 876 7 is_stmt 0 discriminator 1 view .LVU639
 2222 048e C72B     		cmp	r3, #199
 2223 0490 F9DD     		ble	.L151
 2224              	.LBE30:
 877:Src/main.c    ****       if (!text_breite) { break; }
 2225              		.loc 3 877 7 is_stmt 1 view .LVU640
 877:Src/main.c    ****       if (!text_breite) { break; }
 2226              		.loc 3 877 25 is_stmt 0 view .LVU641
 2227 0492 5FFA88F3 		uxtb	r3, r8
 2228              	.LVL207:
 877:Src/main.c    ****       if (!text_breite) { break; }
 2229              		.loc 3 877 25 view .LVU642
 2230 0496 0093     		str	r3, [sp]
 2231 0498 2346     		mov	r3, r4
 2232 049a 0022     		movs	r2, #0
 2233 049c 5049     		ldr	r1, .L260+12
 2234 049e 2846     		mov	r0, r5
 2235 04a0 FFF7FEFF 		bl	generate_text
 2236              	.LVL208:
 878:Src/main.c    **** 
 2237              		.loc 3 878 7 is_stmt 1 view .LVU643
 878:Src/main.c    **** 
 2238              		.loc 3 878 10 is_stmt 0 view .LVU644
 2239 04a4 0446     		mov	r4, r0
 2240              	.LVL209:
 878:Src/main.c    **** 
 2241              		.loc 3 878 10 view .LVU645
 2242 04a6 0028     		cmp	r0, #0
 2243 04a8 3FF4E9AE 		beq	.L91
 2244              	.LBB31:
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2245              		.loc 3 881 16 view .LVU646
 2246 04ac 0023     		movs	r3, #0
 2247 04ae 12E0     		b	.L152
 2248              	.LVL210:
 2249              	.L212:
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2250              		.loc 3 881 16 view .LVU647
 2251              	.LBE31:
 866:Src/main.c    ****         position = args[2][0];
 2252              		.loc 3 866 21 view .LVU648
 2253 04b0 0027     		movs	r7, #0
 2254              	.L149:
 2255              	.LVL211:
 870:Src/main.c    ****       }
ARM GAS  /tmp/ccDqKevX.s 			page 71


 2256              		.loc 3 870 23 discriminator 1 view .LVU649
 2257 04b2 0023     		movs	r3, #0
 2258 04b4 EBE7     		b	.L150
 2259              	.LVL212:
 2260              	.L213:
 866:Src/main.c    ****         position = args[2][0];
 2261              		.loc 3 866 21 view .LVU650
 2262 04b6 0027     		movs	r7, #0
 2263 04b8 FBE7     		b	.L149
 2264              	.L214:
 2265 04ba 0027     		movs	r7, #0
 2266 04bc F9E7     		b	.L149
 2267              	.L215:
 864:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2268              		.loc 3 864 21 view .LVU651
 2269 04be 0E46     		mov	r6, r1
 870:Src/main.c    ****       }
 2270              		.loc 3 870 23 view .LVU652
 2271 04c0 0127     		movs	r7, #1
 2272 04c2 F6E7     		b	.L149
 2273              	.LVL213:
 2274              	.L153:
 2275              	.LBB32:
 882:Src/main.c    ****       
 2276              		.loc 3 882 9 is_stmt 1 discriminator 3 view .LVU653
 882:Src/main.c    ****       
 2277              		.loc 3 882 23 is_stmt 0 discriminator 3 view .LVU654
 2278 04c4 434A     		ldr	r2, .L260
 2279 04c6 1168     		ldr	r1, [r2]
 2280 04c8 51F82320 		ldr	r2, [r1, r3, lsl #2]
 882:Src/main.c    ****       
 2281              		.loc 3 882 27 discriminator 3 view .LVU655
 2282 04cc 22F0FF02 		bic	r2, r2, #255
 882:Src/main.c    ****       
 2283              		.loc 3 882 17 discriminator 3 view .LVU656
 2284 04d0 41F82320 		str	r2, [r1, r3, lsl #2]
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2285              		.loc 3 881 43 is_stmt 1 discriminator 3 view .LVU657
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2286              		.loc 3 881 44 is_stmt 0 discriminator 3 view .LVU658
 2287 04d4 0133     		adds	r3, r3, #1
 2288              	.LVL214:
 2289              	.L152:
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2290              		.loc 3 881 21 is_stmt 1 discriminator 1 view .LVU659
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2291              		.loc 3 881 27 is_stmt 0 discriminator 1 view .LVU660
 2292 04d6 404A     		ldr	r2, .L260+4
 2293 04d8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2294 04da C2EBC202 		rsb	r2, r2, r2, lsl #3
 881:Src/main.c    ****         dots[i] = dots[i] & 0xFFFFFF00;
 2295              		.loc 3 881 7 discriminator 1 view .LVU661
 2296 04de B3EB820F 		cmp	r3, r2, lsl #2
 2297 04e2 EFDB     		blt	.L153
 2298              	.LBE32:
 885:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2299              		.loc 3 885 7 is_stmt 1 view .LVU662
ARM GAS  /tmp/ccDqKevX.s 			page 72


 885:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2300              		.loc 3 885 11 is_stmt 0 view .LVU663
 2301 04e4 414B     		ldr	r3, .L260+24
 2302              	.LVL215:
 885:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2303              		.loc 3 885 11 view .LVU664
 2304 04e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 885:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2305              		.loc 3 885 10 view .LVU665
 2306 04e8 4BBB     		cbnz	r3, .L216
 2307              	.L155:
 891:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 2308              		.loc 3 891 7 is_stmt 1 view .LVU666
 2309              	.LVL216:
 892:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 2310              		.loc 3 892 7 view .LVU667
 892:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 2311              		.loc 3 892 29 is_stmt 0 view .LVU668
 2312 04ea 3B4B     		ldr	r3, .L260+4
 2313 04ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2314 04ee C3EBC302 		rsb	r2, r3, r3, lsl #3
 2315 04f2 9000     		lsls	r0, r2, #2
 2316              	.LVL217:
 892:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 2317              		.loc 3 892 10 view .LVU669
 2318 04f4 B4EB820F 		cmp	r4, r2, lsl #2
 2319 04f8 23DA     		bge	.L217
 893:Src/main.c    ****       }
 2320              		.loc 3 893 9 is_stmt 1 view .LVU670
 893:Src/main.c    ****       }
 2321              		.loc 3 893 41 is_stmt 0 view .LVU671
 2322 04fa 5200     		lsls	r2, r2, #1
 2323 04fc D2B2     		uxtb	r2, r2
 893:Src/main.c    ****       }
 2324              		.loc 3 893 55 view .LVU672
 2325 04fe 04EBD471 		add	r1, r4, r4, lsr #31
 2326 0502 4910     		asrs	r1, r1, #1
 2327 0504 4942     		rsbs	r1, r1, #0
 893:Src/main.c    ****       }
 2328              		.loc 3 893 41 view .LVU673
 2329 0506 C9B2     		uxtb	r1, r1
 893:Src/main.c    ****       }
 2330              		.loc 3 893 16 view .LVU674
 2331 0508 0A44     		add	r2, r2, r1
 2332 050a D2B2     		uxtb	r2, r2
 2333              	.LVL218:
 2334              	.L157:
 895:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 2335              		.loc 3 895 7 is_stmt 1 view .LVU675
 895:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 2336              		.loc 3 895 10 is_stmt 0 view .LVU676
 2337 050c A042     		cmp	r0, r4
 2338 050e 00DC     		bgt	.L158
 896:Src/main.c    ****       if (position == 'L') // linksbÃ¼ndig
 2339              		.loc 3 896 21 view .LVU677
 2340 0510 0446     		mov	r4, r0
 2341              	.LVL219:
ARM GAS  /tmp/ccDqKevX.s 			page 73


 2342              	.L158:
 897:Src/main.c    ****         offset = 0;
 2343              		.loc 3 897 7 is_stmt 1 view .LVU678
 897:Src/main.c    ****         offset = 0;
 2344              		.loc 3 897 10 is_stmt 0 view .LVU679
 2345 0512 4C2E     		cmp	r6, #76
 2346 0514 17D0     		beq	.L252
 2347              	.LVL220:
 2348              	.L159:
 899:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 2349              		.loc 3 899 7 is_stmt 1 view .LVU680
 899:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 2350              		.loc 3 899 10 is_stmt 0 view .LVU681
 2351 0516 522E     		cmp	r6, #82
 2352 0518 17D0     		beq	.L253
 2353              	.LVL221:
 2354              	.L160:
 904:Src/main.c    ****         offset = position;
 2355              		.loc 3 904 7 is_stmt 1 view .LVU682
 904:Src/main.c    ****         offset = position;
 2356              		.loc 3 904 10 is_stmt 0 view .LVU683
 2357 051a 07B9     		cbnz	r7, .L161
 2358 051c 1646     		mov	r6, r2
 2359              	.L161:
 2360              	.LVL222:
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2361              		.loc 3 906 7 is_stmt 1 view .LVU684
 2362              	.LBB33:
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2363              		.loc 3 906 12 view .LVU685
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2364              		.loc 3 906 16 is_stmt 0 view .LVU686
 2365 051e 0023     		movs	r3, #0
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2366              		.loc 3 906 7 view .LVU687
 2367 0520 29E0     		b	.L162
 2368              	.LVL223:
 2369              	.L156:
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2370              		.loc 3 906 7 view .LVU688
 2371              	.LBE33:
 2372              	.LBB34:
 887:Src/main.c    ****       }
 2373              		.loc 3 887 11 is_stmt 1 discriminator 3 view .LVU689
 887:Src/main.c    ****       }
 2374              		.loc 3 887 15 is_stmt 0 discriminator 3 view .LVU690
 2375 0522 2C4B     		ldr	r3, .L260
 2376 0524 1B68     		ldr	r3, [r3]
 887:Src/main.c    ****       }
 2377              		.loc 3 887 19 discriminator 3 view .LVU691
 2378 0526 0021     		movs	r1, #0
 2379 0528 43F82210 		str	r1, [r3, r2, lsl #2]
 886:Src/main.c    ****           dots[i] = 0; }
 2380              		.loc 3 886 45 is_stmt 1 discriminator 3 view .LVU692
 886:Src/main.c    ****           dots[i] = 0; }
 2381              		.loc 3 886 46 is_stmt 0 discriminator 3 view .LVU693
 2382 052c 0132     		adds	r2, r2, #1
ARM GAS  /tmp/ccDqKevX.s 			page 74


 2383              	.LVL224:
 2384              	.L154:
 886:Src/main.c    ****           dots[i] = 0; }
 2385              		.loc 3 886 23 is_stmt 1 discriminator 1 view .LVU694
 886:Src/main.c    ****           dots[i] = 0; }
 2386              		.loc 3 886 29 is_stmt 0 discriminator 1 view .LVU695
 2387 052e 2A4B     		ldr	r3, .L260+4
 2388 0530 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2389 0532 C3EBC303 		rsb	r3, r3, r3, lsl #3
 886:Src/main.c    ****           dots[i] = 0; }
 2390              		.loc 3 886 9 discriminator 1 view .LVU696
 2391 0536 B2EB830F 		cmp	r2, r3, lsl #2
 2392 053a F2DB     		blt	.L156
 2393 053c D5E7     		b	.L155
 2394              	.LVL225:
 2395              	.L216:
 886:Src/main.c    ****           dots[i] = 0; }
 2396              		.loc 3 886 18 view .LVU697
 2397 053e 0022     		movs	r2, #0
 2398 0540 F5E7     		b	.L154
 2399              	.LVL226:
 2400              	.L217:
 886:Src/main.c    ****           dots[i] = 0; }
 2401              		.loc 3 886 18 view .LVU698
 2402              	.LBE34:
 891:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 2403              		.loc 3 891 15 view .LVU699
 2404 0542 0022     		movs	r2, #0
 2405 0544 E2E7     		b	.L157
 2406              	.LVL227:
 2407              	.L252:
 898:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 2408              		.loc 3 898 16 view .LVU700
 2409 0546 0022     		movs	r2, #0
 2410              	.LVL228:
 898:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 2411              		.loc 3 898 16 view .LVU701
 2412 0548 E5E7     		b	.L159
 2413              	.LVL229:
 2414              	.L253:
 900:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 2415              		.loc 3 900 9 is_stmt 1 view .LVU702
 900:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 2416              		.loc 3 900 12 is_stmt 0 view .LVU703
 2417 054a A042     		cmp	r0, r4
 2418 054c 07DB     		blt	.L220
 901:Src/main.c    ****         } else { offset = 0; }
 2419              		.loc 3 901 11 is_stmt 1 view .LVU704
 901:Src/main.c    ****         } else { offset = 0; }
 2420              		.loc 3 901 39 is_stmt 0 view .LVU705
 2421 054e C3EBC303 		rsb	r3, r3, r3, lsl #3
 2422 0552 9B00     		lsls	r3, r3, #2
 2423 0554 DBB2     		uxtb	r3, r3
 2424 0556 E2B2     		uxtb	r2, r4
 2425              	.LVL230:
 901:Src/main.c    ****         } else { offset = 0; }
 2426              		.loc 3 901 18 view .LVU706
ARM GAS  /tmp/ccDqKevX.s 			page 75


 2427 0558 9B1A     		subs	r3, r3, r2
 2428 055a DAB2     		uxtb	r2, r3
 2429              	.LVL231:
 901:Src/main.c    ****         } else { offset = 0; }
 2430              		.loc 3 901 18 view .LVU707
 2431 055c DDE7     		b	.L160
 2432              	.L220:
 902:Src/main.c    ****       }
 2433              		.loc 3 902 25 view .LVU708
 2434 055e 0022     		movs	r2, #0
 2435              	.LVL232:
 902:Src/main.c    ****       }
 2436              		.loc 3 902 25 view .LVU709
 2437 0560 DBE7     		b	.L160
 2438              	.LVL233:
 2439              	.L164:
 2440              	.LBB35:
 907:Src/main.c    ****       }
 2441              		.loc 3 907 9 is_stmt 1 discriminator 4 view .LVU710
 907:Src/main.c    ****       }
 2442              		.loc 3 907 24 is_stmt 0 discriminator 4 view .LVU711
 2443 0562 1C4A     		ldr	r2, .L260
 2444 0564 1068     		ldr	r0, [r2]
 907:Src/main.c    ****       }
 2445              		.loc 3 907 54 discriminator 4 view .LVU712
 2446 0566 1E4A     		ldr	r2, .L260+12
 2447 0568 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 907:Src/main.c    ****       }
 2448              		.loc 3 907 24 discriminator 4 view .LVU713
 2449 056a 50F82120 		ldr	r2, [r0, r1, lsl #2]
 2450 056e 2A43     		orrs	r2, r2, r5
 2451 0570 40F82120 		str	r2, [r0, r1, lsl #2]
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2452              		.loc 3 906 65 is_stmt 1 discriminator 4 view .LVU714
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2453              		.loc 3 906 66 is_stmt 0 discriminator 4 view .LVU715
 2454 0574 0133     		adds	r3, r3, #1
 2455              	.LVL234:
 2456              	.L162:
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2457              		.loc 3 906 21 is_stmt 1 discriminator 1 view .LVU716
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2458              		.loc 3 906 7 is_stmt 0 discriminator 1 view .LVU717
 2459 0576 9C42     		cmp	r4, r3
 2460 0578 07DD     		ble	.L163
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2461              		.loc 3 906 39 discriminator 3 view .LVU718
 2462 057a F118     		adds	r1, r6, r3
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2463              		.loc 3 906 50 discriminator 3 view .LVU719
 2464 057c 164A     		ldr	r2, .L260+4
 2465 057e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2466 0580 C2EBC202 		rsb	r2, r2, r2, lsl #3
 906:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i];
 2467              		.loc 3 906 35 discriminator 3 view .LVU720
 2468 0584 B1EB820F 		cmp	r1, r2, lsl #2
 2469 0588 EBDB     		blt	.L164
ARM GAS  /tmp/ccDqKevX.s 			page 76


 2470              	.L163:
 2471              	.LBE35:
 911:Src/main.c    ****         if (yellow_test_or_center) {
 2472              		.loc 3 911 7 is_stmt 1 view .LVU721
 911:Src/main.c    ****         if (yellow_test_or_center) {
 2473              		.loc 3 911 11 is_stmt 0 view .LVU722
 2474 058a 164B     		ldr	r3, .L260+16
 2475              	.LVL235:
 911:Src/main.c    ****         if (yellow_test_or_center) {
 2476              		.loc 3 911 11 view .LVU723
 2477 058c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 911:Src/main.c    ****         if (yellow_test_or_center) {
 2478              		.loc 3 911 10 view .LVU724
 2479 058e 2BB9     		cbnz	r3, .L165
 912:Src/main.c    ****           start_refresh = 1;
 2480              		.loc 3 912 9 is_stmt 1 view .LVU725
 912:Src/main.c    ****           start_refresh = 1;
 2481              		.loc 3 912 13 is_stmt 0 view .LVU726
 2482 0590 164B     		ldr	r3, .L260+24
 2483 0592 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912:Src/main.c    ****           start_refresh = 1;
 2484              		.loc 3 912 12 view .LVU727
 2485 0594 4BB1     		cbz	r3, .L166
 913:Src/main.c    ****         } else {
 2486              		.loc 3 913 11 is_stmt 1 view .LVU728
 913:Src/main.c    ****         } else {
 2487              		.loc 3 913 25 is_stmt 0 view .LVU729
 2488 0596 144B     		ldr	r3, .L260+20
 2489 0598 0122     		movs	r2, #1
 2490 059a 1A70     		strb	r2, [r3]
 2491              	.L165:
 918:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 2492              		.loc 3 918 7 is_stmt 1 view .LVU730
 918:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 2493              		.loc 3 918 29 is_stmt 0 view .LVU731
 2494 059c 0024     		movs	r4, #0
 2495              	.LVL236:
 918:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 2496              		.loc 3 918 29 view .LVU732
 2497 059e 134B     		ldr	r3, .L260+24
 2498 05a0 1C70     		strb	r4, [r3]
 919:Src/main.c    ****       break; }
 2499              		.loc 3 919 7 is_stmt 1 view .LVU733
 919:Src/main.c    ****       break; }
 2500              		.loc 3 919 30 is_stmt 0 view .LVU734
 2501 05a2 0E4B     		ldr	r3, .L260+8
 2502 05a4 0122     		movs	r2, #1
 2503 05a6 1A70     		strb	r2, [r3]
 920:Src/main.c    **** 
 2504              		.loc 3 920 7 is_stmt 1 view .LVU735
 2505 05a8 69E6     		b	.L91
 2506              	.LVL237:
 2507              	.L166:
 915:Src/main.c    ****         }
 2508              		.loc 3 915 11 view .LVU736
 915:Src/main.c    ****         }
 2509              		.loc 3 915 28 is_stmt 0 view .LVU737
ARM GAS  /tmp/ccDqKevX.s 			page 77


 2510 05aa 124B     		ldr	r3, .L260+32
 2511 05ac 0122     		movs	r2, #1
 2512 05ae 1A70     		strb	r2, [r3]
 2513 05b0 F4E7     		b	.L165
 2514              	.LVL238:
 2515              	.L118:
 915:Src/main.c    ****         }
 2516              		.loc 3 915 28 view .LVU738
 2517              	.LBE38:
 2518              	.LBB39:
 928:Src/main.c    ****       if (text_laenge <= 0) { break; }
 2519              		.loc 3 928 7 is_stmt 1 view .LVU739
 928:Src/main.c    ****       if (text_laenge <= 0) { break; }
 2520              		.loc 3 928 36 is_stmt 0 view .LVU740
 2521 05b2 059D     		ldr	r5, [sp, #20]
 2522              	.LVL239:
 928:Src/main.c    ****       if (text_laenge <= 0) { break; }
 2523              		.loc 3 928 25 view .LVU741
 2524 05b4 2846     		mov	r0, r5
 2525 05b6 FFF7FEFF 		bl	strlen
 2526              	.LVL240:
 929:Src/main.c    **** 
 2527              		.loc 3 929 7 is_stmt 1 view .LVU742
 929:Src/main.c    **** 
 2528              		.loc 3 929 10 is_stmt 0 view .LVU743
 2529 05ba 041E     		subs	r4, r0, #0
 2530 05bc 01DC     		bgt	.L254
 2531              	.LBE39:
1000:Src/main.c    **** }
 2532              		.loc 3 1000 10 view .LVU744
 2533 05be 0024     		movs	r4, #0
 2534 05c0 5DE6     		b	.L91
 2535              	.L254:
 2536              	.LBB46:
 932:Src/main.c    ****       if (font != 1 && font != 0)
 2537              		.loc 3 932 7 is_stmt 1 view .LVU745
 932:Src/main.c    ****       if (font != 1 && font != 0)
 2538              		.loc 3 932 18 is_stmt 0 view .LVU746
 2539 05c2 0398     		ldr	r0, [sp, #12]
 2540              	.LVL241:
 932:Src/main.c    ****       if (font != 1 && font != 0)
 2541              		.loc 3 932 18 view .LVU747
 2542 05c4 FFF7FEFF 		bl	atoi
 2543              	.LVL242:
 2544 05c8 8046     		mov	r8, r0
 2545              	.LVL243:
 933:Src/main.c    ****         break;
 2546              		.loc 3 933 7 is_stmt 1 view .LVU748
 933:Src/main.c    ****         break;
 2547              		.loc 3 933 10 is_stmt 0 view .LVU749
 2548 05ca 0128     		cmp	r0, #1
 2549 05cc 14D9     		bls	.L255
 2550              	.LBE46:
1000:Src/main.c    **** }
 2551              		.loc 3 1000 10 view .LVU750
 2552 05ce 0024     		movs	r4, #0
 2553              	.LVL244:
ARM GAS  /tmp/ccDqKevX.s 			page 78


1000:Src/main.c    **** }
 2554              		.loc 3 1000 10 view .LVU751
 2555 05d0 55E6     		b	.L91
 2556              	.L261:
 2557 05d2 00BF     		.align	2
 2558              	.L260:
 2559 05d4 00000000 		.word	dots
 2560 05d8 00000000 		.word	Panelanzahl
 2561 05dc 00000000 		.word	.LANCHOR14
 2562 05e0 00000000 		.word	textbuffer_8px_UP
 2563 05e4 00000000 		.word	.LANCHOR15
 2564 05e8 00000000 		.word	.LANCHOR2
 2565 05ec 00000000 		.word	.LANCHOR16
 2566 05f0 00000000 		.word	.LANCHOR3
 2567 05f4 00000000 		.word	.LANCHOR5
 2568              	.LVL245:
 2569              	.L255:
 2570              	.LBB47:
 935:Src/main.c    ****       unsigned char position = atoi(args[2]);
 2571              		.loc 3 935 7 is_stmt 1 view .LVU752
 936:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2572              		.loc 3 936 7 view .LVU753
 936:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2573              		.loc 3 936 41 is_stmt 0 view .LVU754
 2574 05f8 049E     		ldr	r6, [sp, #16]
 2575              	.LVL246:
 936:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2576              		.loc 3 936 32 view .LVU755
 2577 05fa 3046     		mov	r0, r6
 2578              	.LVL247:
 936:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2579              		.loc 3 936 32 view .LVU756
 2580 05fc FFF7FEFF 		bl	atoi
 2581              	.LVL248:
 936:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2582              		.loc 3 936 21 view .LVU757
 2583 0600 C1B2     		uxtb	r1, r0
 2584              	.LVL249:
 937:Src/main.c    ****         offset_mode = 0;
 2585              		.loc 3 937 7 is_stmt 1 view .LVU758
 937:Src/main.c    ****         offset_mode = 0;
 2586              		.loc 3 937 18 is_stmt 0 view .LVU759
 2587 0602 3678     		ldrb	r6, [r6]	@ zero_extendqisi2
 937:Src/main.c    ****         offset_mode = 0;
 2588              		.loc 3 937 10 view .LVU760
 2589 0604 4C2E     		cmp	r6, #76
 2590 0606 21D0     		beq	.L223
 937:Src/main.c    ****         offset_mode = 0;
 2591              		.loc 3 937 29 discriminator 1 view .LVU761
 2592 0608 432E     		cmp	r6, #67
 2593 060a 22D0     		beq	.L224
 937:Src/main.c    ****         offset_mode = 0;
 2594              		.loc 3 937 50 discriminator 2 view .LVU762
 2595 060c 522E     		cmp	r6, #82
 2596 060e 22D0     		beq	.L225
 941:Src/main.c    ****           offset_mode = 1;
 2597              		.loc 3 941 9 is_stmt 1 view .LVU763
ARM GAS  /tmp/ccDqKevX.s 			page 79


 941:Src/main.c    ****           offset_mode = 1;
 2598              		.loc 3 941 28 is_stmt 0 view .LVU764
 2599 0610 584A     		ldr	r2, .L262
 2600 0612 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2601 0614 C2EBC202 		rsb	r2, r2, r2, lsl #3
 941:Src/main.c    ****           offset_mode = 1;
 2602              		.loc 3 941 12 view .LVU765
 2603 0618 B1EB820F 		cmp	r1, r2, lsl #2
 2604 061c 1DDB     		blt	.L226
 2605              	.LBE47:
1000:Src/main.c    **** }
 2606              		.loc 3 1000 10 view .LVU766
 2607 061e 0024     		movs	r4, #0
 2608              	.LVL250:
1000:Src/main.c    **** }
 2609              		.loc 3 1000 10 view .LVU767
 2610 0620 2DE6     		b	.L91
 2611              	.LVL251:
 2612              	.L169:
 2613              	.LBB48:
 2614              	.LBB40:
 948:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2615              		.loc 3 948 45 is_stmt 1 discriminator 3 view .LVU768
 948:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2616              		.loc 3 948 66 is_stmt 0 discriminator 3 view .LVU769
 2617 0622 554A     		ldr	r2, .L262+4
 2618 0624 0021     		movs	r1, #0
 2619 0626 D154     		strb	r1, [r2, r3]
 948:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2620              		.loc 3 948 38 is_stmt 1 discriminator 3 view .LVU770
 948:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2621              		.loc 3 948 39 is_stmt 0 discriminator 3 view .LVU771
 2622 0628 0133     		adds	r3, r3, #1
 2623              	.LVL252:
 2624              	.L168:
 948:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2625              		.loc 3 948 21 is_stmt 1 discriminator 1 view .LVU772
 948:Src/main.c    ****       int text_breite = generate_text((unsigned char*)args[3], textbuffer_8px_UP, 0, text_laenge, f
 2626              		.loc 3 948 7 is_stmt 0 discriminator 1 view .LVU773
 2627 062a C72B     		cmp	r3, #199
 2628 062c F9DD     		ble	.L169
 2629              	.LBE40:
 949:Src/main.c    ****       if (!text_breite) { break; }
 2630              		.loc 3 949 7 is_stmt 1 view .LVU774
 949:Src/main.c    ****       if (!text_breite) { break; }
 2631              		.loc 3 949 25 is_stmt 0 view .LVU775
 2632 062e 5FFA88F3 		uxtb	r3, r8
 2633              	.LVL253:
 949:Src/main.c    ****       if (!text_breite) { break; }
 2634              		.loc 3 949 25 view .LVU776
 2635 0632 0093     		str	r3, [sp]
 2636 0634 2346     		mov	r3, r4
 2637 0636 0022     		movs	r2, #0
 2638 0638 4F49     		ldr	r1, .L262+4
 2639 063a 2846     		mov	r0, r5
 2640 063c FFF7FEFF 		bl	generate_text
 2641              	.LVL254:
ARM GAS  /tmp/ccDqKevX.s 			page 80


 950:Src/main.c    **** 
 2642              		.loc 3 950 7 is_stmt 1 view .LVU777
 950:Src/main.c    **** 
 2643              		.loc 3 950 10 is_stmt 0 view .LVU778
 2644 0640 0446     		mov	r4, r0
 2645              	.LVL255:
 950:Src/main.c    **** 
 2646              		.loc 3 950 10 view .LVU779
 2647 0642 0028     		cmp	r0, #0
 2648 0644 3FF41BAE 		beq	.L91
 2649              	.LBB41:
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2650              		.loc 3 953 16 view .LVU780
 2651 0648 0023     		movs	r3, #0
 2652 064a 12E0     		b	.L170
 2653              	.LVL256:
 2654              	.L223:
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2655              		.loc 3 953 16 view .LVU781
 2656              	.LBE41:
 938:Src/main.c    ****         position = args[2][0];
 2657              		.loc 3 938 21 view .LVU782
 2658 064c 0027     		movs	r7, #0
 2659              	.L167:
 2660              	.LVL257:
 942:Src/main.c    ****       }
 2661              		.loc 3 942 23 discriminator 1 view .LVU783
 2662 064e 0023     		movs	r3, #0
 2663 0650 EBE7     		b	.L168
 2664              	.LVL258:
 2665              	.L224:
 938:Src/main.c    ****         position = args[2][0];
 2666              		.loc 3 938 21 view .LVU784
 2667 0652 0027     		movs	r7, #0
 2668 0654 FBE7     		b	.L167
 2669              	.L225:
 2670 0656 0027     		movs	r7, #0
 2671 0658 F9E7     		b	.L167
 2672              	.L226:
 936:Src/main.c    ****       if (args[2][0] == 'L' || args[2][0] == 'C' || args[2][0] == 'R') {
 2673              		.loc 3 936 21 view .LVU785
 2674 065a 0E46     		mov	r6, r1
 942:Src/main.c    ****       }
 2675              		.loc 3 942 23 view .LVU786
 2676 065c 0127     		movs	r7, #1
 2677 065e F6E7     		b	.L167
 2678              	.LVL259:
 2679              	.L171:
 2680              	.LBB42:
 954:Src/main.c    ****       
 2681              		.loc 3 954 9 is_stmt 1 discriminator 3 view .LVU787
 954:Src/main.c    ****       
 2682              		.loc 3 954 23 is_stmt 0 discriminator 3 view .LVU788
 2683 0660 464A     		ldr	r2, .L262+8
 2684 0662 1168     		ldr	r1, [r2]
 2685 0664 51F82320 		ldr	r2, [r1, r3, lsl #2]
 954:Src/main.c    ****       
ARM GAS  /tmp/ccDqKevX.s 			page 81


 2686              		.loc 3 954 27 discriminator 3 view .LVU789
 2687 0668 22F47F42 		bic	r2, r2, #65280
 954:Src/main.c    ****       
 2688              		.loc 3 954 17 discriminator 3 view .LVU790
 2689 066c 41F82320 		str	r2, [r1, r3, lsl #2]
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2690              		.loc 3 953 43 is_stmt 1 discriminator 3 view .LVU791
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2691              		.loc 3 953 44 is_stmt 0 discriminator 3 view .LVU792
 2692 0670 0133     		adds	r3, r3, #1
 2693              	.LVL260:
 2694              	.L170:
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2695              		.loc 3 953 21 is_stmt 1 discriminator 1 view .LVU793
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2696              		.loc 3 953 27 is_stmt 0 discriminator 1 view .LVU794
 2697 0672 404A     		ldr	r2, .L262
 2698 0674 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2699 0676 C2EBC202 		rsb	r2, r2, r2, lsl #3
 953:Src/main.c    ****         dots[i] = dots[i] & 0xFFFF00FF;
 2700              		.loc 3 953 7 discriminator 1 view .LVU795
 2701 067a B3EB820F 		cmp	r3, r2, lsl #2
 2702 067e EFDB     		blt	.L171
 2703              	.LBE42:
 957:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2704              		.loc 3 957 7 is_stmt 1 view .LVU796
 957:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2705              		.loc 3 957 11 is_stmt 0 view .LVU797
 2706 0680 3F4B     		ldr	r3, .L262+12
 2707              	.LVL261:
 957:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2708              		.loc 3 957 11 view .LVU798
 2709 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957:Src/main.c    ****         for (int i=0; i<(28 * Panelanzahl); i++) {
 2710              		.loc 3 957 10 view .LVU799
 2711 0684 4BBB     		cbnz	r3, .L227
 2712              	.L173:
 963:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 2713              		.loc 3 963 7 is_stmt 1 view .LVU800
 2714              	.LVL262:
 964:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 2715              		.loc 3 964 7 view .LVU801
 964:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 2716              		.loc 3 964 29 is_stmt 0 view .LVU802
 2717 0686 3B4B     		ldr	r3, .L262
 2718 0688 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2719 068a C3EBC302 		rsb	r2, r3, r3, lsl #3
 2720 068e 9000     		lsls	r0, r2, #2
 2721              	.LVL263:
 964:Src/main.c    ****         offset = ((Panelanzahl * 28)/2) - (text_breite/2);
 2722              		.loc 3 964 10 view .LVU803
 2723 0690 B4EB820F 		cmp	r4, r2, lsl #2
 2724 0694 23DA     		bge	.L228
 965:Src/main.c    ****       }
 2725              		.loc 3 965 9 is_stmt 1 view .LVU804
 965:Src/main.c    ****       }
 2726              		.loc 3 965 41 is_stmt 0 view .LVU805
ARM GAS  /tmp/ccDqKevX.s 			page 82


 2727 0696 5200     		lsls	r2, r2, #1
 2728 0698 D2B2     		uxtb	r2, r2
 965:Src/main.c    ****       }
 2729              		.loc 3 965 55 view .LVU806
 2730 069a 04EBD471 		add	r1, r4, r4, lsr #31
 2731 069e 4910     		asrs	r1, r1, #1
 2732 06a0 4942     		rsbs	r1, r1, #0
 965:Src/main.c    ****       }
 2733              		.loc 3 965 41 view .LVU807
 2734 06a2 C9B2     		uxtb	r1, r1
 965:Src/main.c    ****       }
 2735              		.loc 3 965 16 view .LVU808
 2736 06a4 0A44     		add	r2, r2, r1
 2737 06a6 D2B2     		uxtb	r2, r2
 2738              	.LVL264:
 2739              	.L175:
 967:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 2740              		.loc 3 967 7 is_stmt 1 view .LVU809
 967:Src/main.c    ****         text_breite = (28 * Panelanzahl);
 2741              		.loc 3 967 10 is_stmt 0 view .LVU810
 2742 06a8 A042     		cmp	r0, r4
 2743 06aa 00DC     		bgt	.L176
 968:Src/main.c    ****       if (position == 'L') // linksbÃ¼ndig
 2744              		.loc 3 968 21 view .LVU811
 2745 06ac 0446     		mov	r4, r0
 2746              	.LVL265:
 2747              	.L176:
 969:Src/main.c    ****         offset = 0;
 2748              		.loc 3 969 7 is_stmt 1 view .LVU812
 969:Src/main.c    ****         offset = 0;
 2749              		.loc 3 969 10 is_stmt 0 view .LVU813
 2750 06ae 4C2E     		cmp	r6, #76
 2751 06b0 17D0     		beq	.L256
 2752              	.LVL266:
 2753              	.L177:
 971:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 2754              		.loc 3 971 7 is_stmt 1 view .LVU814
 971:Src/main.c    ****         if (text_breite <= (28 * Panelanzahl)) {
 2755              		.loc 3 971 10 is_stmt 0 view .LVU815
 2756 06b2 522E     		cmp	r6, #82
 2757 06b4 17D0     		beq	.L257
 2758              	.LVL267:
 2759              	.L178:
 976:Src/main.c    ****         offset = position;
 2760              		.loc 3 976 7 is_stmt 1 view .LVU816
 976:Src/main.c    ****         offset = position;
 2761              		.loc 3 976 10 is_stmt 0 view .LVU817
 2762 06b6 07B9     		cbnz	r7, .L179
 2763 06b8 1646     		mov	r6, r2
 2764              	.L179:
 2765              	.LVL268:
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2766              		.loc 3 978 7 is_stmt 1 view .LVU818
 2767              	.LBB43:
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2768              		.loc 3 978 12 view .LVU819
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
ARM GAS  /tmp/ccDqKevX.s 			page 83


 2769              		.loc 3 978 16 is_stmt 0 view .LVU820
 2770 06ba 0023     		movs	r3, #0
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2771              		.loc 3 978 7 view .LVU821
 2772 06bc 2AE0     		b	.L180
 2773              	.LVL269:
 2774              	.L174:
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2775              		.loc 3 978 7 view .LVU822
 2776              	.LBE43:
 2777              	.LBB44:
 959:Src/main.c    ****       }
 2778              		.loc 3 959 11 is_stmt 1 discriminator 3 view .LVU823
 959:Src/main.c    ****       }
 2779              		.loc 3 959 15 is_stmt 0 discriminator 3 view .LVU824
 2780 06be 2F4B     		ldr	r3, .L262+8
 2781 06c0 1B68     		ldr	r3, [r3]
 959:Src/main.c    ****       }
 2782              		.loc 3 959 19 discriminator 3 view .LVU825
 2783 06c2 0021     		movs	r1, #0
 2784 06c4 43F82210 		str	r1, [r3, r2, lsl #2]
 958:Src/main.c    ****           dots[i] = 0; }
 2785              		.loc 3 958 45 is_stmt 1 discriminator 3 view .LVU826
 958:Src/main.c    ****           dots[i] = 0; }
 2786              		.loc 3 958 46 is_stmt 0 discriminator 3 view .LVU827
 2787 06c8 0132     		adds	r2, r2, #1
 2788              	.LVL270:
 2789              	.L172:
 958:Src/main.c    ****           dots[i] = 0; }
 2790              		.loc 3 958 23 is_stmt 1 discriminator 1 view .LVU828
 958:Src/main.c    ****           dots[i] = 0; }
 2791              		.loc 3 958 29 is_stmt 0 discriminator 1 view .LVU829
 2792 06ca 2A4B     		ldr	r3, .L262
 2793 06cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2794 06ce C3EBC303 		rsb	r3, r3, r3, lsl #3
 958:Src/main.c    ****           dots[i] = 0; }
 2795              		.loc 3 958 9 discriminator 1 view .LVU830
 2796 06d2 B2EB830F 		cmp	r2, r3, lsl #2
 2797 06d6 F2DB     		blt	.L174
 2798 06d8 D5E7     		b	.L173
 2799              	.LVL271:
 2800              	.L227:
 958:Src/main.c    ****           dots[i] = 0; }
 2801              		.loc 3 958 18 view .LVU831
 2802 06da 0022     		movs	r2, #0
 2803 06dc F5E7     		b	.L172
 2804              	.LVL272:
 2805              	.L228:
 958:Src/main.c    ****           dots[i] = 0; }
 2806              		.loc 3 958 18 view .LVU832
 2807              	.LBE44:
 963:Src/main.c    ****       if (text_breite < (28 * Panelanzahl)) {
 2808              		.loc 3 963 15 view .LVU833
 2809 06de 0022     		movs	r2, #0
 2810 06e0 E2E7     		b	.L175
 2811              	.LVL273:
 2812              	.L256:
ARM GAS  /tmp/ccDqKevX.s 			page 84


 970:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 2813              		.loc 3 970 16 view .LVU834
 2814 06e2 0022     		movs	r2, #0
 2815              	.LVL274:
 970:Src/main.c    ****       if (position == 'R') { // rechtsbÃ¼ndig
 2816              		.loc 3 970 16 view .LVU835
 2817 06e4 E5E7     		b	.L177
 2818              	.LVL275:
 2819              	.L257:
 972:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 2820              		.loc 3 972 9 is_stmt 1 view .LVU836
 972:Src/main.c    ****           offset = (28 * Panelanzahl) - text_breite;
 2821              		.loc 3 972 12 is_stmt 0 view .LVU837
 2822 06e6 A042     		cmp	r0, r4
 2823 06e8 07DB     		blt	.L231
 973:Src/main.c    ****         } else { offset = 0; }
 2824              		.loc 3 973 11 is_stmt 1 view .LVU838
 973:Src/main.c    ****         } else { offset = 0; }
 2825              		.loc 3 973 39 is_stmt 0 view .LVU839
 2826 06ea C3EBC303 		rsb	r3, r3, r3, lsl #3
 2827 06ee 9B00     		lsls	r3, r3, #2
 2828 06f0 DBB2     		uxtb	r3, r3
 2829 06f2 E2B2     		uxtb	r2, r4
 2830              	.LVL276:
 973:Src/main.c    ****         } else { offset = 0; }
 2831              		.loc 3 973 18 view .LVU840
 2832 06f4 9B1A     		subs	r3, r3, r2
 2833 06f6 DAB2     		uxtb	r2, r3
 2834              	.LVL277:
 973:Src/main.c    ****         } else { offset = 0; }
 2835              		.loc 3 973 18 view .LVU841
 2836 06f8 DDE7     		b	.L178
 2837              	.L231:
 974:Src/main.c    ****       }
 2838              		.loc 3 974 25 view .LVU842
 2839 06fa 0022     		movs	r2, #0
 2840              	.LVL278:
 974:Src/main.c    ****       }
 2841              		.loc 3 974 25 view .LVU843
 2842 06fc DBE7     		b	.L178
 2843              	.LVL279:
 2844              	.L182:
 2845              	.LBB45:
 979:Src/main.c    ****       }
 2846              		.loc 3 979 9 is_stmt 1 discriminator 4 view .LVU844
 979:Src/main.c    ****       }
 2847              		.loc 3 979 24 is_stmt 0 discriminator 4 view .LVU845
 2848 06fe 1F4A     		ldr	r2, .L262+8
 2849 0700 1068     		ldr	r0, [r2]
 979:Src/main.c    ****       }
 2850              		.loc 3 979 54 discriminator 4 view .LVU846
 2851 0702 1D4A     		ldr	r2, .L262+4
 2852 0704 D55C     		ldrb	r5, [r2, r3]	@ zero_extendqisi2
 979:Src/main.c    ****       }
 2853              		.loc 3 979 24 discriminator 4 view .LVU847
 2854 0706 50F82120 		ldr	r2, [r0, r1, lsl #2]
 2855 070a 42EA0522 		orr	r2, r2, r5, lsl #8
ARM GAS  /tmp/ccDqKevX.s 			page 85


 2856 070e 40F82120 		str	r2, [r0, r1, lsl #2]
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2857              		.loc 3 978 65 is_stmt 1 discriminator 4 view .LVU848
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2858              		.loc 3 978 66 is_stmt 0 discriminator 4 view .LVU849
 2859 0712 0133     		adds	r3, r3, #1
 2860              	.LVL280:
 2861              	.L180:
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2862              		.loc 3 978 21 is_stmt 1 discriminator 1 view .LVU850
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2863              		.loc 3 978 7 is_stmt 0 discriminator 1 view .LVU851
 2864 0714 9C42     		cmp	r4, r3
 2865 0716 07DD     		ble	.L181
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2866              		.loc 3 978 39 discriminator 3 view .LVU852
 2867 0718 F118     		adds	r1, r6, r3
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2868              		.loc 3 978 50 discriminator 3 view .LVU853
 2869 071a 164A     		ldr	r2, .L262
 2870 071c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2871 071e C2EBC202 		rsb	r2, r2, r2, lsl #3
 978:Src/main.c    ****         dots[i+offset] |= (uint16_t)textbuffer_8px_UP[i] << 8;
 2872              		.loc 3 978 35 discriminator 3 view .LVU854
 2873 0722 B1EB820F 		cmp	r1, r2, lsl #2
 2874 0726 EADB     		blt	.L182
 2875              	.L181:
 2876              	.LBE45:
 983:Src/main.c    ****         if (yellow_test_or_center) {
 2877              		.loc 3 983 7 is_stmt 1 view .LVU855
 983:Src/main.c    ****         if (yellow_test_or_center) {
 2878              		.loc 3 983 11 is_stmt 0 view .LVU856
 2879 0728 164B     		ldr	r3, .L262+16
 2880              	.LVL281:
 983:Src/main.c    ****         if (yellow_test_or_center) {
 2881              		.loc 3 983 11 view .LVU857
 2882 072a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 983:Src/main.c    ****         if (yellow_test_or_center) {
 2883              		.loc 3 983 10 view .LVU858
 2884 072c 2BB9     		cbnz	r3, .L183
 984:Src/main.c    ****           start_refresh = 1;
 2885              		.loc 3 984 9 is_stmt 1 view .LVU859
 984:Src/main.c    ****           start_refresh = 1;
 2886              		.loc 3 984 13 is_stmt 0 view .LVU860
 2887 072e 144B     		ldr	r3, .L262+12
 2888 0730 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 984:Src/main.c    ****           start_refresh = 1;
 2889              		.loc 3 984 12 view .LVU861
 2890 0732 4BB1     		cbz	r3, .L184
 985:Src/main.c    ****         } else {
 2891              		.loc 3 985 11 is_stmt 1 view .LVU862
 985:Src/main.c    ****         } else {
 2892              		.loc 3 985 25 is_stmt 0 view .LVU863
 2893 0734 144B     		ldr	r3, .L262+20
 2894 0736 0122     		movs	r2, #1
 2895 0738 1A70     		strb	r2, [r3]
 2896              	.L183:
ARM GAS  /tmp/ccDqKevX.s 			page 86


 990:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 2897              		.loc 3 990 7 is_stmt 1 view .LVU864
 990:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 2898              		.loc 3 990 29 is_stmt 0 view .LVU865
 2899 073a 0024     		movs	r4, #0
 2900              	.LVL282:
 990:Src/main.c    ****       yellow_test_or_UP_DOWN = 1;
 2901              		.loc 3 990 29 view .LVU866
 2902 073c 104B     		ldr	r3, .L262+12
 2903 073e 1C70     		strb	r4, [r3]
 991:Src/main.c    ****       break; }
 2904              		.loc 3 991 7 is_stmt 1 view .LVU867
 991:Src/main.c    ****       break; }
 2905              		.loc 3 991 30 is_stmt 0 view .LVU868
 2906 0740 124B     		ldr	r3, .L262+24
 2907 0742 0122     		movs	r2, #1
 2908 0744 1A70     		strb	r2, [r3]
 992:Src/main.c    **** 
 2909              		.loc 3 992 7 is_stmt 1 view .LVU869
 2910 0746 9AE5     		b	.L91
 2911              	.LVL283:
 2912              	.L184:
 987:Src/main.c    ****         }
 2913              		.loc 3 987 11 view .LVU870
 987:Src/main.c    ****         }
 2914              		.loc 3 987 30 is_stmt 0 view .LVU871
 2915 0748 114B     		ldr	r3, .L262+28
 2916 074a 0122     		movs	r2, #1
 2917 074c 1A70     		strb	r2, [r3]
 2918 074e F4E7     		b	.L183
 2919              	.LVL284:
 2920              	.L185:
 987:Src/main.c    ****         }
 2921              		.loc 3 987 30 view .LVU872
 2922              	.LBE48:
 665:Src/main.c    ****   }
 2923              		.loc 3 665 12 view .LVU873
 2924 0750 4FF0FF34 		mov	r4, #-1
 2925              	.LVL285:
 665:Src/main.c    ****   }
 2926              		.loc 3 665 12 view .LVU874
 2927 0754 93E5     		b	.L91
 2928              	.LVL286:
 2929              	.L186:
 696:Src/main.c    ****   }
 2930              		.loc 3 696 12 view .LVU875
 2931 0756 4FF0FF34 		mov	r4, #-1
 2932              	.LVL287:
 696:Src/main.c    ****   }
 2933              		.loc 3 696 12 view .LVU876
 2934 075a 90E5     		b	.L91
 2935              	.LVL288:
 2936              	.L193:
 711:Src/main.c    ****   }
 2937              		.loc 3 711 12 view .LVU877
 2938 075c 4FF0FF34 		mov	r4, #-1
 2939              	.LVL289:
ARM GAS  /tmp/ccDqKevX.s 			page 87


 711:Src/main.c    ****   }
 2940              		.loc 3 711 12 view .LVU878
 2941 0760 8DE5     		b	.L91
 2942              	.LVL290:
 2943              	.L194:
 711:Src/main.c    ****   }
 2944              		.loc 3 711 12 view .LVU879
 2945 0762 4FF0FF34 		mov	r4, #-1
 2946              	.LVL291:
 711:Src/main.c    ****   }
 2947              		.loc 3 711 12 view .LVU880
 2948 0766 8AE5     		b	.L91
 2949              	.LVL292:
 2950              	.L195:
1000:Src/main.c    **** }
 2951              		.loc 3 1000 10 view .LVU881
 2952 0768 4FF0FF34 		mov	r4, #-1
 2953 076c 87E5     		b	.L91
 2954              	.LVL293:
 2955              	.L197:
1000:Src/main.c    **** }
 2956              		.loc 3 1000 10 view .LVU882
 2957 076e 0024     		movs	r4, #0
 2958 0770 85E5     		b	.L91
 2959              	.L263:
 2960 0772 00BF     		.align	2
 2961              	.L262:
 2962 0774 00000000 		.word	Panelanzahl
 2963 0778 00000000 		.word	textbuffer_8px_UP
 2964 077c 00000000 		.word	dots
 2965 0780 00000000 		.word	.LANCHOR16
 2966 0784 00000000 		.word	.LANCHOR15
 2967 0788 00000000 		.word	.LANCHOR2
 2968 078c 00000000 		.word	.LANCHOR14
 2969 0790 00000000 		.word	.LANCHOR4
 2970              		.cfi_endproc
 2971              	.LFE75:
 2973              		.section	.text.bit_not_changed,"ax",%progbits
 2974              		.align	1
 2975              		.global	bit_not_changed
 2976              		.syntax unified
 2977              		.thumb
 2978              		.thumb_func
 2979              		.fpu softvfp
 2981              	bit_not_changed:
 2982              	.LVL294:
 2983              	.LFB81:
1245:Src/main.c    **** 
1246:Src/main.c    **** 
1247:Src/main.c    **** 
1248:Src/main.c    **** //////////////////////////////////////////////////////
1249:Src/main.c    **** // Hilfsfunktionen
1250:Src/main.c    **** //////////////////////////////////////////////////////
1251:Src/main.c    **** 
1252:Src/main.c    **** // Gibt zurÃ¼ck, ob sich ein Bit nicht geÃ¤ndert hat
1253:Src/main.c    **** uint8_t bit_not_changed(uint8_t x, uint8_t y) {
 2984              		.loc 3 1253 47 is_stmt 1 view -0
ARM GAS  /tmp/ccDqKevX.s 			page 88


 2985              		.cfi_startproc
 2986              		@ args = 0, pretend = 0, frame = 0
 2987              		@ frame_needed = 0, uses_anonymous_args = 0
 2988              		@ link register save eliminated.
1254:Src/main.c    ****   uint32_t new = dots[x]     & (0x00000001 << y);
 2989              		.loc 3 1254 3 view .LVU884
 2990              		.loc 3 1254 22 is_stmt 0 view .LVU885
 2991 0000 094B     		ldr	r3, .L267
 2992 0002 1B68     		ldr	r3, [r3]
 2993 0004 53F82020 		ldr	r2, [r3, r0, lsl #2]
 2994              		.loc 3 1254 44 view .LVU886
 2995 0008 0123     		movs	r3, #1
 2996 000a 03FA01F1 		lsl	r1, r3, r1
 2997              	.LVL295:
 2998              		.loc 3 1254 12 view .LVU887
 2999 000e 0A40     		ands	r2, r2, r1
 3000              	.LVL296:
1255:Src/main.c    ****   uint32_t old = dots_old[x] & (0x00000001 << y);
 3001              		.loc 3 1255 3 is_stmt 1 view .LVU888
 3002              		.loc 3 1255 26 is_stmt 0 view .LVU889
 3003 0010 064B     		ldr	r3, .L267+4
 3004 0012 1B68     		ldr	r3, [r3]
 3005 0014 53F82030 		ldr	r3, [r3, r0, lsl #2]
 3006              		.loc 3 1255 12 view .LVU890
 3007 0018 1940     		ands	r1, r1, r3
 3008              	.LVL297:
1256:Src/main.c    ****   if (new != old) {
 3009              		.loc 3 1256 3 is_stmt 1 view .LVU891
 3010              		.loc 3 1256 6 is_stmt 0 view .LVU892
 3011 001a 8A42     		cmp	r2, r1
 3012 001c 01D0     		beq	.L266
1257:Src/main.c    ****     return 0x00; // bit changed
 3013              		.loc 3 1257 12 view .LVU893
 3014 001e 0020     		movs	r0, #0
 3015              	.LVL298:
 3016              		.loc 3 1257 12 view .LVU894
 3017 0020 7047     		bx	lr
 3018              	.LVL299:
 3019              	.L266:
1258:Src/main.c    ****   } else {
1259:Src/main.c    ****     return 0xFF; // bit not changed
 3020              		.loc 3 1259 12 view .LVU895
 3021 0022 FF20     		movs	r0, #255
 3022              	.LVL300:
1260:Src/main.c    ****   }
1261:Src/main.c    **** }
 3023              		.loc 3 1261 1 view .LVU896
 3024 0024 7047     		bx	lr
 3025              	.L268:
 3026 0026 00BF     		.align	2
 3027              	.L267:
 3028 0028 00000000 		.word	dots
 3029 002c 00000000 		.word	dots_old
 3030              		.cfi_endproc
 3031              	.LFE81:
 3033              		.section	.text.Write_Dots,"ax",%progbits
 3034              		.align	1
ARM GAS  /tmp/ccDqKevX.s 			page 89


 3035              		.global	Write_Dots
 3036              		.syntax unified
 3037              		.thumb
 3038              		.thumb_func
 3039              		.fpu softvfp
 3041              	Write_Dots:
 3042              	.LVL301:
 3043              	.LFB79:
1142:Src/main.c    **** 
 3044              		.loc 3 1142 77 is_stmt 1 view -0
 3045              		.cfi_startproc
 3046              		@ args = 0, pretend = 0, frame = 0
 3047              		@ frame_needed = 0, uses_anonymous_args = 0
1142:Src/main.c    **** 
 3048              		.loc 3 1142 77 is_stmt 0 view .LVU898
 3049 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3050              	.LCFI17:
 3051              		.cfi_def_cfa_offset 40
 3052              		.cfi_offset 3, -40
 3053              		.cfi_offset 4, -36
 3054              		.cfi_offset 5, -32
 3055              		.cfi_offset 6, -28
 3056              		.cfi_offset 7, -24
 3057              		.cfi_offset 8, -20
 3058              		.cfi_offset 9, -16
 3059              		.cfi_offset 10, -12
 3060              		.cfi_offset 11, -8
 3061              		.cfi_offset 14, -4
 3062 0004 0646     		mov	r6, r0
 3063 0006 8A46     		mov	r10, r1
 3064 0008 9346     		mov	fp, r2
 3065 000a 9946     		mov	r9, r3
1145:Src/main.c    **** 
 3066              		.loc 3 1145 3 is_stmt 1 view .LVU899
 3067 000c 0122     		movs	r2, #1
 3068              	.LVL302:
1145:Src/main.c    **** 
 3069              		.loc 3 1145 3 is_stmt 0 view .LVU900
 3070 000e 4FF48071 		mov	r1, #256
 3071              	.LVL303:
1145:Src/main.c    **** 
 3072              		.loc 3 1145 3 view .LVU901
 3073 0012 3948     		ldr	r0, .L287
 3074              	.LVL304:
1145:Src/main.c    **** 
 3075              		.loc 3 1145 3 view .LVU902
 3076 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3077              	.LVL305:
1148:Src/main.c    ****   uint8_t y_max = 0;
 3078              		.loc 3 1148 3 is_stmt 1 view .LVU903
1148:Src/main.c    ****   uint8_t y_max = 0;
 3079              		.loc 3 1148 11 is_stmt 0 view .LVU904
 3080 0018 384B     		ldr	r3, .L287+4
 3081 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3082 001c C3EBC303 		rsb	r3, r3, r3, lsl #3
 3083 0020 9B00     		lsls	r3, r3, #2
 3084 0022 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccDqKevX.s 			page 90


 3085              	.LVL306:
1149:Src/main.c    ****   if (Paneltyp == LAWO)  { y_max = 16; }  // Lawo
 3086              		.loc 3 1149 3 is_stmt 1 view .LVU905
1150:Src/main.c    ****   if (Paneltyp == BROSE) { y_max = 19; }  // Brose
 3087              		.loc 3 1150 3 view .LVU906
1150:Src/main.c    ****   if (Paneltyp == BROSE) { y_max = 19; }  // Brose
 3088              		.loc 3 1150 16 is_stmt 0 view .LVU907
 3089 0024 364A     		ldr	r2, .L287+8
 3090 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
1150:Src/main.c    ****   if (Paneltyp == BROSE) { y_max = 19; }  // Brose
 3091              		.loc 3 1150 6 view .LVU908
 3092 0028 7AB1     		cbz	r2, .L279
1149:Src/main.c    ****   if (Paneltyp == LAWO)  { y_max = 16; }  // Lawo
 3093              		.loc 3 1149 11 view .LVU909
 3094 002a 0021     		movs	r1, #0
 3095              	.L270:
 3096              	.LVL307:
1151:Src/main.c    **** 
 3097              		.loc 3 1151 3 is_stmt 1 view .LVU910
1151:Src/main.c    **** 
 3098              		.loc 3 1151 6 is_stmt 0 view .LVU911
 3099 002c 012A     		cmp	r2, #1
 3100 002e 0ED0     		beq	.L284
 3101              	.LVL308:
 3102              	.L271:
1154:Src/main.c    ****   if (from_y >= y_max || to_y >= y_max || from_y > to_y) { return; }
 3103              		.loc 3 1154 3 is_stmt 1 view .LVU912
1154:Src/main.c    ****   if (from_y >= y_max || to_y >= y_max || from_y > to_y) { return; }
 3104              		.loc 3 1154 6 is_stmt 0 view .LVU913
 3105 0030 B342     		cmp	r3, r6
 3106 0032 5ED9     		bls	.L269
1154:Src/main.c    ****   if (from_y >= y_max || to_y >= y_max || from_y > to_y) { return; }
 3107              		.loc 3 1154 23 discriminator 2 view .LVU914
 3108 0034 5345     		cmp	r3, r10
 3109 0036 5CD9     		bls	.L269
1154:Src/main.c    ****   if (from_y >= y_max || to_y >= y_max || from_y > to_y) { return; }
 3110              		.loc 3 1154 40 discriminator 4 view .LVU915
 3111 0038 5645     		cmp	r6, r10
 3112 003a 5AD8     		bhi	.L269
1155:Src/main.c    **** 
 3113              		.loc 3 1155 3 is_stmt 1 view .LVU916
1155:Src/main.c    **** 
 3114              		.loc 3 1155 6 is_stmt 0 view .LVU917
 3115 003c 5945     		cmp	r1, fp
 3116 003e 58D9     		bls	.L269
1155:Src/main.c    **** 
 3117              		.loc 3 1155 23 discriminator 2 view .LVU918
 3118 0040 4945     		cmp	r1, r9
 3119 0042 56D9     		bls	.L269
1155:Src/main.c    **** 
 3120              		.loc 3 1155 40 discriminator 4 view .LVU919
 3121 0044 CB45     		cmp	fp, r9
 3122 0046 4AD9     		bls	.L273
 3123 0048 53E0     		b	.L269
 3124              	.LVL309:
 3125              	.L279:
1150:Src/main.c    ****   if (Paneltyp == BROSE) { y_max = 19; }  // Brose
ARM GAS  /tmp/ccDqKevX.s 			page 91


 3126              		.loc 3 1150 34 view .LVU920
 3127 004a 1021     		movs	r1, #16
 3128 004c EEE7     		b	.L270
 3129              	.LVL310:
 3130              	.L284:
1151:Src/main.c    **** 
 3131              		.loc 3 1151 34 view .LVU921
 3132 004e 1321     		movs	r1, #19
 3133              	.LVL311:
1151:Src/main.c    **** 
 3134              		.loc 3 1151 34 view .LVU922
 3135 0050 EEE7     		b	.L271
 3136              	.LVL312:
 3137              	.L281:
 3138              	.LBB49:
 3139              	.LBB50:
 3140              	.LBB51:
1165:Src/main.c    **** 
 3141              		.loc 3 1165 31 view .LVU923
 3142 0052 0127     		movs	r7, #1
 3143 0054 36E0     		b	.L274
 3144              	.LVL313:
 3145              	.L275:
1176:Src/main.c    ****         Zeile_aktivieren(Zeile, dot);
 3146              		.loc 3 1176 9 is_stmt 1 view .LVU924
 3147 0056 B408     		lsrs	r4, r6, #2
 3148 0058 2A48     		ldr	r0, .L287+12
 3149 005a A0FB0434 		umull	r3, r4, r0, r4
 3150 005e 5FFA84F8 		uxtb	r8, r4
 3151 0062 A4EBC404 		sub	r4, r4, r4, lsl #3
 3152 0066 06EB8400 		add	r0, r6, r4, lsl #2
 3153 006a 87F00101 		eor	r1, r7, #1
 3154 006e C0B2     		uxtb	r0, r0
 3155 0070 FFF7FEFF 		bl	Spalte_aktivieren
 3156              	.LVL314:
1177:Src/main.c    **** 
 3157              		.loc 3 1177 9 view .LVU925
 3158 0074 3946     		mov	r1, r7
 3159 0076 2846     		mov	r0, r5
 3160 0078 FFF7FEFF 		bl	Zeile_aktivieren
 3161              	.LVL315:
1180:Src/main.c    ****         HAL_GPIO_WritePin(Zeilen_OE_GPIO_Port, Zeilen_OE_Pin, 1);
 3162              		.loc 3 1180 9 view .LVU926
 3163 007c 0121     		movs	r1, #1
 3164 007e 4046     		mov	r0, r8
 3165 0080 FFF7FEFF 		bl	Modul_aktivieren
 3166              	.LVL316:
1181:Src/main.c    **** 
 3167              		.loc 3 1181 9 view .LVU927
 3168 0084 204C     		ldr	r4, .L287+16
 3169 0086 0122     		movs	r2, #1
 3170 0088 1021     		movs	r1, #16
 3171 008a 2046     		mov	r0, r4
 3172 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 3173              	.LVL317:
1184:Src/main.c    **** 
 3174              		.loc 3 1184 9 view .LVU928
ARM GAS  /tmp/ccDqKevX.s 			page 92


 3175 0090 4FF47A70 		mov	r0, #1000
 3176 0094 FFF7FEFF 		bl	delay_us
 3177              	.LVL318:
1187:Src/main.c    ****         Modul_aktivieren(Spalte/28, 0);
 3178              		.loc 3 1187 9 view .LVU929
 3179 0098 0122     		movs	r2, #1
 3180 009a 1021     		movs	r1, #16
 3181 009c 2046     		mov	r0, r4
 3182 009e FFF7FEFF 		bl	HAL_GPIO_WritePin
 3183              	.LVL319:
1188:Src/main.c    ****       }
 3184              		.loc 3 1188 9 view .LVU930
 3185 00a2 0021     		movs	r1, #0
 3186 00a4 4046     		mov	r0, r8
 3187 00a6 FFF7FEFF 		bl	Modul_aktivieren
 3188              	.LVL320:
 3189              	.L276:
 3190              	.LBE51:
1159:Src/main.c    **** 
 3191              		.loc 3 1159 49 discriminator 2 view .LVU931
1159:Src/main.c    **** 
 3192              		.loc 3 1159 54 is_stmt 0 discriminator 2 view .LVU932
 3193 00aa 0135     		adds	r5, r5, #1
 3194              	.LVL321:
1159:Src/main.c    **** 
 3195              		.loc 3 1159 54 discriminator 2 view .LVU933
 3196 00ac EDB2     		uxtb	r5, r5
 3197              	.LVL322:
 3198              	.L278:
1159:Src/main.c    **** 
 3199              		.loc 3 1159 34 is_stmt 1 discriminator 1 view .LVU934
1159:Src/main.c    **** 
 3200              		.loc 3 1159 5 is_stmt 0 discriminator 1 view .LVU935
 3201 00ae 4D45     		cmp	r5, r9
 3202 00b0 13D8     		bhi	.L285
 3203              	.LBB52:
1162:Src/main.c    ****       uint8_t dot = 0;
 3204              		.loc 3 1162 7 is_stmt 1 view .LVU936
 3205              	.LVL323:
1163:Src/main.c    ****       uint32_t current_data = dots[Spalte] & (0x00000001 << Zeile);
 3206              		.loc 3 1163 7 view .LVU937
1164:Src/main.c    ****       if (current_data) { dot = 1; }
 3207              		.loc 3 1164 7 view .LVU938
1164:Src/main.c    ****       if (current_data) { dot = 1; }
 3208              		.loc 3 1164 35 is_stmt 0 view .LVU939
 3209 00b2 164B     		ldr	r3, .L287+20
 3210 00b4 1B68     		ldr	r3, [r3]
 3211 00b6 53F82620 		ldr	r2, [r3, r6, lsl #2]
1164:Src/main.c    ****       if (current_data) { dot = 1; }
 3212              		.loc 3 1164 58 view .LVU940
 3213 00ba 0123     		movs	r3, #1
 3214 00bc AB40     		lsls	r3, r3, r5
 3215              	.LVL324:
1165:Src/main.c    **** 
 3216              		.loc 3 1165 7 is_stmt 1 view .LVU941
1165:Src/main.c    **** 
 3217              		.loc 3 1165 10 is_stmt 0 view .LVU942
ARM GAS  /tmp/ccDqKevX.s 			page 93


 3218 00be 1A42     		tst	r2, r3
 3219 00c0 C7D1     		bne	.L281
1163:Src/main.c    ****       uint32_t current_data = dots[Spalte] & (0x00000001 << Zeile);
 3220              		.loc 3 1163 15 view .LVU943
 3221 00c2 0027     		movs	r7, #0
 3222              	.L274:
 3223              	.LVL325:
1168:Src/main.c    ****         skip |= bit_not_changed(Spalte, Zeile);
 3224              		.loc 3 1168 7 is_stmt 1 view .LVU944
1168:Src/main.c    ****         skip |= bit_not_changed(Spalte, Zeile);
 3225              		.loc 3 1168 11 is_stmt 0 view .LVU945
 3226 00c4 124B     		ldr	r3, .L287+24
 3227              	.LVL326:
1168:Src/main.c    ****         skip |= bit_not_changed(Spalte, Zeile);
 3228              		.loc 3 1168 11 view .LVU946
 3229 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1168:Src/main.c    ****         skip |= bit_not_changed(Spalte, Zeile);
 3230              		.loc 3 1168 10 view .LVU947
 3231 00c8 002B     		cmp	r3, #0
 3232 00ca C4D0     		beq	.L275
1169:Src/main.c    ****       }
 3233              		.loc 3 1169 9 is_stmt 1 view .LVU948
1169:Src/main.c    ****       }
 3234              		.loc 3 1169 17 is_stmt 0 view .LVU949
 3235 00cc 2946     		mov	r1, r5
 3236 00ce 3046     		mov	r0, r6
 3237 00d0 FFF7FEFF 		bl	bit_not_changed
 3238              	.LVL327:
1173:Src/main.c    **** 
 3239              		.loc 3 1173 7 is_stmt 1 view .LVU950
1173:Src/main.c    **** 
 3240              		.loc 3 1173 10 is_stmt 0 view .LVU951
 3241 00d4 0028     		cmp	r0, #0
 3242 00d6 E8D1     		bne	.L276
 3243 00d8 BDE7     		b	.L275
 3244              	.LVL328:
 3245              	.L285:
1173:Src/main.c    **** 
 3246              		.loc 3 1173 10 view .LVU952
 3247              	.LBE52:
 3248              	.LBE50:
1158:Src/main.c    ****     for (uint8_t Zeile = from_y; Zeile <= to_y; Zeile++) {
 3249              		.loc 3 1158 49 is_stmt 1 discriminator 2 view .LVU953
1158:Src/main.c    ****     for (uint8_t Zeile = from_y; Zeile <= to_y; Zeile++) {
 3250              		.loc 3 1158 55 is_stmt 0 discriminator 2 view .LVU954
 3251 00da 0136     		adds	r6, r6, #1
 3252              	.LVL329:
1158:Src/main.c    ****     for (uint8_t Zeile = from_y; Zeile <= to_y; Zeile++) {
 3253              		.loc 3 1158 55 discriminator 2 view .LVU955
 3254 00dc F6B2     		uxtb	r6, r6
 3255              	.LVL330:
 3256              	.L273:
1158:Src/main.c    ****     for (uint8_t Zeile = from_y; Zeile <= to_y; Zeile++) {
 3257              		.loc 3 1158 33 is_stmt 1 discriminator 1 view .LVU956
1158:Src/main.c    ****     for (uint8_t Zeile = from_y; Zeile <= to_y; Zeile++) {
 3258              		.loc 3 1158 3 is_stmt 0 discriminator 1 view .LVU957
 3259 00de 5645     		cmp	r6, r10
ARM GAS  /tmp/ccDqKevX.s 			page 94


 3260 00e0 01D8     		bhi	.L286
 3261              	.LBB53:
1159:Src/main.c    **** 
 3262              		.loc 3 1159 18 view .LVU958
 3263 00e2 5D46     		mov	r5, fp
 3264 00e4 E3E7     		b	.L278
 3265              	.L286:
 3266              	.LBE53:
 3267              	.LBE49:
1194:Src/main.c    **** }
 3268              		.loc 3 1194 3 is_stmt 1 view .LVU959
 3269 00e6 0022     		movs	r2, #0
 3270 00e8 4FF48071 		mov	r1, #256
 3271 00ec 0248     		ldr	r0, .L287
 3272 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 3273              	.LVL331:
 3274              	.L269:
1195:Src/main.c    **** 
 3275              		.loc 3 1195 1 is_stmt 0 view .LVU960
 3276 00f2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3277              	.L288:
 3278 00f6 00BF     		.align	2
 3279              	.L287:
 3280 00f8 000C0140 		.word	1073810432
 3281 00fc 00000000 		.word	Panelanzahl
 3282 0100 00000000 		.word	Paneltyp
 3283 0104 25499224 		.word	613566757
 3284 0108 00080140 		.word	1073809408
 3285 010c 00000000 		.word	dots
 3286 0110 00000000 		.word	.LANCHOR17
 3287              		.cfi_endproc
 3288              	.LFE79:
 3290              		.section	.text.save_written_dots,"ax",%progbits
 3291              		.align	1
 3292              		.global	save_written_dots
 3293              		.syntax unified
 3294              		.thumb
 3295              		.thumb_func
 3296              		.fpu softvfp
 3298              	save_written_dots:
 3299              	.LFB82:
1262:Src/main.c    **** 
1263:Src/main.c    **** // Speichert ein Backup vom Pixelbuffer 
1264:Src/main.c    **** void save_written_dots(void) {
 3300              		.loc 3 1264 30 is_stmt 1 view -0
 3301              		.cfi_startproc
 3302              		@ args = 0, pretend = 0, frame = 0
 3303              		@ frame_needed = 0, uses_anonymous_args = 0
 3304              		@ link register save eliminated.
1265:Src/main.c    ****   if (enable_fast_refresh) {
 3305              		.loc 3 1265 3 view .LVU962
 3306              		.loc 3 1265 7 is_stmt 0 view .LVU963
 3307 0000 0B4B     		ldr	r3, .L295
 3308 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3309              		.loc 3 1265 6 view .LVU964
 3310 0004 03B9     		cbnz	r3, .L293
 3311              	.LBB54:
ARM GAS  /tmp/ccDqKevX.s 			page 95


 3312 0006 7047     		bx	lr
 3313              	.L293:
1266:Src/main.c    ****       for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3314              		.loc 3 1266 20 view .LVU965
 3315 0008 0023     		movs	r3, #0
 3316              	.L290:
 3317              	.LVL332:
 3318              		.loc 3 1266 25 is_stmt 1 discriminator 1 view .LVU966
 3319              		.loc 3 1266 41 is_stmt 0 discriminator 1 view .LVU967
 3320 000a 0A4A     		ldr	r2, .L295+4
 3321 000c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3322 000e C2EBC202 		rsb	r2, r2, r2, lsl #3
 3323 0012 9100     		lsls	r1, r2, #2
 3324              		.loc 3 1266 7 discriminator 1 view .LVU968
 3325 0014 8B42     		cmp	r3, r1
 3326 0016 0ADA     		bge	.L294
1267:Src/main.c    ****         dots_old[i] = dots[i];
 3327              		.loc 3 1267 9 is_stmt 1 discriminator 3 view .LVU969
 3328              		.loc 3 1267 17 is_stmt 0 discriminator 3 view .LVU970
 3329 0018 074A     		ldr	r2, .L295+8
 3330 001a 1268     		ldr	r2, [r2]
 3331              		.loc 3 1267 27 discriminator 3 view .LVU971
 3332 001c 0749     		ldr	r1, .L295+12
 3333 001e 0968     		ldr	r1, [r1]
 3334 0020 51F82310 		ldr	r1, [r1, r3, lsl #2]
 3335              		.loc 3 1267 21 discriminator 3 view .LVU972
 3336 0024 42F82310 		str	r1, [r2, r3, lsl #2]
1266:Src/main.c    ****       for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3337              		.loc 3 1266 47 is_stmt 1 discriminator 3 view .LVU973
1266:Src/main.c    ****       for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3338              		.loc 3 1266 48 is_stmt 0 discriminator 3 view .LVU974
 3339 0028 0133     		adds	r3, r3, #1
 3340              	.LVL333:
1266:Src/main.c    ****       for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3341              		.loc 3 1266 48 discriminator 3 view .LVU975
 3342 002a DBB2     		uxtb	r3, r3
 3343              	.LVL334:
1266:Src/main.c    ****       for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3344              		.loc 3 1266 48 discriminator 3 view .LVU976
 3345 002c EDE7     		b	.L290
 3346              	.L294:
1266:Src/main.c    ****       for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3347              		.loc 3 1266 48 discriminator 3 view .LVU977
 3348              	.LBE54:
1268:Src/main.c    ****   }
1269:Src/main.c    ****   return;
1270:Src/main.c    **** }
 3349              		.loc 3 1270 1 view .LVU978
 3350 002e 7047     		bx	lr
 3351              	.L296:
 3352              		.align	2
 3353              	.L295:
 3354 0030 00000000 		.word	.LANCHOR17
 3355 0034 00000000 		.word	Panelanzahl
 3356 0038 00000000 		.word	dots_old
 3357 003c 00000000 		.word	dots
 3358              		.cfi_endproc
ARM GAS  /tmp/ccDqKevX.s 			page 96


 3359              	.LFE82:
 3361              		.section	.text._Error_Handler,"ax",%progbits
 3362              		.align	1
 3363              		.global	_Error_Handler
 3364              		.syntax unified
 3365              		.thumb
 3366              		.thumb_func
 3367              		.fpu softvfp
 3369              	_Error_Handler:
 3370              	.LFB83:
1271:Src/main.c    **** 
1272:Src/main.c    **** 
1273:Src/main.c    **** 
1274:Src/main.c    **** 
1275:Src/main.c    **** 
1276:Src/main.c    **** /* USER CODE END 4 */
1277:Src/main.c    **** 
1278:Src/main.c    **** /**
1279:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1280:Src/main.c    ****   * @param  file: The file name as string.
1281:Src/main.c    ****   * @param  line: The line in file as a number.
1282:Src/main.c    ****   * @retval None
1283:Src/main.c    ****   */
1284:Src/main.c    **** void _Error_Handler(char *file, int line)
1285:Src/main.c    **** {
 3371              		.loc 3 1285 1 is_stmt 1 view -0
 3372              		.cfi_startproc
 3373              		@ Volatile: function does not return.
 3374              		@ args = 0, pretend = 0, frame = 0
 3375              		@ frame_needed = 0, uses_anonymous_args = 0
 3376              		@ link register save eliminated.
 3377              	.LVL335:
 3378              	.L298:
1286:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
1287:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
1288:Src/main.c    ****   while(1)
 3379              		.loc 3 1288 3 discriminator 1 view .LVU980
1289:Src/main.c    ****   {
1290:Src/main.c    ****   }
 3380              		.loc 3 1290 3 discriminator 1 view .LVU981
1288:Src/main.c    ****   {
 3381              		.loc 3 1288 8 discriminator 1 view .LVU982
 3382 0000 FEE7     		b	.L298
 3383              		.cfi_endproc
 3384              	.LFE83:
 3386              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 3387              		.align	2
 3388              	.LC10:
 3389 0000 5372632F 		.ascii	"Src/main.c\000"
 3389      6D61696E 
 3389      2E6300
 3390              		.section	.text.SystemClock_Config,"ax",%progbits
 3391              		.align	1
 3392              		.global	SystemClock_Config
 3393              		.syntax unified
 3394              		.thumb
 3395              		.thumb_func
ARM GAS  /tmp/ccDqKevX.s 			page 97


 3396              		.fpu softvfp
 3398              	SystemClock_Config:
 3399              	.LFB71:
 533:Src/main.c    **** 
 3400              		.loc 3 533 1 view -0
 3401              		.cfi_startproc
 3402              		@ args = 0, pretend = 0, frame = 64
 3403              		@ frame_needed = 0, uses_anonymous_args = 0
 3404 0000 00B5     		push	{lr}
 3405              	.LCFI18:
 3406              		.cfi_def_cfa_offset 4
 3407              		.cfi_offset 14, -4
 3408 0002 91B0     		sub	sp, sp, #68
 3409              	.LCFI19:
 3410              		.cfi_def_cfa_offset 72
 535:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 3411              		.loc 3 535 3 view .LVU984
 536:Src/main.c    **** 
 3412              		.loc 3 536 3 view .LVU985
 540:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 3413              		.loc 3 540 3 view .LVU986
 540:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 3414              		.loc 3 540 36 is_stmt 0 view .LVU987
 3415 0004 0122     		movs	r2, #1
 3416 0006 0692     		str	r2, [sp, #24]
 541:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 3417              		.loc 3 541 3 is_stmt 1 view .LVU988
 541:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 3418              		.loc 3 541 30 is_stmt 0 view .LVU989
 3419 0008 4FF48033 		mov	r3, #65536
 3420 000c 0793     		str	r3, [sp, #28]
 542:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 3421              		.loc 3 542 3 is_stmt 1 view .LVU990
 542:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 3422              		.loc 3 542 36 is_stmt 0 view .LVU991
 3423 000e 0021     		movs	r1, #0
 3424 0010 0891     		str	r1, [sp, #32]
 543:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 3425              		.loc 3 543 3 is_stmt 1 view .LVU992
 543:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 3426              		.loc 3 543 30 is_stmt 0 view .LVU993
 3427 0012 0A92     		str	r2, [sp, #40]
 544:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 3428              		.loc 3 544 3 is_stmt 1 view .LVU994
 544:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 3429              		.loc 3 544 34 is_stmt 0 view .LVU995
 3430 0014 0222     		movs	r2, #2
 3431 0016 0D92     		str	r2, [sp, #52]
 545:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 3432              		.loc 3 545 3 is_stmt 1 view .LVU996
 545:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 3433              		.loc 3 545 35 is_stmt 0 view .LVU997
 3434 0018 0E93     		str	r3, [sp, #56]
 546:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 3435              		.loc 3 546 3 is_stmt 1 view .LVU998
 546:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 3436              		.loc 3 546 32 is_stmt 0 view .LVU999
ARM GAS  /tmp/ccDqKevX.s 			page 98


 3437 001a 4FF4E013 		mov	r3, #1835008
 3438 001e 0F93     		str	r3, [sp, #60]
 547:Src/main.c    ****   {
 3439              		.loc 3 547 3 is_stmt 1 view .LVU1000
 547:Src/main.c    ****   {
 3440              		.loc 3 547 7 is_stmt 0 view .LVU1001
 3441 0020 06A8     		add	r0, sp, #24
 3442 0022 FFF7FEFF 		bl	HAL_RCC_OscConfig
 3443              	.LVL336:
 547:Src/main.c    ****   {
 3444              		.loc 3 547 6 view .LVU1002
 3445 0026 08BB     		cbnz	r0, .L303
 554:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 3446              		.loc 3 554 3 is_stmt 1 view .LVU1003
 554:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 3447              		.loc 3 554 31 is_stmt 0 view .LVU1004
 3448 0028 0F23     		movs	r3, #15
 3449 002a 0193     		str	r3, [sp, #4]
 556:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 3450              		.loc 3 556 3 is_stmt 1 view .LVU1005
 556:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 3451              		.loc 3 556 34 is_stmt 0 view .LVU1006
 3452 002c 0221     		movs	r1, #2
 3453 002e 0291     		str	r1, [sp, #8]
 557:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 3454              		.loc 3 557 3 is_stmt 1 view .LVU1007
 557:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 3455              		.loc 3 557 35 is_stmt 0 view .LVU1008
 3456 0030 0023     		movs	r3, #0
 3457 0032 0393     		str	r3, [sp, #12]
 558:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 3458              		.loc 3 558 3 is_stmt 1 view .LVU1009
 558:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 3459              		.loc 3 558 36 is_stmt 0 view .LVU1010
 3460 0034 4FF48062 		mov	r2, #1024
 3461 0038 0492     		str	r2, [sp, #16]
 559:Src/main.c    **** 
 3462              		.loc 3 559 3 is_stmt 1 view .LVU1011
 559:Src/main.c    **** 
 3463              		.loc 3 559 36 is_stmt 0 view .LVU1012
 3464 003a 0593     		str	r3, [sp, #20]
 561:Src/main.c    ****   {
 3465              		.loc 3 561 3 is_stmt 1 view .LVU1013
 561:Src/main.c    ****   {
 3466              		.loc 3 561 7 is_stmt 0 view .LVU1014
 3467 003c 01A8     		add	r0, sp, #4
 3468 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 3469              	.LVL337:
 561:Src/main.c    ****   {
 3470              		.loc 3 561 6 view .LVU1015
 3471 0042 C0B9     		cbnz	r0, .L304
 568:Src/main.c    **** 
 3472              		.loc 3 568 3 is_stmt 1 view .LVU1016
 568:Src/main.c    **** 
 3473              		.loc 3 568 22 is_stmt 0 view .LVU1017
 3474 0044 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 3475              	.LVL338:
ARM GAS  /tmp/ccDqKevX.s 			page 99


 568:Src/main.c    **** 
 3476              		.loc 3 568 3 view .LVU1018
 3477 0048 0D4B     		ldr	r3, .L305
 3478 004a A3FB0030 		umull	r3, r0, r3, r0
 3479 004e 8009     		lsrs	r0, r0, #6
 3480 0050 FFF7FEFF 		bl	HAL_SYSTICK_Config
 3481              	.LVL339:
 572:Src/main.c    **** 
 3482              		.loc 3 572 3 is_stmt 1 view .LVU1019
 3483 0054 0420     		movs	r0, #4
 3484 0056 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 3485              	.LVL340:
 575:Src/main.c    **** }
 3486              		.loc 3 575 3 view .LVU1020
 3487 005a 0022     		movs	r2, #0
 3488 005c 1146     		mov	r1, r2
 3489 005e 4FF0FF30 		mov	r0, #-1
 3490 0062 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 3491              	.LVL341:
 576:Src/main.c    **** 
 3492              		.loc 3 576 1 is_stmt 0 view .LVU1021
 3493 0066 11B0     		add	sp, sp, #68
 3494              	.LCFI20:
 3495              		.cfi_remember_state
 3496              		.cfi_def_cfa_offset 4
 3497              		@ sp needed
 3498 0068 5DF804FB 		ldr	pc, [sp], #4
 3499              	.L303:
 3500              	.LCFI21:
 3501              		.cfi_restore_state
 549:Src/main.c    ****   }
 3502              		.loc 3 549 5 is_stmt 1 view .LVU1022
 3503 006c 40F22521 		movw	r1, #549
 3504 0070 0448     		ldr	r0, .L305+4
 3505 0072 FFF7FEFF 		bl	_Error_Handler
 3506              	.LVL342:
 3507              	.L304:
 563:Src/main.c    ****   }
 3508              		.loc 3 563 5 view .LVU1023
 3509 0076 40F23321 		movw	r1, #563
 3510 007a 0248     		ldr	r0, .L305+4
 3511 007c FFF7FEFF 		bl	_Error_Handler
 3512              	.LVL343:
 3513              	.L306:
 3514              		.align	2
 3515              	.L305:
 3516 0080 D34D6210 		.word	274877907
 3517 0084 00000000 		.word	.LC10
 3518              		.cfi_endproc
 3519              	.LFE71:
 3521              		.section	.text.main,"ax",%progbits
 3522              		.align	1
 3523              		.global	main
 3524              		.syntax unified
 3525              		.thumb
 3526              		.thumb_func
 3527              		.fpu softvfp
ARM GAS  /tmp/ccDqKevX.s 			page 100


 3529              	main:
 3530              	.LFB70:
 213:Src/main.c    ****   /* USER CODE BEGIN 1 */
 3531              		.loc 3 213 1 view -0
 3532              		.cfi_startproc
 3533              		@ args = 0, pretend = 0, frame = 0
 3534              		@ frame_needed = 0, uses_anonymous_args = 0
 3535 0000 10B5     		push	{r4, lr}
 3536              	.LCFI22:
 3537              		.cfi_def_cfa_offset 8
 3538              		.cfi_offset 4, -8
 3539              		.cfi_offset 14, -4
 221:Src/main.c    **** 
 3540              		.loc 3 221 3 view .LVU1025
 3541 0002 FFF7FEFF 		bl	HAL_Init
 3542              	.LVL344:
 228:Src/main.c    **** 
 3543              		.loc 3 228 3 view .LVU1026
 3544 0006 FFF7FEFF 		bl	SystemClock_Config
 3545              	.LVL345:
 235:Src/main.c    ****   MX_SPI1_Init();
 3546              		.loc 3 235 3 view .LVU1027
 3547 000a FFF7FEFF 		bl	MX_GPIO_Init
 3548              	.LVL346:
 236:Src/main.c    ****   MX_SPI2_Init();
 3549              		.loc 3 236 3 view .LVU1028
 3550 000e FFF7FEFF 		bl	MX_SPI1_Init
 3551              	.LVL347:
 237:Src/main.c    ****   MX_USART1_UART_Init();
 3552              		.loc 3 237 3 view .LVU1029
 3553 0012 FFF7FEFF 		bl	MX_SPI2_Init
 3554              	.LVL348:
 238:Src/main.c    ****   MX_TIM2_Init();
 3555              		.loc 3 238 3 view .LVU1030
 3556 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 3557              	.LVL349:
 239:Src/main.c    ****   /* USER CODE BEGIN 2 */
 3558              		.loc 3 239 3 view .LVU1031
 3559 001a FFF7FEFF 		bl	MX_TIM2_Init
 3560              	.LVL350:
 251:Src/main.c    ****     Paneltyp = BROSE; // ON
 3561              		.loc 3 251 3 view .LVU1032
 251:Src/main.c    ****     Paneltyp = BROSE; // ON
 3562              		.loc 3 251 7 is_stmt 0 view .LVU1033
 3563 001e 0821     		movs	r1, #8
 3564 0020 A648     		ldr	r0, .L374
 3565 0022 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3566              	.LVL351:
 251:Src/main.c    ****     Paneltyp = BROSE; // ON
 3567              		.loc 3 251 5 view .LVU1034
 3568 0026 0028     		cmp	r0, #0
 3569 0028 3AD1     		bne	.L308
 252:Src/main.c    ****   } else {
 3570              		.loc 3 252 5 is_stmt 1 view .LVU1035
 252:Src/main.c    ****   } else {
 3571              		.loc 3 252 14 is_stmt 0 view .LVU1036
 3572 002a A54B     		ldr	r3, .L374+4
ARM GAS  /tmp/ccDqKevX.s 			page 101


 3573 002c 0122     		movs	r2, #1
 3574 002e 1A70     		strb	r2, [r3]
 3575              	.L309:
 261:Src/main.c    ****     Panelanzahl = 4; // ON (Brose)
 3576              		.loc 3 261 3 is_stmt 1 view .LVU1037
 261:Src/main.c    ****     Panelanzahl = 4; // ON (Brose)
 3577              		.loc 3 261 7 is_stmt 0 view .LVU1038
 3578 0030 1021     		movs	r1, #16
 3579 0032 A248     		ldr	r0, .L374
 3580 0034 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3581              	.LVL352:
 261:Src/main.c    ****     Panelanzahl = 4; // ON (Brose)
 3582              		.loc 3 261 5 view .LVU1039
 3583 0038 0028     		cmp	r0, #0
 3584 003a 35D1     		bne	.L310
 262:Src/main.c    ****   } else {
 3585              		.loc 3 262 5 is_stmt 1 view .LVU1040
 262:Src/main.c    ****   } else {
 3586              		.loc 3 262 17 is_stmt 0 view .LVU1041
 3587 003c A14B     		ldr	r3, .L374+8
 3588 003e 0422     		movs	r2, #4
 3589 0040 1A70     		strb	r2, [r3]
 3590              	.L311:
 271:Src/main.c    ****     enable_fast_refresh = 1;
 3591              		.loc 3 271 3 is_stmt 1 view .LVU1042
 271:Src/main.c    ****     enable_fast_refresh = 1;
 3592              		.loc 3 271 7 is_stmt 0 view .LVU1043
 3593 0042 2021     		movs	r1, #32
 3594 0044 9D48     		ldr	r0, .L374
 3595 0046 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3596              	.LVL353:
 271:Src/main.c    ****     enable_fast_refresh = 1;
 3597              		.loc 3 271 5 view .LVU1044
 3598 004a 88BB     		cbnz	r0, .L312
 272:Src/main.c    ****   } else {
 3599              		.loc 3 272 5 is_stmt 1 view .LVU1045
 272:Src/main.c    ****   } else {
 3600              		.loc 3 272 25 is_stmt 0 view .LVU1046
 3601 004c 9E4B     		ldr	r3, .L374+12
 3602 004e 0122     		movs	r2, #1
 3603 0050 1A70     		strb	r2, [r3]
 3604              	.L313:
 281:Src/main.c    ****     enable_manually_refresh = 1;
 3605              		.loc 3 281 3 is_stmt 1 view .LVU1047
 281:Src/main.c    ****     enable_manually_refresh = 1;
 3606              		.loc 3 281 7 is_stmt 0 view .LVU1048
 3607 0052 4021     		movs	r1, #64
 3608 0054 9948     		ldr	r0, .L374
 3609 0056 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3610              	.LVL354:
 281:Src/main.c    ****     enable_manually_refresh = 1;
 3611              		.loc 3 281 5 view .LVU1049
 3612 005a 68BB     		cbnz	r0, .L314
 282:Src/main.c    ****   } else {
 3613              		.loc 3 282 5 is_stmt 1 view .LVU1050
 282:Src/main.c    ****   } else {
 3614              		.loc 3 282 29 is_stmt 0 view .LVU1051
ARM GAS  /tmp/ccDqKevX.s 			page 102


 3615 005c 9B4B     		ldr	r3, .L374+16
 3616 005e 0122     		movs	r2, #1
 3617 0060 1A70     		strb	r2, [r3]
 3618              	.L315:
 294:Src/main.c    ****   HAL_GPIO_WritePin(Spalten_OE_GPIO_Port, Spalten_OE_Pin, 0);
 3619              		.loc 3 294 3 is_stmt 1 view .LVU1052
 3620 0062 0122     		movs	r2, #1
 3621 0064 4FF48071 		mov	r1, #256
 3622 0068 9948     		ldr	r0, .L374+20
 3623 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 3624              	.LVL355:
 295:Src/main.c    **** 
 3625              		.loc 3 295 3 view .LVU1053
 3626 006e 0022     		movs	r2, #0
 3627 0070 4FF48051 		mov	r1, #4096
 3628 0074 9148     		ldr	r0, .L374
 3629 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3630              	.LVL356:
 298:Src/main.c    ****   if (dots == NULL) {
 3631              		.loc 3 298 3 view .LVU1054
 298:Src/main.c    ****   if (dots == NULL) {
 3632              		.loc 3 298 45 is_stmt 0 view .LVU1055
 3633 007a 924B     		ldr	r3, .L374+8
 3634 007c 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 298:Src/main.c    ****   if (dots == NULL) {
 3635              		.loc 3 298 21 view .LVU1056
 3636 007e C4EBC404 		rsb	r4, r4, r4, lsl #3
 3637 0082 2401     		lsls	r4, r4, #4
 3638 0084 2046     		mov	r0, r4
 3639 0086 FFF7FEFF 		bl	malloc
 3640              	.LVL357:
 298:Src/main.c    ****   if (dots == NULL) {
 3641              		.loc 3 298 8 view .LVU1057
 3642 008a 924A     		ldr	r2, .L374+24
 3643 008c 1060     		str	r0, [r2]
 299:Src/main.c    ****     while (1) {
 3644              		.loc 3 299 3 is_stmt 1 view .LVU1058
 299:Src/main.c    ****     while (1) {
 3645              		.loc 3 299 6 is_stmt 0 view .LVU1059
 3646 008e B8B1     		cbz	r0, .L317
 311:Src/main.c    ****   if (dots_old == NULL) {
 3647              		.loc 3 311 3 is_stmt 1 view .LVU1060
 311:Src/main.c    ****   if (dots_old == NULL) {
 3648              		.loc 3 311 25 is_stmt 0 view .LVU1061
 3649 0090 2046     		mov	r0, r4
 3650 0092 FFF7FEFF 		bl	malloc
 3651              	.LVL358:
 311:Src/main.c    ****   if (dots_old == NULL) {
 3652              		.loc 3 311 12 view .LVU1062
 3653 0096 904A     		ldr	r2, .L374+28
 3654 0098 1060     		str	r0, [r2]
 312:Src/main.c    ****     while (1) {
 3655              		.loc 3 312 3 is_stmt 1 view .LVU1063
 312:Src/main.c    ****     while (1) {
 3656              		.loc 3 312 6 is_stmt 0 view .LVU1064
 3657 009a 38B3     		cbz	r0, .L319
 3658              	.LBB55:
ARM GAS  /tmp/ccDqKevX.s 			page 103


 324:Src/main.c    ****     dots[i] = 0;
 3659              		.loc 3 324 16 view .LVU1065
 3660 009c 0023     		movs	r3, #0
 3661 009e 46E0     		b	.L318
 3662              	.L308:
 3663              	.LBE55:
 254:Src/main.c    ****   }
 3664              		.loc 3 254 5 is_stmt 1 view .LVU1066
 254:Src/main.c    ****   }
 3665              		.loc 3 254 14 is_stmt 0 view .LVU1067
 3666 00a0 874B     		ldr	r3, .L374+4
 3667 00a2 0022     		movs	r2, #0
 3668 00a4 1A70     		strb	r2, [r3]
 3669 00a6 C3E7     		b	.L309
 3670              	.L310:
 264:Src/main.c    ****   }
 3671              		.loc 3 264 5 is_stmt 1 view .LVU1068
 264:Src/main.c    ****   }
 3672              		.loc 3 264 17 is_stmt 0 view .LVU1069
 3673 00a8 864B     		ldr	r3, .L374+8
 3674 00aa 0322     		movs	r2, #3
 3675 00ac 1A70     		strb	r2, [r3]
 3676 00ae C8E7     		b	.L311
 3677              	.L312:
 274:Src/main.c    ****   }
 3678              		.loc 3 274 5 is_stmt 1 view .LVU1070
 274:Src/main.c    ****   }
 3679              		.loc 3 274 25 is_stmt 0 view .LVU1071
 3680 00b0 854B     		ldr	r3, .L374+12
 3681 00b2 0022     		movs	r2, #0
 3682 00b4 1A70     		strb	r2, [r3]
 3683 00b6 CCE7     		b	.L313
 3684              	.L314:
 284:Src/main.c    ****   }
 3685              		.loc 3 284 5 is_stmt 1 view .LVU1072
 284:Src/main.c    ****   }
 3686              		.loc 3 284 29 is_stmt 0 view .LVU1073
 3687 00b8 844B     		ldr	r3, .L374+16
 3688 00ba 0022     		movs	r2, #0
 3689 00bc 1A70     		strb	r2, [r3]
 3690 00be D0E7     		b	.L315
 3691              	.L317:
 300:Src/main.c    **** 
 3692              		.loc 3 300 5 is_stmt 1 discriminator 1 view .LVU1074
 303:Src/main.c    ****       HAL_Delay(500);
 3693              		.loc 3 303 7 discriminator 1 view .LVU1075
 3694 00c0 864C     		ldr	r4, .L374+32
 3695 00c2 0122     		movs	r2, #1
 3696 00c4 4FF40051 		mov	r1, #8192
 3697 00c8 2046     		mov	r0, r4
 3698 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 3699              	.LVL359:
 304:Src/main.c    ****       HAL_GPIO_WritePin(OnboardLED_GPIO_Port, OnboardLED_Pin, 0);
 3700              		.loc 3 304 7 discriminator 1 view .LVU1076
 3701 00ce 4FF4FA70 		mov	r0, #500
 3702 00d2 FFF7FEFF 		bl	HAL_Delay
 3703              	.LVL360:
ARM GAS  /tmp/ccDqKevX.s 			page 104


 305:Src/main.c    ****       HAL_Delay(500);
 3704              		.loc 3 305 7 discriminator 1 view .LVU1077
 3705 00d6 0022     		movs	r2, #0
 3706 00d8 4FF40051 		mov	r1, #8192
 3707 00dc 2046     		mov	r0, r4
 3708 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
 3709              	.LVL361:
 306:Src/main.c    ****     }
 3710              		.loc 3 306 7 discriminator 1 view .LVU1078
 3711 00e2 4FF4FA70 		mov	r0, #500
 3712 00e6 FFF7FEFF 		bl	HAL_Delay
 3713              	.LVL362:
 300:Src/main.c    **** 
 3714              		.loc 3 300 11 discriminator 1 view .LVU1079
 3715 00ea E9E7     		b	.L317
 3716              	.L319:
 313:Src/main.c    **** 
 3717              		.loc 3 313 5 discriminator 1 view .LVU1080
 316:Src/main.c    ****       HAL_Delay(500);
 3718              		.loc 3 316 7 discriminator 1 view .LVU1081
 3719 00ec 7B4C     		ldr	r4, .L374+32
 3720 00ee 0122     		movs	r2, #1
 3721 00f0 4FF40051 		mov	r1, #8192
 3722 00f4 2046     		mov	r0, r4
 3723 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3724              	.LVL363:
 317:Src/main.c    ****       HAL_GPIO_WritePin(OnboardLED_GPIO_Port, OnboardLED_Pin, 0);
 3725              		.loc 3 317 7 discriminator 1 view .LVU1082
 3726 00fa 4FF4FA70 		mov	r0, #500
 3727 00fe FFF7FEFF 		bl	HAL_Delay
 3728              	.LVL364:
 318:Src/main.c    ****       HAL_Delay(500);
 3729              		.loc 3 318 7 discriminator 1 view .LVU1083
 3730 0102 0022     		movs	r2, #0
 3731 0104 4FF40051 		mov	r1, #8192
 3732 0108 2046     		mov	r0, r4
 3733 010a FFF7FEFF 		bl	HAL_GPIO_WritePin
 3734              	.LVL365:
 319:Src/main.c    ****     }
 3735              		.loc 3 319 7 discriminator 1 view .LVU1084
 3736 010e 4FF4FA70 		mov	r0, #500
 3737 0112 FFF7FEFF 		bl	HAL_Delay
 3738              	.LVL366:
 313:Src/main.c    **** 
 3739              		.loc 3 313 11 discriminator 1 view .LVU1085
 3740 0116 E9E7     		b	.L319
 3741              	.LVL367:
 3742              	.L320:
 3743              	.LBB56:
 325:Src/main.c    ****     dots_old[i] = 0;
 3744              		.loc 3 325 5 discriminator 3 view .LVU1086
 325:Src/main.c    ****     dots_old[i] = 0;
 3745              		.loc 3 325 9 is_stmt 0 discriminator 3 view .LVU1087
 3746 0118 6E4A     		ldr	r2, .L374+24
 3747 011a 1168     		ldr	r1, [r2]
 325:Src/main.c    ****     dots_old[i] = 0;
 3748              		.loc 3 325 13 discriminator 3 view .LVU1088
ARM GAS  /tmp/ccDqKevX.s 			page 105


 3749 011c 0022     		movs	r2, #0
 3750 011e 41F82320 		str	r2, [r1, r3, lsl #2]
 326:Src/main.c    ****   }
 3751              		.loc 3 326 5 is_stmt 1 discriminator 3 view .LVU1089
 326:Src/main.c    ****   }
 3752              		.loc 3 326 13 is_stmt 0 discriminator 3 view .LVU1090
 3753 0122 6D49     		ldr	r1, .L374+28
 3754 0124 0968     		ldr	r1, [r1]
 326:Src/main.c    ****   }
 3755              		.loc 3 326 17 discriminator 3 view .LVU1091
 3756 0126 41F82320 		str	r2, [r1, r3, lsl #2]
 324:Src/main.c    ****     dots[i] = 0;
 3757              		.loc 3 324 43 is_stmt 1 discriminator 3 view .LVU1092
 324:Src/main.c    ****     dots[i] = 0;
 3758              		.loc 3 324 44 is_stmt 0 discriminator 3 view .LVU1093
 3759 012a 0133     		adds	r3, r3, #1
 3760              	.LVL368:
 324:Src/main.c    ****     dots[i] = 0;
 3761              		.loc 3 324 44 discriminator 3 view .LVU1094
 3762 012c DBB2     		uxtb	r3, r3
 3763              	.LVL369:
 3764              	.L318:
 324:Src/main.c    ****     dots[i] = 0;
 3765              		.loc 3 324 21 is_stmt 1 discriminator 1 view .LVU1095
 324:Src/main.c    ****     dots[i] = 0;
 3766              		.loc 3 324 37 is_stmt 0 discriminator 1 view .LVU1096
 3767 012e 654A     		ldr	r2, .L374+8
 3768 0130 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3769 0132 C2EBC202 		rsb	r2, r2, r2, lsl #3
 324:Src/main.c    ****     dots[i] = 0;
 3770              		.loc 3 324 3 discriminator 1 view .LVU1097
 3771 0136 B3EB820F 		cmp	r3, r2, lsl #2
 3772 013a EDDB     		blt	.L320
 3773              	.LBE56:
 330:Src/main.c    **** 
 3774              		.loc 3 330 3 is_stmt 1 view .LVU1098
 3775 013c FFF7FEFF 		bl	ringbuffer_init
 3776              	.LVL370:
 342:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART1_IRQn);
 3777              		.loc 3 342 3 view .LVU1099
 3778 0140 0122     		movs	r2, #1
 3779 0142 6749     		ldr	r1, .L374+36
 3780 0144 6748     		ldr	r0, .L374+40
 3781 0146 FFF7FEFF 		bl	HAL_UART_Receive_IT
 3782              	.LVL371:
 343:Src/main.c    **** 
 3783              		.loc 3 343 3 view .LVU1100
 3784 014a 2520     		movs	r0, #37
 3785 014c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 3786              	.LVL372:
 3787 0150 F1E0     		b	.L350
 3788              	.L321:
 3789              	.LBB57:
 3790              	.LBB58:
 367:Src/main.c    ****     uint8_t enable_fast_refresh_current = enable_fast_refresh;
 3791              		.loc 3 367 5 view .LVU1101
 3792              	.LVL373:
ARM GAS  /tmp/ccDqKevX.s 			page 106


 368:Src/main.c    ****     enable_fast_refresh = 0; // disable fast_refresh for bl/yl test
 3793              		.loc 3 368 5 view .LVU1102
 368:Src/main.c    ****     enable_fast_refresh = 0; // disable fast_refresh for bl/yl test
 3794              		.loc 3 368 13 is_stmt 0 view .LVU1103
 3795 0152 5D4A     		ldr	r2, .L374+12
 3796 0154 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 3797              	.LVL374:
 369:Src/main.c    ****     for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3798              		.loc 3 369 5 is_stmt 1 view .LVU1104
 369:Src/main.c    ****     for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3799              		.loc 3 369 25 is_stmt 0 view .LVU1105
 3800 0156 0023     		movs	r3, #0
 3801 0158 1370     		strb	r3, [r2]
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3802              		.loc 3 370 5 is_stmt 1 view .LVU1106
 3803              	.LBB59:
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3804              		.loc 3 370 10 view .LVU1107
 3805              	.LVL375:
 3806              	.L323:
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3807              		.loc 3 370 23 discriminator 1 view .LVU1108
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3808              		.loc 3 370 39 is_stmt 0 discriminator 1 view .LVU1109
 3809 015a 5A4A     		ldr	r2, .L374+8
 3810 015c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3811 015e C2EBC201 		rsb	r1, r2, r2, lsl #3
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3812              		.loc 3 370 5 discriminator 1 view .LVU1110
 3813 0162 B3EB810F 		cmp	r3, r1, lsl #2
 3814 0166 08DA     		bge	.L362
 371:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 3815              		.loc 3 371 9 is_stmt 1 discriminator 3 view .LVU1111
 371:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 3816              		.loc 3 371 13 is_stmt 0 discriminator 3 view .LVU1112
 3817 0168 5A4A     		ldr	r2, .L374+24
 3818 016a 1268     		ldr	r2, [r2]
 371:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 3819              		.loc 3 371 17 discriminator 3 view .LVU1113
 3820 016c 4FF0FF31 		mov	r1, #-1
 3821 0170 42F82310 		str	r1, [r2, r3, lsl #2]
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3822              		.loc 3 370 45 is_stmt 1 discriminator 3 view .LVU1114
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3823              		.loc 3 370 46 is_stmt 0 discriminator 3 view .LVU1115
 3824 0174 0133     		adds	r3, r3, #1
 3825              	.LVL376:
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3826              		.loc 3 370 46 discriminator 3 view .LVU1116
 3827 0176 DBB2     		uxtb	r3, r3
 3828              	.LVL377:
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3829              		.loc 3 370 46 discriminator 3 view .LVU1117
 3830 0178 EFE7     		b	.L323
 3831              	.L362:
 370:Src/main.c    ****         dots[i] = 0xFFFFFFFF;
 3832              		.loc 3 370 46 discriminator 3 view .LVU1118
ARM GAS  /tmp/ccDqKevX.s 			page 107


 3833              	.LBE59:
 372:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3834              		.loc 3 372 5 is_stmt 1 view .LVU1119
 372:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3835              		.loc 3 372 18 is_stmt 0 view .LVU1120
 3836 017a 514B     		ldr	r3, .L374+4
 3837              	.LVL378:
 372:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3838              		.loc 3 372 18 view .LVU1121
 3839 017c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 372:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3840              		.loc 3 372 8 view .LVU1122
 3841 017e D1B1     		cbz	r1, .L353
 367:Src/main.c    ****     uint8_t enable_fast_refresh_current = enable_fast_refresh;
 3842              		.loc 3 367 13 view .LVU1123
 3843 0180 0023     		movs	r3, #0
 3844              	.L325:
 3845              	.LVL379:
 373:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 3846              		.loc 3 373 5 is_stmt 1 view .LVU1124
 373:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 3847              		.loc 3 373 8 is_stmt 0 view .LVU1125
 3848 0182 0129     		cmp	r1, #1
 3849 0184 19D0     		beq	.L363
 3850              	.LVL380:
 3851              	.L326:
 374:Src/main.c    ****     enable_fast_refresh = enable_fast_refresh_current;
 3852              		.loc 3 374 5 is_stmt 1 view .LVU1126
 3853 0186 013B     		subs	r3, r3, #1
 3854              	.LVL381:
 374:Src/main.c    ****     enable_fast_refresh = enable_fast_refresh_current;
 3855              		.loc 3 374 5 is_stmt 0 view .LVU1127
 3856 0188 C2EBC201 		rsb	r1, r2, r2, lsl #3
 3857 018c 8900     		lsls	r1, r1, #2
 3858 018e 0139     		subs	r1, r1, #1
 3859 0190 DBB2     		uxtb	r3, r3
 3860 0192 0022     		movs	r2, #0
 3861 0194 C9B2     		uxtb	r1, r1
 3862 0196 1046     		mov	r0, r2
 3863 0198 FFF7FEFF 		bl	Write_Dots
 3864              	.LVL382:
 375:Src/main.c    ****     yellow_test_or_center = 1;
 3865              		.loc 3 375 5 is_stmt 1 view .LVU1128
 375:Src/main.c    ****     yellow_test_or_center = 1;
 3866              		.loc 3 375 25 is_stmt 0 view .LVU1129
 3867 019c 4A4B     		ldr	r3, .L374+12
 3868 019e 1C70     		strb	r4, [r3]
 376:Src/main.c    ****     yellow_test_or_UP_DOWN = 1;
 3869              		.loc 3 376 5 is_stmt 1 view .LVU1130
 376:Src/main.c    ****     yellow_test_or_UP_DOWN = 1;
 3870              		.loc 3 376 27 is_stmt 0 view .LVU1131
 3871 01a0 0123     		movs	r3, #1
 3872 01a2 514A     		ldr	r2, .L374+44
 3873 01a4 1370     		strb	r3, [r2]
 377:Src/main.c    ****     start_yellow = 0;
 3874              		.loc 3 377 5 is_stmt 1 view .LVU1132
 377:Src/main.c    ****     start_yellow = 0;
ARM GAS  /tmp/ccDqKevX.s 			page 108


 3875              		.loc 3 377 28 is_stmt 0 view .LVU1133
 3876 01a6 514A     		ldr	r2, .L374+48
 3877 01a8 1370     		strb	r3, [r2]
 378:Src/main.c    **** 
 3878              		.loc 3 378 5 is_stmt 1 view .LVU1134
 378:Src/main.c    **** 
 3879              		.loc 3 378 18 is_stmt 0 view .LVU1135
 3880 01aa 514B     		ldr	r3, .L374+52
 3881 01ac 0022     		movs	r2, #0
 3882 01ae 1A70     		strb	r2, [r3]
 381:Src/main.c    ****   }
 3883              		.loc 3 381 5 is_stmt 1 view .LVU1136
 3884 01b0 FFF7FEFF 		bl	save_written_dots
 3885              	.LVL383:
 3886 01b4 CCE0     		b	.L322
 3887              	.LVL384:
 3888              	.L353:
 372:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3889              		.loc 3 372 37 is_stmt 0 view .LVU1137
 3890 01b6 1023     		movs	r3, #16
 3891 01b8 E3E7     		b	.L325
 3892              	.LVL385:
 3893              	.L363:
 373:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 3894              		.loc 3 373 37 view .LVU1138
 3895 01ba 1323     		movs	r3, #19
 3896              	.LVL386:
 373:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 3897              		.loc 3 373 37 view .LVU1139
 3898 01bc E3E7     		b	.L326
 3899              	.LVL387:
 3900              	.L327:
 373:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 3901              		.loc 3 373 37 view .LVU1140
 3902              	.LBE58:
 3903              	.LBB60:
 386:Src/main.c    ****     uint8_t enable_fast_refresh_current = enable_fast_refresh;
 3904              		.loc 3 386 5 is_stmt 1 view .LVU1141
 387:Src/main.c    ****     enable_fast_refresh = 0; // disable fast_refresh for bl/yl test
 3905              		.loc 3 387 5 view .LVU1142
 387:Src/main.c    ****     enable_fast_refresh = 0; // disable fast_refresh for bl/yl test
 3906              		.loc 3 387 13 is_stmt 0 view .LVU1143
 3907 01be 424A     		ldr	r2, .L374+12
 3908 01c0 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 3909              	.LVL388:
 388:Src/main.c    ****     for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3910              		.loc 3 388 5 is_stmt 1 view .LVU1144
 388:Src/main.c    ****     for (uint8_t i=0; i < Panelanzahl * 28; i++)
 3911              		.loc 3 388 25 is_stmt 0 view .LVU1145
 3912 01c2 0023     		movs	r3, #0
 3913 01c4 1370     		strb	r3, [r2]
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3914              		.loc 3 389 5 is_stmt 1 view .LVU1146
 3915              	.LBB61:
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3916              		.loc 3 389 10 view .LVU1147
 3917              	.LVL389:
ARM GAS  /tmp/ccDqKevX.s 			page 109


 3918              	.L329:
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3919              		.loc 3 389 23 discriminator 1 view .LVU1148
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3920              		.loc 3 389 39 is_stmt 0 discriminator 1 view .LVU1149
 3921 01c6 3F4A     		ldr	r2, .L374+8
 3922 01c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3923 01ca C2EBC201 		rsb	r1, r2, r2, lsl #3
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3924              		.loc 3 389 5 discriminator 1 view .LVU1150
 3925 01ce B3EB810F 		cmp	r3, r1, lsl #2
 3926 01d2 07DA     		bge	.L364
 390:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 3927              		.loc 3 390 9 is_stmt 1 discriminator 3 view .LVU1151
 390:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 3928              		.loc 3 390 13 is_stmt 0 discriminator 3 view .LVU1152
 3929 01d4 3F4A     		ldr	r2, .L374+24
 3930 01d6 1268     		ldr	r2, [r2]
 390:Src/main.c    ****     if (Paneltyp == LAWO)  { Zeilen = 16; }
 3931              		.loc 3 390 17 discriminator 3 view .LVU1153
 3932 01d8 0021     		movs	r1, #0
 3933 01da 42F82310 		str	r1, [r2, r3, lsl #2]
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3934              		.loc 3 389 45 is_stmt 1 discriminator 3 view .LVU1154
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3935              		.loc 3 389 46 is_stmt 0 discriminator 3 view .LVU1155
 3936 01de 0133     		adds	r3, r3, #1
 3937              	.LVL390:
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3938              		.loc 3 389 46 discriminator 3 view .LVU1156
 3939 01e0 DBB2     		uxtb	r3, r3
 3940              	.LVL391:
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3941              		.loc 3 389 46 discriminator 3 view .LVU1157
 3942 01e2 F0E7     		b	.L329
 3943              	.L364:
 389:Src/main.c    ****         dots[i] = 0x00000000;
 3944              		.loc 3 389 46 discriminator 3 view .LVU1158
 3945              	.LBE61:
 391:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3946              		.loc 3 391 5 is_stmt 1 view .LVU1159
 391:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3947              		.loc 3 391 18 is_stmt 0 view .LVU1160
 3948 01e4 364B     		ldr	r3, .L374+4
 3949              	.LVL392:
 391:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3950              		.loc 3 391 18 view .LVU1161
 3951 01e6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 391:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 3952              		.loc 3 391 8 view .LVU1162
 3953 01e8 C9B1     		cbz	r1, .L355
 386:Src/main.c    ****     uint8_t enable_fast_refresh_current = enable_fast_refresh;
 3954              		.loc 3 386 13 view .LVU1163
 3955 01ea 0023     		movs	r3, #0
 3956              	.L331:
 3957              	.LVL393:
 392:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
ARM GAS  /tmp/ccDqKevX.s 			page 110


 3958              		.loc 3 392 5 is_stmt 1 view .LVU1164
 392:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 3959              		.loc 3 392 8 is_stmt 0 view .LVU1165
 3960 01ec 0129     		cmp	r1, #1
 3961 01ee 18D0     		beq	.L365
 3962              	.LVL394:
 3963              	.L332:
 393:Src/main.c    ****     enable_fast_refresh = enable_fast_refresh_current;
 3964              		.loc 3 393 5 is_stmt 1 view .LVU1166
 3965 01f0 013B     		subs	r3, r3, #1
 3966              	.LVL395:
 393:Src/main.c    ****     enable_fast_refresh = enable_fast_refresh_current;
 3967              		.loc 3 393 5 is_stmt 0 view .LVU1167
 3968 01f2 C2EBC201 		rsb	r1, r2, r2, lsl #3
 3969 01f6 8900     		lsls	r1, r1, #2
 3970 01f8 0139     		subs	r1, r1, #1
 3971 01fa DBB2     		uxtb	r3, r3
 3972 01fc 0022     		movs	r2, #0
 3973 01fe C9B2     		uxtb	r1, r1
 3974 0200 1046     		mov	r0, r2
 3975 0202 FFF7FEFF 		bl	Write_Dots
 3976              	.LVL396:
 394:Src/main.c    ****     yellow_test_or_center = 0;
 3977              		.loc 3 394 5 is_stmt 1 view .LVU1168
 394:Src/main.c    ****     yellow_test_or_center = 0;
 3978              		.loc 3 394 25 is_stmt 0 view .LVU1169
 3979 0206 304B     		ldr	r3, .L374+12
 3980 0208 1C70     		strb	r4, [r3]
 395:Src/main.c    ****     yellow_test_or_UP_DOWN = 0;
 3981              		.loc 3 395 5 is_stmt 1 view .LVU1170
 395:Src/main.c    ****     yellow_test_or_UP_DOWN = 0;
 3982              		.loc 3 395 27 is_stmt 0 view .LVU1171
 3983 020a 0023     		movs	r3, #0
 3984 020c 364A     		ldr	r2, .L374+44
 3985 020e 1370     		strb	r3, [r2]
 396:Src/main.c    ****     start_black = 0;
 3986              		.loc 3 396 5 is_stmt 1 view .LVU1172
 396:Src/main.c    ****     start_black = 0;
 3987              		.loc 3 396 28 is_stmt 0 view .LVU1173
 3988 0210 364A     		ldr	r2, .L374+48
 3989 0212 1370     		strb	r3, [r2]
 397:Src/main.c    **** 
 3990              		.loc 3 397 5 is_stmt 1 view .LVU1174
 397:Src/main.c    **** 
 3991              		.loc 3 397 17 is_stmt 0 view .LVU1175
 3992 0214 374A     		ldr	r2, .L374+56
 3993 0216 1370     		strb	r3, [r2]
 400:Src/main.c    ****   }
 3994              		.loc 3 400 5 is_stmt 1 view .LVU1176
 3995 0218 FFF7FEFF 		bl	save_written_dots
 3996              	.LVL397:
 3997 021c A4E0     		b	.L328
 3998              	.LVL398:
 3999              	.L355:
 391:Src/main.c    ****     if (Paneltyp == BROSE) { Zeilen = 19; }
 4000              		.loc 3 391 37 is_stmt 0 view .LVU1177
 4001 021e 1023     		movs	r3, #16
ARM GAS  /tmp/ccDqKevX.s 			page 111


 4002 0220 E4E7     		b	.L331
 4003              	.LVL399:
 4004              	.L365:
 392:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 4005              		.loc 3 392 37 view .LVU1178
 4006 0222 1323     		movs	r3, #19
 4007              	.LVL400:
 392:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 4008              		.loc 3 392 37 view .LVU1179
 4009 0224 E4E7     		b	.L332
 4010              	.LVL401:
 4011              	.L368:
 392:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, Zeilen - 1);
 4012              		.loc 3 392 37 view .LVU1180
 4013              	.LBE60:
 4014              	.LBB62:
 405:Src/main.c    ****     if (HAL_GetTick() > blocked_until) {
 4015              		.loc 3 405 5 is_stmt 1 view .LVU1181
 406:Src/main.c    ****       if (HAL_GPIO_ReadPin(Lampe_GPIO_Port, Lampe_Pin)) {
 4016              		.loc 3 406 5 view .LVU1182
 406:Src/main.c    ****       if (HAL_GPIO_ReadPin(Lampe_GPIO_Port, Lampe_Pin)) {
 4017              		.loc 3 406 9 is_stmt 0 view .LVU1183
 4018 0226 FFF7FEFF 		bl	HAL_GetTick
 4019              	.LVL402:
 406:Src/main.c    ****       if (HAL_GPIO_ReadPin(Lampe_GPIO_Port, Lampe_Pin)) {
 4020              		.loc 3 406 23 view .LVU1184
 4021 022a 334B     		ldr	r3, .L374+60
 4022 022c 1B68     		ldr	r3, [r3]
 406:Src/main.c    ****       if (HAL_GPIO_ReadPin(Lampe_GPIO_Port, Lampe_Pin)) {
 4023              		.loc 3 406 8 view .LVU1185
 4024 022e 9842     		cmp	r0, r3
 4025 0230 40F2A180 		bls	.L333
 407:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 0);
 4026              		.loc 3 407 7 is_stmt 1 view .LVU1186
 407:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 0);
 4027              		.loc 3 407 11 is_stmt 0 view .LVU1187
 4028 0234 0421     		movs	r1, #4
 4029 0236 2648     		ldr	r0, .L374+20
 4030 0238 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 4031              	.LVL403:
 407:Src/main.c    ****         HAL_GPIO_WritePin(Lampe_GPIO_Port, Lampe_Pin, 0);
 4032              		.loc 3 407 10 view .LVU1188
 4033 023c 58B1     		cbz	r0, .L334
 408:Src/main.c    ****       } else {
 4034              		.loc 3 408 9 is_stmt 1 view .LVU1189
 4035 023e 0022     		movs	r2, #0
 4036 0240 0421     		movs	r1, #4
 4037 0242 2348     		ldr	r0, .L374+20
 4038 0244 FFF7FEFF 		bl	HAL_GPIO_WritePin
 4039              	.LVL404:
 4040              	.L335:
 412:Src/main.c    ****     }
 4041              		.loc 3 412 7 view .LVU1190
 412:Src/main.c    ****     }
 4042              		.loc 3 412 23 is_stmt 0 view .LVU1191
 4043 0248 FFF7FEFF 		bl	HAL_GetTick
 4044              	.LVL405:
ARM GAS  /tmp/ccDqKevX.s 			page 112


 412:Src/main.c    ****     }
 4045              		.loc 3 412 37 view .LVU1192
 4046 024c 00F5C870 		add	r0, r0, #400
 412:Src/main.c    ****     }
 4047              		.loc 3 412 21 view .LVU1193
 4048 0250 294A     		ldr	r2, .L374+60
 4049 0252 1060     		str	r0, [r2]
 4050 0254 8FE0     		b	.L333
 4051              	.L334:
 410:Src/main.c    ****       }
 4052              		.loc 3 410 9 is_stmt 1 view .LVU1194
 4053 0256 0122     		movs	r2, #1
 4054 0258 0421     		movs	r1, #4
 4055 025a 1D48     		ldr	r0, .L374+20
 4056 025c FFF7FEFF 		bl	HAL_GPIO_WritePin
 4057              	.LVL406:
 4058 0260 F2E7     		b	.L335
 4059              	.LVL407:
 4060              	.L357:
 410:Src/main.c    ****       }
 4061              		.loc 3 410 9 is_stmt 0 view .LVU1195
 4062              	.LBE62:
 4063              	.LBB63:
 422:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4064              		.loc 3 422 44 view .LVU1196
 4065 0262 1023     		movs	r3, #16
 4066 0264 90E0     		b	.L337
 4067              	.LVL408:
 4068              	.L369:
 423:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, anzahl_spalten - 1);
 4069              		.loc 3 423 44 view .LVU1197
 4070 0266 1323     		movs	r3, #19
 4071              	.LVL409:
 423:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, anzahl_spalten - 1);
 4072              		.loc 3 423 44 view .LVU1198
 4073 0268 91E0     		b	.L338
 4074              	.L370:
 423:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, anzahl_spalten - 1);
 4075              		.loc 3 423 44 view .LVU1199
 4076              	.LBE63:
 439:Src/main.c    ****     start_refresh_center = 0;
 4077              		.loc 3 439 5 is_stmt 1 view .LVU1200
 4078 026a 164B     		ldr	r3, .L374+8
 4079 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4080 026e C3EBC301 		rsb	r1, r3, r3, lsl #3
 4081 0272 8900     		lsls	r1, r1, #2
 4082 0274 0139     		subs	r1, r1, #1
 4083 0276 0B23     		movs	r3, #11
 4084 0278 0422     		movs	r2, #4
 4085 027a C9B2     		uxtb	r1, r1
 4086 027c 0020     		movs	r0, #0
 4087 027e FFF7FEFF 		bl	Write_Dots
 4088              	.LVL410:
 440:Src/main.c    **** 
 4089              		.loc 3 440 5 view .LVU1201
 440:Src/main.c    **** 
 4090              		.loc 3 440 26 is_stmt 0 view .LVU1202
ARM GAS  /tmp/ccDqKevX.s 			page 113


 4091 0282 1E4B     		ldr	r3, .L374+64
 4092 0284 0022     		movs	r2, #0
 4093 0286 1A70     		strb	r2, [r3]
 443:Src/main.c    ****   }
 4094              		.loc 3 443 5 is_stmt 1 view .LVU1203
 4095 0288 FFF7FEFF 		bl	save_written_dots
 4096              	.LVL411:
 4097 028c 96E0     		b	.L339
 4098              	.L371:
 4099              	.LBB64:
 448:Src/main.c    ****     if (Paneltyp == LAWO)  { offset=0; }
 4100              		.loc 3 448 5 view .LVU1204
 4101              	.LVL412:
 449:Src/main.c    ****     if (Paneltyp == BROSE) { offset=0; }
 4102              		.loc 3 449 5 view .LVU1205
 450:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, 7+offset);
 4103              		.loc 3 450 5 view .LVU1206
 451:Src/main.c    ****     start_refresh_UP = 0;
 4104              		.loc 3 451 5 view .LVU1207
 4105 028e 0D4B     		ldr	r3, .L374+8
 4106 0290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4107 0292 C3EBC301 		rsb	r1, r3, r3, lsl #3
 4108 0296 8900     		lsls	r1, r1, #2
 4109 0298 0139     		subs	r1, r1, #1
 4110 029a 0723     		movs	r3, #7
 4111 029c 0022     		movs	r2, #0
 4112 029e C9B2     		uxtb	r1, r1
 4113 02a0 1046     		mov	r0, r2
 4114 02a2 FFF7FEFF 		bl	Write_Dots
 4115              	.LVL413:
 452:Src/main.c    **** 
 4116              		.loc 3 452 5 view .LVU1208
 452:Src/main.c    **** 
 4117              		.loc 3 452 22 is_stmt 0 view .LVU1209
 4118 02a6 164B     		ldr	r3, .L374+68
 4119 02a8 0022     		movs	r2, #0
 4120 02aa 1A70     		strb	r2, [r3]
 455:Src/main.c    ****   }
 4121              		.loc 3 455 5 is_stmt 1 view .LVU1210
 4122 02ac FFF7FEFF 		bl	save_written_dots
 4123              	.LVL414:
 4124 02b0 89E0     		b	.L340
 4125              	.LVL415:
 4126              	.L359:
 455:Src/main.c    ****   }
 4127              		.loc 3 455 5 is_stmt 0 view .LVU1211
 4128              	.LBE64:
 4129              	.LBB65:
 461:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4130              		.loc 3 461 44 view .LVU1212
 4131 02b2 1022     		movs	r2, #16
 4132 02b4 90E0     		b	.L342
 4133              	.LVL416:
 4134              	.L372:
 462:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, anzahl_spalten - 8, anzahl_spalten - 1);
 4135              		.loc 3 462 44 view .LVU1213
 4136 02b6 1322     		movs	r2, #19
ARM GAS  /tmp/ccDqKevX.s 			page 114


 4137              	.LVL417:
 462:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, anzahl_spalten - 8, anzahl_spalten - 1);
 4138              		.loc 3 462 44 view .LVU1214
 4139 02b8 91E0     		b	.L343
 4140              	.L375:
 4141 02ba 00BF     		.align	2
 4142              	.L374:
 4143 02bc 000C0140 		.word	1073810432
 4144 02c0 00000000 		.word	Paneltyp
 4145 02c4 00000000 		.word	Panelanzahl
 4146 02c8 00000000 		.word	.LANCHOR17
 4147 02cc 00000000 		.word	.LANCHOR15
 4148 02d0 00080140 		.word	1073809408
 4149 02d4 00000000 		.word	dots
 4150 02d8 00000000 		.word	dots_old
 4151 02dc 00100140 		.word	1073811456
 4152 02e0 00000000 		.word	.LANCHOR8
 4153 02e4 00000000 		.word	huart1
 4154 02e8 00000000 		.word	.LANCHOR16
 4155 02ec 00000000 		.word	.LANCHOR14
 4156 02f0 00000000 		.word	.LANCHOR6
 4157 02f4 00000000 		.word	.LANCHOR7
 4158 02f8 00000000 		.word	.LANCHOR18
 4159 02fc 00000000 		.word	.LANCHOR3
 4160 0300 00000000 		.word	.LANCHOR5
 4161              	.LVL418:
 4162              	.L373:
 462:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, anzahl_spalten - 8, anzahl_spalten - 1);
 4163              		.loc 3 462 44 view .LVU1215
 4164              	.LBE65:
 482:Src/main.c    ****       break;
 4165              		.loc 3 482 7 is_stmt 1 view .LVU1216
 482:Src/main.c    ****       break;
 4166              		.loc 3 482 22 is_stmt 0 view .LVU1217
 4167 0304 1346     		mov	r3, r2
 4168 0306 0022     		movs	r2, #0
 4169 0308 1A60     		str	r2, [r3]
 483:Src/main.c    ****     }
 4170              		.loc 3 483 7 is_stmt 1 view .LVU1218
 4171              	.LVL419:
 4172              	.L346:
 511:Src/main.c    ****     cmd_buffer_pos = 0;
 4173              		.loc 3 511 3 view .LVU1219
 511:Src/main.c    ****     cmd_buffer_pos = 0;
 4174              		.loc 3 511 7 is_stmt 0 view .LVU1220
 4175 030a FFF7FEFF 		bl	HAL_GetTick
 4176              	.LVL420:
 511:Src/main.c    ****     cmd_buffer_pos = 0;
 4177              		.loc 3 511 39 view .LVU1221
 4178 030e 554B     		ldr	r3, .L376
 4179 0310 1B68     		ldr	r3, [r3]
 4180 0312 03F1FA02 		add	r2, r3, #250
 511:Src/main.c    ****     cmd_buffer_pos = 0;
 4181              		.loc 3 511 6 view .LVU1222
 4182 0316 9042     		cmp	r0, r2
 4183 0318 05D9     		bls	.L349
 511:Src/main.c    ****     cmd_buffer_pos = 0;
ARM GAS  /tmp/ccDqKevX.s 			page 115


 4184              		.loc 3 511 46 discriminator 1 view .LVU1223
 4185 031a 23B1     		cbz	r3, .L349
 511:Src/main.c    ****     cmd_buffer_pos = 0;
 4186              		.loc 3 511 73 discriminator 2 view .LVU1224
 4187 031c FFF7FEFF 		bl	isBusy
 4188              	.LVL421:
 511:Src/main.c    ****     cmd_buffer_pos = 0;
 4189              		.loc 3 511 69 discriminator 2 view .LVU1225
 4190 0320 0028     		cmp	r0, #0
 4191 0322 00F08A80 		beq	.L366
 4192              	.L349:
 516:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 4193              		.loc 3 516 3 is_stmt 1 view .LVU1226
 516:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 4194              		.loc 3 516 7 is_stmt 0 view .LVU1227
 4195 0326 FFF7FEFF 		bl	HAL_GetTick
 4196              	.LVL422:
 516:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 4197              		.loc 3 516 39 view .LVU1228
 4198 032a 4E4B     		ldr	r3, .L376
 4199 032c 1B68     		ldr	r3, [r3]
 4200 032e 3233     		adds	r3, r3, #50
 516:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 4201              		.loc 3 516 6 view .LVU1229
 4202 0330 9842     		cmp	r0, r3
 4203 0332 00F28C80 		bhi	.L367
 4204              	.L350:
 516:Src/main.c    ****     HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin,  0);
 4205              		.loc 3 516 6 view .LVU1230
 4206              	.LBE57:
 354:Src/main.c    ****   {
 4207              		.loc 3 354 3 is_stmt 1 view .LVU1231
 4208              	.LBB68:
 366:Src/main.c    ****     uint8_t Zeilen = 0;
 4209              		.loc 3 366 3 view .LVU1232
 366:Src/main.c    ****     uint8_t Zeilen = 0;
 4210              		.loc 3 366 8 is_stmt 0 view .LVU1233
 4211 0336 4FF48061 		mov	r1, #1024
 4212 033a 4B48     		ldr	r0, .L376+4
 4213 033c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 4214              	.LVL423:
 366:Src/main.c    ****     uint8_t Zeilen = 0;
 4215              		.loc 3 366 6 view .LVU1234
 4216 0340 0028     		cmp	r0, #0
 4217 0342 3FF406AF 		beq	.L321
 366:Src/main.c    ****     uint8_t Zeilen = 0;
 4218              		.loc 3 366 61 discriminator 1 view .LVU1235
 4219 0346 494B     		ldr	r3, .L376+8
 4220 0348 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4221 034a 002B     		cmp	r3, #0
 4222 034c 7FF401AF 		bne	.L321
 4223              	.L322:
 385:Src/main.c    ****     uint8_t Zeilen = 0;
 4224              		.loc 3 385 3 is_stmt 1 view .LVU1236
 385:Src/main.c    ****     uint8_t Zeilen = 0;
 4225              		.loc 3 385 8 is_stmt 0 view .LVU1237
 4226 0350 0221     		movs	r1, #2
ARM GAS  /tmp/ccDqKevX.s 			page 116


 4227 0352 4548     		ldr	r0, .L376+4
 4228 0354 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 4229              	.LVL424:
 385:Src/main.c    ****     uint8_t Zeilen = 0;
 4230              		.loc 3 385 6 view .LVU1238
 4231 0358 0028     		cmp	r0, #0
 4232 035a 3FF430AF 		beq	.L327
 385:Src/main.c    ****     uint8_t Zeilen = 0;
 4233              		.loc 3 385 67 discriminator 1 view .LVU1239
 4234 035e 444B     		ldr	r3, .L376+12
 4235 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4236 0362 002B     		cmp	r3, #0
 4237 0364 7FF42BAF 		bne	.L327
 4238              	.L328:
 404:Src/main.c    ****     static uint32_t blocked_until = 0;
 4239              		.loc 3 404 3 is_stmt 1 view .LVU1240
 404:Src/main.c    ****     static uint32_t blocked_until = 0;
 4240              		.loc 3 404 8 is_stmt 0 view .LVU1241
 4241 0368 0121     		movs	r1, #1
 4242 036a 3F48     		ldr	r0, .L376+4
 4243 036c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 4244              	.LVL425:
 404:Src/main.c    ****     static uint32_t blocked_until = 0;
 4245              		.loc 3 404 6 view .LVU1242
 4246 0370 0028     		cmp	r0, #0
 4247 0372 3FF458AF 		beq	.L368
 4248              	.L333:
 420:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 4249              		.loc 3 420 3 is_stmt 1 view .LVU1243
 420:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 4250              		.loc 3 420 7 is_stmt 0 view .LVU1244
 4251 0376 3F4B     		ldr	r3, .L376+16
 4252 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 420:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 4253              		.loc 3 420 6 view .LVU1245
 4254 037a D3B1     		cbz	r3, .L336
 4255              	.LBB66:
 421:Src/main.c    ****     if (Paneltyp == LAWO)  { anzahl_spalten=16; }
 4256              		.loc 3 421 5 is_stmt 1 view .LVU1246
 4257              	.LVL426:
 422:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4258              		.loc 3 422 5 view .LVU1247
 422:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4259              		.loc 3 422 18 is_stmt 0 view .LVU1248
 4260 037c 3E4B     		ldr	r3, .L376+20
 4261 037e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 422:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4262              		.loc 3 422 8 view .LVU1249
 4263 0380 002A     		cmp	r2, #0
 4264 0382 3FF46EAF 		beq	.L357
 421:Src/main.c    ****     if (Paneltyp == LAWO)  { anzahl_spalten=16; }
 4265              		.loc 3 421 13 view .LVU1250
 4266 0386 1423     		movs	r3, #20
 4267              	.L337:
 4268              	.LVL427:
 423:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, anzahl_spalten - 1);
 4269              		.loc 3 423 5 is_stmt 1 view .LVU1251
ARM GAS  /tmp/ccDqKevX.s 			page 117


 423:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 0, anzahl_spalten - 1);
 4270              		.loc 3 423 8 is_stmt 0 view .LVU1252
 4271 0388 012A     		cmp	r2, #1
 4272 038a 3FF46CAF 		beq	.L369
 4273              	.LVL428:
 4274              	.L338:
 424:Src/main.c    ****     start_refresh = 0;
 4275              		.loc 3 424 5 is_stmt 1 view .LVU1253
 4276 038e 013B     		subs	r3, r3, #1
 4277              	.LVL429:
 424:Src/main.c    ****     start_refresh = 0;
 4278              		.loc 3 424 5 is_stmt 0 view .LVU1254
 4279 0390 3A4A     		ldr	r2, .L376+24
 4280 0392 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 4281 0394 C2EBC201 		rsb	r1, r2, r2, lsl #3
 4282 0398 8900     		lsls	r1, r1, #2
 4283 039a 0139     		subs	r1, r1, #1
 4284 039c DBB2     		uxtb	r3, r3
 4285 039e 0022     		movs	r2, #0
 4286 03a0 C9B2     		uxtb	r1, r1
 4287 03a2 1046     		mov	r0, r2
 4288 03a4 FFF7FEFF 		bl	Write_Dots
 4289              	.LVL430:
 425:Src/main.c    **** 
 4290              		.loc 3 425 5 is_stmt 1 view .LVU1255
 425:Src/main.c    **** 
 4291              		.loc 3 425 19 is_stmt 0 view .LVU1256
 4292 03a8 324B     		ldr	r3, .L376+16
 4293 03aa 0022     		movs	r2, #0
 4294 03ac 1A70     		strb	r2, [r3]
 428:Src/main.c    ****   }
 4295              		.loc 3 428 5 is_stmt 1 view .LVU1257
 4296 03ae FFF7FEFF 		bl	save_written_dots
 4297              	.LVL431:
 4298              	.L336:
 428:Src/main.c    ****   }
 4299              		.loc 3 428 5 is_stmt 0 view .LVU1258
 4300              	.LBE66:
 438:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 4, 11);
 4301              		.loc 3 438 3 is_stmt 1 view .LVU1259
 438:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 4, 11);
 4302              		.loc 3 438 7 is_stmt 0 view .LVU1260
 4303 03b2 334B     		ldr	r3, .L376+28
 4304 03b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 438:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, 4, 11);
 4305              		.loc 3 438 6 view .LVU1261
 4306 03b6 002B     		cmp	r3, #0
 4307 03b8 7FF457AF 		bne	.L370
 4308              	.L339:
 447:Src/main.c    ****     uint8_t offset = 0;
 4309              		.loc 3 447 3 is_stmt 1 view .LVU1262
 447:Src/main.c    ****     uint8_t offset = 0;
 4310              		.loc 3 447 7 is_stmt 0 view .LVU1263
 4311 03bc 314B     		ldr	r3, .L376+32
 4312 03be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 447:Src/main.c    ****     uint8_t offset = 0;
 4313              		.loc 3 447 6 view .LVU1264
ARM GAS  /tmp/ccDqKevX.s 			page 118


 4314 03c0 002B     		cmp	r3, #0
 4315 03c2 7FF464AF 		bne	.L371
 4316              	.L340:
 459:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 4317              		.loc 3 459 3 is_stmt 1 view .LVU1265
 459:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 4318              		.loc 3 459 7 is_stmt 0 view .LVU1266
 4319 03c6 304B     		ldr	r3, .L376+36
 4320 03c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 459:Src/main.c    ****     uint8_t anzahl_spalten = 20;
 4321              		.loc 3 459 6 view .LVU1267
 4322 03ca DBB1     		cbz	r3, .L341
 4323              	.LBB67:
 460:Src/main.c    ****     if (Paneltyp == LAWO)  { anzahl_spalten=16; }
 4324              		.loc 3 460 5 is_stmt 1 view .LVU1268
 4325              	.LVL432:
 461:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4326              		.loc 3 461 5 view .LVU1269
 461:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4327              		.loc 3 461 18 is_stmt 0 view .LVU1270
 4328 03cc 2A4B     		ldr	r3, .L376+20
 4329 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 461:Src/main.c    ****     if (Paneltyp == BROSE) { anzahl_spalten=19; }
 4330              		.loc 3 461 8 view .LVU1271
 4331 03d0 002B     		cmp	r3, #0
 4332 03d2 3FF46EAF 		beq	.L359
 460:Src/main.c    ****     if (Paneltyp == LAWO)  { anzahl_spalten=16; }
 4333              		.loc 3 460 13 view .LVU1272
 4334 03d6 1422     		movs	r2, #20
 4335              	.L342:
 4336              	.LVL433:
 462:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, anzahl_spalten - 8, anzahl_spalten - 1);
 4337              		.loc 3 462 5 is_stmt 1 view .LVU1273
 462:Src/main.c    ****     Write_Dots(0, (Panelanzahl * 28) - 1, anzahl_spalten - 8, anzahl_spalten - 1);
 4338              		.loc 3 462 8 is_stmt 0 view .LVU1274
 4339 03d8 012B     		cmp	r3, #1
 4340 03da 3FF46CAF 		beq	.L372
 4341              	.LVL434:
 4342              	.L343:
 463:Src/main.c    ****     start_refresh_DOWN = 0;
 4343              		.loc 3 463 5 is_stmt 1 view .LVU1275
 4344 03de 531E     		subs	r3, r2, #1
 4345 03e0 083A     		subs	r2, r2, #8
 4346              	.LVL435:
 463:Src/main.c    ****     start_refresh_DOWN = 0;
 4347              		.loc 3 463 5 is_stmt 0 view .LVU1276
 4348 03e2 2649     		ldr	r1, .L376+24
 4349 03e4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4350 03e6 C1EBC101 		rsb	r1, r1, r1, lsl #3
 4351 03ea 8900     		lsls	r1, r1, #2
 4352 03ec 0139     		subs	r1, r1, #1
 4353 03ee DBB2     		uxtb	r3, r3
 4354 03f0 D2B2     		uxtb	r2, r2
 4355 03f2 C9B2     		uxtb	r1, r1
 4356 03f4 0020     		movs	r0, #0
 4357 03f6 FFF7FEFF 		bl	Write_Dots
 4358              	.LVL436:
ARM GAS  /tmp/ccDqKevX.s 			page 119


 464:Src/main.c    **** 
 4359              		.loc 3 464 5 is_stmt 1 view .LVU1277
 464:Src/main.c    **** 
 4360              		.loc 3 464 24 is_stmt 0 view .LVU1278
 4361 03fa 234B     		ldr	r3, .L376+36
 4362 03fc 0022     		movs	r2, #0
 4363 03fe 1A70     		strb	r2, [r3]
 467:Src/main.c    ****   }
 4364              		.loc 3 467 5 is_stmt 1 view .LVU1279
 4365 0400 FFF7FEFF 		bl	save_written_dots
 4366              	.LVL437:
 4367              	.L341:
 467:Src/main.c    ****   }
 4368              		.loc 3 467 5 is_stmt 0 view .LVU1280
 4369              	.LBE67:
 474:Src/main.c    ****   static uint32_t cmd_buffer_pos = 0;
 4370              		.loc 3 474 3 is_stmt 1 view .LVU1281
 474:Src/main.c    ****   static uint32_t cmd_buffer_pos = 0;
 4371              		.loc 3 474 30 is_stmt 0 view .LVU1282
 4372 0404 FFF7FEFF 		bl	ringbuffer_get
 4373              	.LVL438:
 475:Src/main.c    ****   while (_temp_char) {
 4374              		.loc 3 475 3 is_stmt 1 view .LVU1283
 476:Src/main.c    **** 
 4375              		.loc 3 476 3 view .LVU1284
 476:Src/main.c    **** 
 4376              		.loc 3 476 9 is_stmt 0 view .LVU1285
 4377 0408 01E0     		b	.L344
 4378              	.L347:
 497:Src/main.c    ****   }
 4379              		.loc 3 497 5 is_stmt 1 view .LVU1286
 497:Src/main.c    ****   }
 4380              		.loc 3 497 18 is_stmt 0 view .LVU1287
 4381 040a FFF7FEFF 		bl	ringbuffer_get
 4382              	.LVL439:
 4383              	.L344:
 476:Src/main.c    **** 
 4384              		.loc 3 476 9 is_stmt 1 view .LVU1288
 4385 040e 0028     		cmp	r0, #0
 4386 0410 3FF47BAF 		beq	.L346
 479:Src/main.c    ****     cmd_buffer_pos++;
 4387              		.loc 3 479 5 view .LVU1289
 479:Src/main.c    ****     cmd_buffer_pos++;
 4388              		.loc 3 479 15 is_stmt 0 view .LVU1290
 4389 0414 1D4A     		ldr	r2, .L376+40
 4390 0416 1368     		ldr	r3, [r2]
 479:Src/main.c    ****     cmd_buffer_pos++;
 4391              		.loc 3 479 32 view .LVU1291
 4392 0418 1D49     		ldr	r1, .L376+44
 4393 041a C854     		strb	r0, [r1, r3]
 480:Src/main.c    ****     if (cmd_buffer_pos >= cmd_buffer_size) {
 4394              		.loc 3 480 5 is_stmt 1 view .LVU1292
 480:Src/main.c    ****     if (cmd_buffer_pos >= cmd_buffer_size) {
 4395              		.loc 3 480 19 is_stmt 0 view .LVU1293
 4396 041c 0133     		adds	r3, r3, #1
 4397 041e 1360     		str	r3, [r2]
 481:Src/main.c    ****       cmd_buffer_pos = 0;
ARM GAS  /tmp/ccDqKevX.s 			page 120


 4398              		.loc 3 481 5 is_stmt 1 view .LVU1294
 481:Src/main.c    ****       cmd_buffer_pos = 0;
 4399              		.loc 3 481 8 is_stmt 0 view .LVU1295
 4400 0420 632B     		cmp	r3, #99
 4401 0422 3FF66FAF 		bhi	.L373
 487:Src/main.c    ****       cmd_buffer[cmd_buffer_pos] = '\0';
 4402              		.loc 3 487 5 is_stmt 1 view .LVU1296
 487:Src/main.c    ****       cmd_buffer[cmd_buffer_pos] = '\0';
 4403              		.loc 3 487 8 is_stmt 0 view .LVU1297
 4404 0426 0A28     		cmp	r0, #10
 4405 0428 EFD1     		bne	.L347
 488:Src/main.c    ****       cmd_buffer_pos = 0;
 4406              		.loc 3 488 7 is_stmt 1 view .LVU1298
 488:Src/main.c    ****       cmd_buffer_pos = 0;
 4407              		.loc 3 488 34 is_stmt 0 view .LVU1299
 4408 042a 1948     		ldr	r0, .L376+44
 4409              	.LVL440:
 488:Src/main.c    ****       cmd_buffer_pos = 0;
 4410              		.loc 3 488 34 view .LVU1300
 4411 042c 0022     		movs	r2, #0
 4412 042e C254     		strb	r2, [r0, r3]
 489:Src/main.c    **** 
 4413              		.loc 3 489 7 is_stmt 1 view .LVU1301
 489:Src/main.c    **** 
 4414              		.loc 3 489 22 is_stmt 0 view .LVU1302
 4415 0430 164B     		ldr	r3, .L376+40
 4416              	.LVL441:
 489:Src/main.c    **** 
 4417              		.loc 3 489 22 view .LVU1303
 4418 0432 1A60     		str	r2, [r3]
 4419              	.LVL442:
 492:Src/main.c    ****       break;
 4420              		.loc 3 492 7 is_stmt 1 view .LVU1304
 4421 0434 FFF7FEFF 		bl	Run_CMD
 4422              	.LVL443:
 493:Src/main.c    ****     }
 4423              		.loc 3 493 7 view .LVU1305
 4424 0438 67E7     		b	.L346
 4425              	.L366:
 512:Src/main.c    ****     ringbuffer_init();
 4426              		.loc 3 512 5 view .LVU1306
 512:Src/main.c    ****     ringbuffer_init();
 4427              		.loc 3 512 20 is_stmt 0 view .LVU1307
 4428 043a 144B     		ldr	r3, .L376+40
 4429 043c 0022     		movs	r2, #0
 4430 043e 1A60     		str	r2, [r3]
 513:Src/main.c    ****     uart_last_time = HAL_GetTick();
 4431              		.loc 3 513 5 is_stmt 1 view .LVU1308
 4432 0440 FFF7FEFF 		bl	ringbuffer_init
 4433              	.LVL444:
 514:Src/main.c    ****   }
 4434              		.loc 3 514 5 view .LVU1309
 514:Src/main.c    ****   }
 4435              		.loc 3 514 22 is_stmt 0 view .LVU1310
 4436 0444 FFF7FEFF 		bl	HAL_GetTick
 4437              	.LVL445:
 514:Src/main.c    ****   }
ARM GAS  /tmp/ccDqKevX.s 			page 121


 4438              		.loc 3 514 20 view .LVU1311
 4439 0448 064B     		ldr	r3, .L376
 4440 044a 1860     		str	r0, [r3]
 4441 044c 6BE7     		b	.L349
 4442              	.L367:
 517:Src/main.c    ****     uart_last_time = HAL_GetTick();
 4443              		.loc 3 517 5 is_stmt 1 view .LVU1312
 4444 044e 0022     		movs	r2, #0
 4445 0450 8021     		movs	r1, #128
 4446 0452 0548     		ldr	r0, .L376+4
 4447 0454 FFF7FEFF 		bl	HAL_GPIO_WritePin
 4448              	.LVL446:
 518:Src/main.c    ****   }
 4449              		.loc 3 518 5 view .LVU1313
 518:Src/main.c    ****   }
 4450              		.loc 3 518 22 is_stmt 0 view .LVU1314
 4451 0458 FFF7FEFF 		bl	HAL_GetTick
 4452              	.LVL447:
 518:Src/main.c    ****   }
 4453              		.loc 3 518 20 view .LVU1315
 4454 045c 014B     		ldr	r3, .L376
 4455 045e 1860     		str	r0, [r3]
 4456 0460 69E7     		b	.L350
 4457              	.L377:
 4458 0462 00BF     		.align	2
 4459              	.L376:
 4460 0464 00000000 		.word	.LANCHOR9
 4461 0468 000C0140 		.word	1073810432
 4462 046c 00000000 		.word	.LANCHOR6
 4463 0470 00000000 		.word	.LANCHOR7
 4464 0474 00000000 		.word	.LANCHOR2
 4465 0478 00000000 		.word	Paneltyp
 4466 047c 00000000 		.word	Panelanzahl
 4467 0480 00000000 		.word	.LANCHOR3
 4468 0484 00000000 		.word	.LANCHOR5
 4469 0488 00000000 		.word	.LANCHOR4
 4470 048c 00000000 		.word	.LANCHOR19
 4471 0490 00000000 		.word	cmd_buffer
 4472              	.LBE68:
 4473              		.cfi_endproc
 4474              	.LFE70:
 4476              		.global	start_yellow
 4477              		.global	start_black
 4478              		.global	start_refresh_DOWN
 4479              		.global	start_refresh_UP
 4480              		.global	start_refresh_center
 4481              		.global	start_refresh
 4482              		.global	yellow_test_or_UP_DOWN
 4483              		.global	yellow_test_or_center
 4484              		.global	enable_manually_refresh
 4485              		.global	enable_fast_refresh
 4486              		.comm	textbuffer_8px_DOWN,200,4
 4487              		.comm	textbuffer_8px_UP,200,4
 4488              		.comm	cmd_buffer,100,4
 4489              		.global	uart_last_time
 4490              		.global	uart_puffer
 4491              		.global	hspi2_data
ARM GAS  /tmp/ccDqKevX.s 			page 122


 4492              		.comm	hspi2,88,4
 4493              		.comm	hspi1,88,4
 4494              		.comm	dots_old,4,4
 4495              		.comm	dots,4,4
 4496              		.comm	Panelanzahl,1,1
 4497              		.comm	Paneltyp,1,1
 4498              		.global	font_6x8vertikal_LSB
 4499              		.global	font8x8int
 4500              		.global	_ringbuffer_pos_read
 4501              		.global	_ringbuffer_pos_write
 4502              		.comm	_RINGBUFFER,2048,4
 4503              		.section	.rodata
 4504              		.align	2
 4505              		.set	.LANCHOR10,. + 0
 4506              	.LC0:
 4507 0000 000000   		.ascii	"\000\000\000"
 4508              		.section	.bss._ringbuffer_pos_read,"aw",%nobits
 4509              		.align	2
 4510              		.set	.LANCHOR1,. + 0
 4513              	_ringbuffer_pos_read:
 4514 0000 00000000 		.space	4
 4515              		.section	.bss._ringbuffer_pos_write,"aw",%nobits
 4516              		.align	2
 4517              		.set	.LANCHOR0,. + 0
 4520              	_ringbuffer_pos_write:
 4521 0000 00000000 		.space	4
 4522              		.section	.bss.blocked_until.7923,"aw",%nobits
 4523              		.align	2
 4524              		.set	.LANCHOR18,. + 0
 4527              	blocked_until.7923:
 4528 0000 00000000 		.space	4
 4529              		.section	.bss.cmd_buffer_pos.7928,"aw",%nobits
 4530              		.align	2
 4531              		.set	.LANCHOR19,. + 0
 4534              	cmd_buffer_pos.7928:
 4535 0000 00000000 		.space	4
 4536              		.section	.bss.enable_fast_refresh,"aw",%nobits
 4537              		.set	.LANCHOR17,. + 0
 4540              	enable_fast_refresh:
 4541 0000 00       		.space	1
 4542              		.section	.bss.enable_manually_refresh,"aw",%nobits
 4543              		.set	.LANCHOR15,. + 0
 4546              	enable_manually_refresh:
 4547 0000 00       		.space	1
 4548              		.section	.bss.hspi2_data,"aw",%nobits
 4549              		.align	2
 4550              		.set	.LANCHOR11,. + 0
 4553              	hspi2_data:
 4554 0000 0000     		.space	2
 4555              		.section	.bss.start_black,"aw",%nobits
 4556              		.set	.LANCHOR7,. + 0
 4559              	start_black:
 4560 0000 00       		.space	1
 4561              		.section	.bss.start_refresh,"aw",%nobits
 4562              		.set	.LANCHOR2,. + 0
 4565              	start_refresh:
 4566 0000 00       		.space	1
ARM GAS  /tmp/ccDqKevX.s 			page 123


 4567              		.section	.bss.start_refresh_DOWN,"aw",%nobits
 4568              		.set	.LANCHOR4,. + 0
 4571              	start_refresh_DOWN:
 4572 0000 00       		.space	1
 4573              		.section	.bss.start_refresh_UP,"aw",%nobits
 4574              		.set	.LANCHOR5,. + 0
 4577              	start_refresh_UP:
 4578 0000 00       		.space	1
 4579              		.section	.bss.start_refresh_center,"aw",%nobits
 4580              		.set	.LANCHOR3,. + 0
 4583              	start_refresh_center:
 4584 0000 00       		.space	1
 4585              		.section	.bss.start_yellow,"aw",%nobits
 4586              		.set	.LANCHOR6,. + 0
 4589              	start_yellow:
 4590 0000 00       		.space	1
 4591              		.section	.bss.uart_last_time,"aw",%nobits
 4592              		.align	2
 4593              		.set	.LANCHOR9,. + 0
 4596              	uart_last_time:
 4597 0000 00000000 		.space	4
 4598              		.section	.bss.uart_puffer,"aw",%nobits
 4599              		.set	.LANCHOR8,. + 0
 4602              	uart_puffer:
 4603 0000 00       		.space	1
 4604              		.section	.bss.yellow_test_or_UP_DOWN,"aw",%nobits
 4605              		.set	.LANCHOR14,. + 0
 4608              	yellow_test_or_UP_DOWN:
 4609 0000 00       		.space	1
 4610              		.section	.bss.yellow_test_or_center,"aw",%nobits
 4611              		.set	.LANCHOR16,. + 0
 4614              	yellow_test_or_center:
 4615 0000 00       		.space	1
 4616              		.section	.rodata.font8x8int,"a"
 4617              		.align	2
 4618              		.set	.LANCHOR12,. + 0
 4621              	font8x8int:
 4622 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000~\201\225\261\261\225"
 4622      00000000 
 4622      7E8195B1 
 4622      B195
 4623 000e 817E7EFF 		.ascii	"\201~~\377\353\317\317\353\377~\016\037?~?\037\016\000"
 4623      EBCFCFEB 
 4623      FF7E0E1F 
 4623      3F7E3F1F 
 4623      0E00
 4624 0020 081C3E7F 		.ascii	"\010\034>\177>\034\010\0008:\237\377\237:8\000\0208"
 4624      3E1C0800 
 4624      383A9FFF 
 4624      9F3A3800 
 4624      1038
 4625 0032 BCFFBC38 		.ascii	"\274\377\2748\020\000\000\000\030<<\030\000\000\377"
 4625      10000000 
 4625      183C3C18 
 4625      0000FF
 4626 0041 FFE7C3C3 		.ascii	"\377\347\303\303\347\377\377\000<fBBf<\000\377\303\231"
 4626      E7FFFF00 
ARM GAS  /tmp/ccDqKevX.s 			page 124


 4626      3C664242 
 4626      663C00FF 
 4626      C399
 4627 0053 BDBD99C3 		.ascii	"\275\275\231\303\377p\370\210\210\375\177\007\017\000"
 4627      FF70F888 
 4627      88FD7F07 
 4627      0F00
 4628 0061 4E5FF1F1 		.ascii	"N_\361\361_N\000\300\340\377\177\005\005\007\007\300"
 4628      5F4E00C0 
 4628      E0FF7F05 
 4628      050707C0 
 4629 0071 FF7F0505 		.ascii	"\377\177\005\005e\177?ZZ<\347\347<ZZ\177>>\034\034\010"
 4629      657F3F5A 
 4629      5A3CE7E7 
 4629      3C5A5A7F 
 4629      3E3E1C1C 
 4630 0086 08000808 		.ascii	"\010\000\010\010\034\034>>\177\000\000$f\377\377f$\000"
 4630      1C1C3E3E 
 4630      7F000024 
 4630      66FFFF66 
 4630      2400
 4631 0098 005F5F00 		.ascii	"\000__\000\000__\000\006\017\011\177\177\001\177\177"
 4631      005F5F00 
 4631      060F097F 
 4631      7F017F7F 
 4632 00a8 40DABFA5 		.ascii	"@\332\277\245\375Y\003\002\000pppppp\000\200\224\266"
 4632      FD590302 
 4632      00707070 
 4632      70707000 
 4632      8094B6
 4633 00bb FFFFB694 		.ascii	"\377\377\266\224\200\000\004\006\177\177\006\004\000"
 4633      80000406 
 4633      7F7F0604 
 4633      00
 4634 00c8 0010307F 		.ascii	"\000\0200\177\1770\020\000\010\010\010*>\034\010\000"
 4634      7F301000 
 4634      0808082A 
 4634      3E1C0800 
 4635 00d8 081C3E2A 		.ascii	"\010\034>*\010\010\010\000<<     \000\010\034>\010\010"
 4635      08080800 
 4635      3C3C2020 
 4635      20202000 
 4635      081C3E08 
 4636 00ed 3E1C0830 		.ascii	">\034\01008<>><80\006\016\036>>\036\016\006\000\000"
 4636      383C3E3E 
 4636      3C383006 
 4636      0E1E3E3E 
 4636      1E0E0600 
 4637 0102 00000000 		.ascii	"\000\000\000\000\000\000\000\006__\006\000\000\000\000"
 4637      00000006 
 4637      5F5F0600 
 4637      000000
 4638 0111 07070007 		.ascii	"\007\007\000\007\007\000\000\024\177\177\024\177\177"
 4638      07000014 
 4638      7F7F147F 
 4638      7F
 4639 011e 1400242E 		.ascii	"\024\000$.kk:\022\000\000Ff0\030\014fb\0000zO]7zH\000"
ARM GAS  /tmp/ccDqKevX.s 			page 125


 4639      6B6B3A12 
 4639      00004666 
 4639      30180C66 
 4639      6200307A 
 4640 0138 04070300 		.ascii	"\004\007\003\000\000\000\000\000\000\034>cA\000\000"
 4640      00000000 
 4640      001C3E63 
 4640      410000
 4641 0147 00004163 		.ascii	"\000\000Ac>\034\000\000\000\010*>\034\034>*\010\010"
 4641      3E1C0000 
 4641      00082A3E 
 4641      1C1C3E2A 
 4641      0808
 4642 0159 083E3E08 		.ascii	"\010>>\010\010\000\000\000\200\340`\000\000\000\000"
 4642      08000000 
 4642      80E06000 
 4642      000000
 4643 0168 08080808 		.ascii	"\010\010\010\010\010\010\000\000\000\000``\000\000\000"
 4643      08080000 
 4643      00006060 
 4643      000000
 4644 0177 00603018 		.ascii	"\000`0\030\014\006\003\001\000>\177AIA\177>\000@B\177"
 4644      0C060301 
 4644      003E7F41 
 4644      49417F3E 
 4644      0040427F 
 4645 018b 7F404000 		.ascii	"\177@@\000\000bsYIof\000\000\"cII\1776\000\000\030\034"
 4645      00627359 
 4645      496F6600 
 4645      00226349 
 4645      497F3600 
 4646 01a2 16537F7F 		.ascii	"\026S\177\177P\000'gEE}9\000\000<~KIy0\000\000\003\003"
 4646      50002767 
 4646      45457D39 
 4646      00003C7E 
 4646      4B497930 
 4647 01ba 71790F07 		.ascii	"qy\017\007\000\0006\177II\1776\000\000\006OIi?\036\000"
 4647      0000367F 
 4647      49497F36 
 4647      0000064F 
 4647      49693F1E 
 4648 01cf 00000066 		.ascii	"\000\000\000ff\000\000\000\000\000\200\346f\000\000"
 4648      66000000 
 4648      000080E6 
 4648      660000
 4649 01de 0000081C 		.ascii	"\000\000\010\0346cA\000\000\000$$$$$$\000\000\000Ac"
 4649      36634100 
 4649      00002424 
 4649      24242424 
 4649      00000041 
 4650 01f3 361C0800 		.ascii	"6\034\010\000\000\002\003QY\017\006\000\000>\177A]]"
 4650      00020351 
 4650      590F0600 
 4650      003E7F41 
 4650      5D5D
 4651 0205 1F1E007C 		.ascii	"\037\036\000|~\023\023~|\000\000A\177\177II\1776\000"
 4651      7E13137E 
ARM GAS  /tmp/ccDqKevX.s 			page 126


 4651      7C000041 
 4651      7F7F4949 
 4651      7F3600
 4652 0218 1C3E6341 		.ascii	"\034>cAAc\"\000A\177\177Ac>\034\000A\177\177I]Ac\000"
 4652      41632200 
 4652      417F7F41 
 4652      633E1C00 
 4652      417F7F49 
 4653 0230 417F7F49 		.ascii	"A\177\177I\035\001\003\000\034>cAQsr\000\177\177\010"
 4653      1D010300 
 4653      1C3E6341 
 4653      51737200 
 4653      7F7F08
 4654 0243 087F7F00 		.ascii	"\010\177\177\000\000\000A\177\177A\000\000\0000p@A\177"
 4654      0000417F 
 4654      7F410000 
 4654      00307040 
 4654      417F
 4655 0255 3F010041 		.ascii	"?\001\000A\177\177\010\034wc\000A\177\177A@`p\000\177"
 4655      7F7F081C 
 4655      77630041 
 4655      7F7F4140 
 4655      6070007F 
 4656 0269 7F0E1C0E 		.ascii	"\177\016\034\016\177\177\000\177\177\006\014\030\177"
 4656      7F7F007F 
 4656      7F060C18 
 4656      7F
 4657 0276 7F001C3E 		.ascii	"\177\000\034>cAc>\034\000A\177\177I\011\017\006\000"
 4657      6341633E 
 4657      1C00417F 
 4657      7F49090F 
 4657      0600
 4658 0288 1E3F2171 		.ascii	"\036?!q\177^\000\000A\177\177\011\031\177f\000\"gMY"
 4658      7F5E0000 
 4658      417F7F09 
 4658      197F6600 
 4658      22674D59 
 4659 029c 73220000 		.ascii	"s\"\000\000\003A\177\177A\003\000\000\177\177@@\177"
 4659      03417F7F 
 4659      41030000 
 4659      7F7F4040 
 4659      7F
 4660 02ad 7F00001F 		.ascii	"\177\000\000\037?``?\037\000\000\177\1770\0300\177\177"
 4660      3F60603F 
 4660      1F00007F 
 4660      7F301830 
 4660      7F7F
 4661 02bf 0043673C 		.ascii	"\000Cg<\030<gC\000\007OxxO\007\000\000GcqYMgs\000\000"
 4661      183C6743 
 4661      00074F78 
 4661      784F0700 
 4661      00476371 
 4662 02d9 7F7F4141 		.ascii	"\177\177AA\000\000\000\001\003\006\014\0300`\000\000"
 4662      00000001 
 4662      03060C18 
 4662      30600000 
 4663 02e9 41417F7F 		.ascii	"AA\177\177\000\000\000\010\014\006\003\006\014\010\000"
ARM GAS  /tmp/ccDqKevX.s 			page 127


 4663      00000008 
 4663      0C060306 
 4663      0C0800
 4664 02f8 80808080 		.ascii	"\200\200\200\200\200\200\200\200\000\000\003\007\004"
 4664      80808080 
 4664      00000307 
 4664      04
 4665 0305 00000020 		.ascii	"\000\000\000 tTT<x@\000A\177?HHx0\0008|DDl(\000\000"
 4665      7454543C 
 4665      78400041 
 4665      7F3F4848 
 4665      78300038 
 4666 0320 30784849 		.ascii	"0xHI?\177@\0008|TT\\\030\000\000H~\177I\003\002\000"
 4666      3F7F4000 
 4666      387C5454 
 4666      5C180000 
 4666      487E7F49 
 4667 0337 0098BCA4 		.ascii	"\000\230\274\244\244\370|\004\000A\177\177\010\004|"
 4667      A4F87C04 
 4667      00417F7F 
 4667      08047C
 4668 0346 78000044 		.ascii	"x\000\000D}}@\000\000\000`\340\200\200\375}\000\000"
 4668      7D7D4000 
 4668      000060E0 
 4668      8080FD7D 
 4668      0000
 4669 0358 417F7F10 		.ascii	"A\177\177\0208lD\000\000A\177\177@\000\000\000||\030"
 4669      386C4400 
 4669      00417F7F 
 4669      40000000 
 4669      7C7C18
 4670 036b 381C7C78 		.ascii	"8\034|x\000||\004\004|x\000\0008|DD|8\000\000\204\374"
 4670      007C7C04 
 4670      047C7800 
 4670      00387C44 
 4670      447C3800 
 4671 0382 F8A4243C 		.ascii	"\370\244$<\030\000\030<$\244\370\374\204\000D|xL\004"
 4671      1800183C 
 4671      24A4F8FC 
 4671      8400447C 
 4671      784C04
 4672 0395 1C180048 		.ascii	"\034\030\000H\\TTt$\000\000\000\004>\177D$\000\000<"
 4672      5C545474 
 4672      24000000 
 4672      043E7F44 
 4672      2400003C 
 4673 03a9 7C40403C 		.ascii	"|@@<|@\000\034<``<\034\000\000<|p8p|<\000Dl8\0208lD"
 4673      7C40001C 
 4673      3C60603C 
 4673      1C00003C 
 4673      7C703870 
 4674 03c7 009CBCA0 		.ascii	"\000\234\274\240\240\374|\000\000Ldt\\Ld\000\000\010"
 4674      A0FC7C00 
 4674      004C6474 
 4674      5C4C6400 
 4674      0008
 4675 03d9 083E7741 		.ascii	"\010>wAA\000\000\000\000\000ww\000\000\000AAw>\010\010"
ARM GAS  /tmp/ccDqKevX.s 			page 128


 4675      41000000 
 4675      00007777 
 4675      00000041 
 4675      41773E08 
 4676 03ee 00000203 		.ascii	"\000\000\002\003\001\003\002\003\001\000pxLFLxp\000"
 4676      01030203 
 4676      01007078 
 4676      4C464C78 
 4676      7000
 4677 0400 0E9F91B1 		.ascii	"\016\237\221\261\373J\000\000:z@@zz@\0008|TU]\031\000"
 4677      FB4A0000 
 4677      3A7A4040 
 4677      7A7A4000 
 4677      387C5455 
 4678 0417 00022375 		.ascii	"\000\002#uUU}{B!uTT}y@\000!uUT|x@\000 tWW|x@\000\030"
 4678      55557D7B 
 4678      42217554 
 4678      547D7940 
 4678      00217555 
 4679 0439 3CA4A4E4 		.ascii	"<\244\244\344@\000\000\002;}UU]\033\0029}TT]\031\000"
 4679      40000002 
 4679      3B7D5555 
 4679      5D1B0239 
 4679      7D54545D 
 4680 044f 00397D55 		.ascii	"\0009}UT\\\030\000\000\001E||A\001\000\000\002\003E"
 4680      545C1800 
 4680      0001457C 
 4680      7C410100 
 4680      00020345 
 4681 0463 7D7D4302 		.ascii	"}}C\002\000\001E}|@\000\000\000y}\026\022\026}y\000"
 4681      0001457D 
 4681      7C400000 
 4681      00797D16 
 4681      12167D79 
 4682 0478 787C1515 		.ascii	"x|\025\025\025|x\000D||UUE\000\000pTT|TT\\\000|~\013"
 4682      157C7800 
 4682      447C7C55 
 4682      55450000 
 4682      7054547C 
 4683 0493 097F7F49 		.ascii	"\011\177\177I\0002{II{2\000\0002zHHz2\000\0002zJHx0"
 4683      00327B49 
 4683      497B3200 
 4683      00327A48 
 4683      487A3200 
 4684 04ae 00003A7B 		.ascii	"\000\000:{AA{z@\000:zB@xx@\000\232\272\240\240\372z"
 4684      41417B7A 
 4684      40003A7A 
 4684      42407878 
 4684      40009ABA 
 4685 04c6 00000119 		.ascii	"\000\000\001\031<ff<\031\001=}@@}=\000\000\270|dTL|"
 4685      3C66663C 
 4685      19013D7D 
 4685      40407D3D 
 4685      0000B87C 
 4686 04de 3A00687E 		.ascii	":\000h~\177ICf \000>\177qYM\177>\000A\177\177A@dt\000"
 4686      7F494366 
 4686      20003E7F 
ARM GAS  /tmp/ccDqKevX.s 			page 129


 4686      71594D7F 
 4686      3E00417F 
 4687 04f8 00417F7F 		.ascii	"\000A\177\177@\004\004\000 tTU}y@\000\000D}}A\000\000"
 4687      40040400 
 4687      20745455 
 4687      7D794000 
 4687      00447D7D 
 4688 050f 00307848 		.ascii	"\0000xHJz2\000\0008x@Bzz@\000zz\012\012zp\000\000}}"
 4688      4A7A3200 
 4688      00387840 
 4688      427A7A40 
 4688      007A7A0A 
 4689 052a 19317D7D 		.ascii	"\0311}}\000\0002zJJz2\000\000\0219mEm9\020\0000xME`"
 4689      0000327A 
 4689      4A4A7A32 
 4689      00001139 
 4689      6D456D39 
 4690 0545 20000021 		.ascii	" \000\000!uUU}y@\000y}\025\025}y\000\000L>s^,\000\000"
 4690      7555557D 
 4690      79400079 
 4690      7D15157D 
 4690      7900004C 
 4691 055f 007B7B08 		.ascii	"\000{{\010\010xp\000\000\000\000\000{{\000\000\000\010"
 4691      08787000 
 4691      00000000 
 4691      7B7B0000 
 4691      0008
 4692 0571 11151F0B 		.ascii	"\021\025\037\013\001\000\000Z~$$$~Z\000\252\000U\000"
 4692      0100005A 
 4692      7E242424 
 4692      7E5A00AA 
 4692      005500
 4693 0584 AA005500 		.ascii	"\252\000U\000\252U\252U\252U\252U\335\377\252w\335\252"
 4693      AA55AA55 
 4693      AA55AA55 
 4693      DDFFAA77 
 4693      DDAA
 4694 0596 FF770000 		.ascii	"\377w\000\000\000\377\377\000\000\000\020\020\020\377"
 4694      00FFFF00 
 4694      00001010 
 4694      10FF
 4695 05a4 FF000000 		.ascii	"\377\000\000\000\024\024\024\377\377\000\000\000\020"
 4695      141414FF 
 4695      FF000000 
 4695      10
 4696 05b1 10FFFF00 		.ascii	"\020\377\377\000\377\377\000\020\020\360\360\020\360"
 4696      FFFF0010 
 4696      10F0F010 
 4696      F0
 4697 05be F0001414 		.ascii	"\360\000\024\024\024\374\374\000\000\000\024\024\367"
 4697      14FCFC00 
 4697      00001414 
 4697      F7
 4698 05cb F700FFFF 		.ascii	"\367\000\377\377\000\000\000\377\377\000\377\377\000"
 4698      000000FF 
 4698      FF00FFFF 
 4698      00
ARM GAS  /tmp/ccDqKevX.s 			page 130


 4699 05d8 1414F4F4 		.ascii	"\024\024\364\364\004\374\374\000\024\024\027\027\020"
 4699      04FCFC00 
 4699      14141717 
 4699      10
 4700 05e5 1F1F0010 		.ascii	"\037\037\000\020\020\037\037\020\037\037\000\024\024"
 4700      101F1F10 
 4700      1F1F0014 
 4700      14
 4701 05f2 141F1F00 		.ascii	"\024\037\037\000\000\000\020\020\020\360\360\000\000"
 4701      00001010 
 4701      10F0F000 
 4701      00
 4702 05ff 00000000 		.ascii	"\000\000\000\000\037\037\020\020\020\020\020\020\037"
 4702      1F1F1010 
 4702      10101010 
 4702      1F
 4703 060c 1F101010 		.ascii	"\037\020\020\020\020\020\020\360\360\020\020\020\000"
 4703      101010F0 
 4703      F0101010 
 4703      00
 4704 0619 0000FFFF 		.ascii	"\000\000\377\377\020\020\020\020\020\020\020\020\020"
 4704      10101010 
 4704      10101010 
 4704      10
 4705 0626 10101010 		.ascii	"\020\020\020\020\020\377\377\020\020\020\000\000\000"
 4705      10FFFF10 
 4705      10100000 
 4705      00
 4706 0633 FFFF1414 		.ascii	"\377\377\024\024\024\000\000\377\377\000\377\377\020"
 4706      140000FF 
 4706      FF00FFFF 
 4706      10
 4707 0640 00001F1F 		.ascii	"\000\000\037\037\020\027\027\024\000\000\374\374\004"
 4707      10171714 
 4707      0000FCFC 
 4707      04
 4708 064d F4F41414 		.ascii	"\364\364\024\024\024\027\027\020\027\027\024\024\024"
 4708      14171710 
 4708      17171414 
 4708      14
 4709 065a F4F404F4 		.ascii	"\364\364\004\364\364\024\000\000\377\377\000\367\367"
 4709      F4140000 
 4709      FFFF00F7 
 4709      F7
 4710 0667 14141414 		.ascii	"\024\024\024\024\024\024\024\024\024\024\024\367\367"
 4710      14141414 
 4710      141414F7 
 4710      F7
 4711 0674 00F7F714 		.ascii	"\000\367\367\024\024\024\024\027\027\024\024\024\020"
 4711      14141417 
 4711      17141414 
 4711      10
 4712 0681 101F1F10 		.ascii	"\020\037\037\020\037\037\020\024\024\024\364\364\024"
 4712      1F1F1014 
 4712      1414F4F4 
 4712      14
 4713 068e 14141010 		.ascii	"\024\024\020\020\360\360\020\360\360\020\000\000\037"
ARM GAS  /tmp/ccDqKevX.s 			page 131


 4713      F0F010F0 
 4713      F0100000 
 4713      1F
 4714 069b 1F101F1F 		.ascii	"\037\020\037\037\020\000\000\000\037\037\024\024\024"
 4714      10000000 
 4714      1F1F1414 
 4714      14
 4715 06a8 000000FC 		.ascii	"\000\000\000\374\374\024\024\024\000\000\360\360\020"
 4715      FC141414 
 4715      0000F0F0 
 4715      10
 4716 06b5 F0F01010 		.ascii	"\360\360\020\020\020\377\377\020\377\377\020\024\024"
 4716      10FFFF10 
 4716      FFFF1014 
 4716      14
 4717 06c2 14FFFF14 		.ascii	"\024\377\377\024\024\024\020\020\020\037\037\000\000"
 4717      14141010 
 4717      101F1F00 
 4717      00
 4718 06cf 00000000 		.ascii	"\000\000\000\000\360\360\020\020\020\377\377\377\377"
 4718      F0F01010 
 4718      10FFFFFF 
 4718      FF
 4719 06dc FFFFFFFF 		.ascii	"\377\377\377\377\360\360\360\360\360\360\360\360\377"
 4719      F0F0F0F0 
 4719      F0F0F0F0 
 4719      FF
 4720 06e9 FFFFFF00 		.ascii	"\377\377\377\000\000\000\000\000\000\000\000\377\377"
 4720      00000000 
 4720      000000FF 
 4720      FF
 4721 06f6 FFFF0F0F 		.ascii	"\377\377\017\017\017\017\017\017\017\0178|Dl8lD\000"
 4721      0F0F0F0F 
 4721      0F0F387C 
 4721      446C386C 
 4721      4400
 4722 0708 FCFE2A2A 		.ascii	"\374\376**>\024\000\000~~\002\002\006\006\000\000\002"
 4722      3E140000 
 4722      7E7E0202 
 4722      06060000 
 4722      02
 4723 0719 7E7E027E 		.ascii	"~~\002~~\002\000cw]Icc\000\0008|D|<\004\004\000\200"
 4723      7E020063 
 4723      775D4963 
 4723      63000038 
 4723      7C447C3C 
 4724 0731 FE7E2020 		.ascii	"\376~  >\036\000\004\006\002~|\006\002\000\231\275\347"
 4724      3E1E0004 
 4724      06027E7C 
 4724      06020099 
 4724      BDE7
 4725 0743 E7BD9900 		.ascii	"\347\275\231\000\000\034>kIk>\034\000L~s\001s~L\000"
 4725      001C3E6B 
 4725      496B3E1C 
 4725      004C7E73 
 4725      01737E4C 
 4726 0758 30784A4F 		.ascii	"0xJO}9\000\000\030<$<<$<\030\230\374d<>'=\030\034>k"
ARM GAS  /tmp/ccDqKevX.s 			page 132


 4726      7D390000 
 4726      183C243C 
 4726      3C243C18 
 4726      98FC643C 
 4727 0773 49490000 		.ascii	"II\000\000\000~\177\001\001\177~\000\000******\000\000"
 4727      007E7F01 
 4727      017F7E00 
 4727      002A2A2A 
 4727      2A2A2A00 
 4728 0788 44445F5F 		.ascii	"DD__DD\000\000@Q[ND@\000\000@DN[Q@\000\000\000\000\000"
 4728      44440000 
 4728      40515B4E 
 4728      44400000 
 4728      40444E5B 
 4729 07a3 FEFF0107 		.ascii	"\376\377\001\007\006`\340\200\377\177\000\000\000\010"
 4729      0660E080 
 4729      FF7F0000 
 4729      0008
 4730 07b1 086B6B08 		.ascii	"\010kk\010\010\000\000$6\0226$6\022\000\000\006\017"
 4730      08000024 
 4730      36123624 
 4730      36120000 
 4730      060F
 4731 07c3 090F0600 		.ascii	"\011\017\006\000\000\000\000\000\030\030\000\000\000"
 4731      00000000 
 4731      18180000 
 4731      00
 4732 07d0 00000010 		.ascii	"\000\000\000\020\020\000\000\000\0200p\300\377\377\001"
 4732      10000000 
 4732      103070C0 
 4732      FFFF01
 4733 07df 01001F1F 		.ascii	"\001\000\037\037\001\037\036\000\000\000\031\035\027"
 4733      011F1E00 
 4733      0000191D 
 4733      17
 4734 07ec 12000000 		.ascii	"\022\000\000\000\000\000<<<<\000\000\000\000\000\000"
 4734      00003C3C 
 4734      3C3C0000 
 4734      00000000 
 4735 07fc 00000000 		.ascii	"\000\000\000\000"
 4736              		.section	.rodata.font_6x8vertikal_LSB,"a"
 4737              		.align	2
 4738              		.set	.LANCHOR13,. + 0
 4741              	font_6x8vertikal_LSB:
 4742 0000 00000000 		.ascii	"\000\000\000\000\000\000"
 4742      0000
 4743 0006 003E4551 		.ascii	"\000>EQE>"
 4743      453E
 4744 000c 003E6B6F 		.ascii	"\000>kok>"
 4744      6B3E
 4745 0012 001C3E7C 		.ascii	"\000\034>|>\034"
 4745      3E1C
 4746 0018 00183C7E 		.ascii	"\000\030<~<\030"
 4746      3C18
 4747 001e 0030367F 		.ascii	"\00006\17760"
 4747      3630
 4748 0024 00185C7E 		.ascii	"\000\030\\~\\\030"
ARM GAS  /tmp/ccDqKevX.s 			page 133


 4748      5C18
 4749 002a 00000000 		.ascii	"\000\000\000\000\000\000"
 4749      0000
 4750 0030 00000000 		.ascii	"\000\000\000\000\000\000"
 4750      0000
 4751 0036 00000000 		.ascii	"\000\000\000\000\000\000"
 4751      0000
 4752 003c 00000000 		.ascii	"\000\000\000\000\000\000"
 4752      0000
 4753 0042 0030484A 		.ascii	"\0000HJ6\016"
 4753      360E
 4754 0048 00062979 		.ascii	"\000\006)y)\006"
 4754      2906
 4755 004e 00000000 		.ascii	"\000\000\000\000\000\000"
 4755      0000
 4756 0054 00607E0A 		.ascii	"\000`~\0125?"
 4756      353F
 4757 005a 002A1C36 		.ascii	"\000*\0346\034*"
 4757      1C2A
 4758 0060 00007F3E 		.ascii	"\000\000\177>\034\010"
 4758      1C08
 4759 0066 00081C3E 		.ascii	"\000\010\034>\177\000"
 4759      7F00
 4760 006c 0014367F 		.ascii	"\000\0246\1776\024"
 4760      3614
 4761 0072 00005F00 		.ascii	"\000\000_\000_\000"
 4761      5F00
 4762 0078 0006097F 		.ascii	"\000\006\011\177\001\177"
 4762      017F
 4763 007e 00224D55 		.ascii	"\000\"MUY\""
 4763      5922
 4764 0084 00606060 		.ascii	"\000````\000"
 4764      6000
 4765 008a 0014B6FF 		.ascii	"\000\024\266\377\266\024"
 4765      B614
 4766 0090 0004067F 		.ascii	"\000\004\006\177\006\004"
 4766      0604
 4767 0096 0010307F 		.ascii	"\000\0200\1770\020"
 4767      3010
 4768 009c 0008083E 		.ascii	"\000\010\010>\034\010"
 4768      1C08
 4769 00a2 00081C3E 		.ascii	"\000\010\034>\010\010"
 4769      0808
 4770 00a8 00784040 		.ascii	"\000x@@@@"
 4770      4040
 4771 00ae 00083E08 		.ascii	"\000\010>\010>\010"
 4771      3E08
 4772 00b4 00303C3F 		.ascii	"\0000<?<0"
 4772      3C30
 4773 00ba 00030F3F 		.ascii	"\000\003\017?\017\003"
 4773      0F03
 4774 00c0 00000000 		.ascii	"\000\000\000\000\000\000"
 4774      0000
 4775 00c6 0000065F 		.ascii	"\000\000\006_\006\000"
 4775      0600
 4776 00cc 00070300 		.ascii	"\000\007\003\000\007\003"
 4776      0703
ARM GAS  /tmp/ccDqKevX.s 			page 134


 4777 00d2 00247E24 		.ascii	"\000$~$~$"
 4777      7E24
 4778 00d8 00242B6A 		.ascii	"\000$+j\022\000"
 4778      1200
 4779 00de 00631308 		.ascii	"\000c\023\010dc"
 4779      6463
 4780 00e4 00364956 		.ascii	"\0006IV P"
 4780      2050
 4781 00ea 00000703 		.ascii	"\000\000\007\003\000\000"
 4781      0000
 4782 00f0 00003E41 		.ascii	"\000\000>A\000\000"
 4782      0000
 4783 00f6 0000413E 		.ascii	"\000\000A>\000\000"
 4783      0000
 4784 00fc 00083E1C 		.ascii	"\000\010>\034>\010"
 4784      3E08
 4785 0102 0008083E 		.ascii	"\000\010\010>\010\010"
 4785      0808
 4786 0108 0000E060 		.ascii	"\000\000\340`\000\000"
 4786      0000
 4787 010e 00080808 		.ascii	"\000\010\010\010\010\010"
 4787      0808
 4788 0114 00006060 		.ascii	"\000\000``\000\000"
 4788      0000
 4789 011a 00201008 		.ascii	"\000 \020\010\004\002"
 4789      0402
 4790 0120 003E5149 		.ascii	"\000>QIE>"
 4790      453E
 4791 0126 0000427F 		.ascii	"\000\000B\177@\000"
 4791      4000
 4792 012c 00625149 		.ascii	"\000bQIIF"
 4792      4946
 4793 0132 00224949 		.ascii	"\000\"III6"
 4793      4936
 4794 0138 00181412 		.ascii	"\000\030\024\022\177\020"
 4794      7F10
 4795 013e 002F4949 		.ascii	"\000/III1"
 4795      4931
 4796 0144 003C4A49 		.ascii	"\000<JII0"
 4796      4930
 4797 014a 00017109 		.ascii	"\000\001q\011\005\003"
 4797      0503
 4798 0150 00364949 		.ascii	"\0006III6"
 4798      4936
 4799 0156 00064949 		.ascii	"\000\006II)\036"
 4799      291E
 4800 015c 00006C6C 		.ascii	"\000\000ll\000\000"
 4800      0000
 4801 0162 0000EC6C 		.ascii	"\000\000\354l\000\000"
 4801      0000
 4802 0168 00081422 		.ascii	"\000\010\024\"A\000"
 4802      4100
 4803 016e 00242424 		.ascii	"\000$$$$$"
 4803      2424
 4804 0174 00004122 		.ascii	"\000\000A\"\024\010"
 4804      1408
 4805 017a 00020159 		.ascii	"\000\002\001Y\011\006"
ARM GAS  /tmp/ccDqKevX.s 			page 135


 4805      0906
 4806 0180 003E415D 		.ascii	"\000>A]U\036"
 4806      551E
 4807 0186 007E1111 		.ascii	"\000~\021\021\021~"
 4807      117E
 4808 018c 007F4949 		.ascii	"\000\177III6"
 4808      4936
 4809 0192 003E4141 		.ascii	"\000>AAA\""
 4809      4122
 4810 0198 007F4141 		.ascii	"\000\177AAA>"
 4810      413E
 4811 019e 007F4949 		.ascii	"\000\177IIIA"
 4811      4941
 4812 01a4 007F0909 		.ascii	"\000\177\011\011\011\001"
 4812      0901
 4813 01aa 003E4149 		.ascii	"\000>AIIz"
 4813      497A
 4814 01b0 007F0808 		.ascii	"\000\177\010\010\010\177"
 4814      087F
 4815 01b6 0000417F 		.ascii	"\000\000A\177A\000"
 4815      4100
 4816 01bc 00304040 		.ascii	"\0000@@@?"
 4816      403F
 4817 01c2 007F0814 		.ascii	"\000\177\010\024\"A"
 4817      2241
 4818 01c8 007F4040 		.ascii	"\000\177@@@\000"
 4818      4000
 4819 01ce 007F0204 		.ascii	"\000\177\002\004\002\177"
 4819      027F
 4820 01d4 007F0204 		.ascii	"\000\177\002\004\010\177"
 4820      087F
 4821 01da 003E4141 		.ascii	"\000>AAA>"
 4821      413E
 4822 01e0 007F0909 		.ascii	"\000\177\011\011\011\006"
 4822      0906
 4823 01e6 003E4151 		.ascii	"\000>AQ!^"
 4823      215E
 4824 01ec 007F0909 		.ascii	"\000\177\011\011\031f"
 4824      1966
 4825 01f2 00264949 		.ascii	"\000&III2"
 4825      4932
 4826 01f8 0001017F 		.ascii	"\000\001\001\177\001\001"
 4826      0101
 4827 01fe 003F4040 		.ascii	"\000?@@@?"
 4827      403F
 4828 0204 001F2040 		.ascii	"\000\037 @ \037"
 4828      201F
 4829 020a 003F403C 		.ascii	"\000?@<@?"
 4829      403F
 4830 0210 00631408 		.ascii	"\000c\024\010\024c"
 4830      1463
 4831 0216 00070870 		.ascii	"\000\007\010p\010\007"
 4831      0807
 4832 021c 00714945 		.ascii	"\000qIEC\000"
 4832      4300
 4833 0222 00007F41 		.ascii	"\000\000\177AA\000"
 4833      4100
ARM GAS  /tmp/ccDqKevX.s 			page 136


 4834 0228 00020408 		.ascii	"\000\002\004\010\020 "
 4834      1020
 4835 022e 00004141 		.ascii	"\000\000AA\177\000"
 4835      7F00
 4836 0234 00040201 		.ascii	"\000\004\002\001\002\004"
 4836      0204
 4837 023a 80808080 		.ascii	"\200\200\200\200\200\200"
 4837      8080
 4838 0240 00000307 		.ascii	"\000\000\003\007\000\000"
 4838      0000
 4839 0246 00205454 		.ascii	"\000 TTTx"
 4839      5478
 4840 024c 007F4444 		.ascii	"\000\177DDD8"
 4840      4438
 4841 0252 00384444 		.ascii	"\0008DDD("
 4841      4428
 4842 0258 00384444 		.ascii	"\0008DDD\177"
 4842      447F
 4843 025e 00385454 		.ascii	"\0008TTT\010"
 4843      5408
 4844 0264 00087E09 		.ascii	"\000\010~\011\011\000"
 4844      0900
 4845 026a 0018A4A4 		.ascii	"\000\030\244\244\244|"
 4845      A47C
 4846 0270 007F0404 		.ascii	"\000\177\004\004x\000"
 4846      7800
 4847 0276 0000007D 		.ascii	"\000\000\000}\000\000"
 4847      0000
 4848 027c 00408084 		.ascii	"\000@\200\204}\000"
 4848      7D00
 4849 0282 007F1028 		.ascii	"\000\177\020(D\000"
 4849      4400
 4850 0288 0000007F 		.ascii	"\000\000\000\177\000\000"
 4850      0000
 4851 028e 007C0418 		.ascii	"\000|\004\030\004x"
 4851      0478
 4852 0294 007C0404 		.ascii	"\000|\004\004x\000"
 4852      7800
 4853 029a 00384444 		.ascii	"\0008DDD8"
 4853      4438
 4854 02a0 00FC4444 		.ascii	"\000\374DDD8"
 4854      4438
 4855 02a6 00384444 		.ascii	"\0008DDD\374"
 4855      44FC
 4856 02ac 00447844 		.ascii	"\000DxD\004\010"
 4856      0408
 4857 02b2 00085454 		.ascii	"\000\010TTT "
 4857      5420
 4858 02b8 00043E44 		.ascii	"\000\004>D$\000"
 4858      2400
 4859 02be 003C4020 		.ascii	"\000<@ |\000"
 4859      7C00
 4860 02c4 001C2040 		.ascii	"\000\034 @ \034"
 4860      201C
 4861 02ca 003C6030 		.ascii	"\000<`0`<"
 4861      603C
 4862 02d0 006C1010 		.ascii	"\000l\020\020l\000"
ARM GAS  /tmp/ccDqKevX.s 			page 137


 4862      6C00
 4863 02d6 009CA060 		.ascii	"\000\234\240`<\000"
 4863      3C00
 4864 02dc 00645454 		.ascii	"\000dTTL\000"
 4864      4C00
 4865 02e2 00083E41 		.ascii	"\000\010>AA\000"
 4865      4100
 4866 02e8 00000077 		.ascii	"\000\000\000w\000\000"
 4866      0000
 4867 02ee 00004141 		.ascii	"\000\000AA>\010"
 4867      3E08
 4868 02f4 00020102 		.ascii	"\000\002\001\002\001\000"
 4868      0100
 4869 02fa 003C2623 		.ascii	"\000<&#&<"
 4869      263C
 4870 0300 001EA1E1 		.ascii	"\000\036\241\341!\022"
 4870      2112
 4871 0306 003D4020 		.ascii	"\000=@ }\000"
 4871      7D00
 4872 030c 00385454 		.ascii	"\0008TTU\011"
 4872      5509
 4873 0312 00205555 		.ascii	"\000 UUUx"
 4873      5578
 4874 0318 00205554 		.ascii	"\000 UTUx"
 4874      5578
 4875 031e 00205555 		.ascii	"\000 UUTx"
 4875      5478
 4876 0324 00205755 		.ascii	"\000 WUWx"
 4876      5778
 4877 032a 001CA2E2 		.ascii	"\000\034\242\342\"\024"
 4877      2214
 4878 0330 00385555 		.ascii	"\0008UUU\010"
 4878      5508
 4879 0336 00385554 		.ascii	"\0008UTU\010"
 4879      5508
 4880 033c 00385555 		.ascii	"\0008UUT\010"
 4880      5408
 4881 0342 0000017C 		.ascii	"\000\000\001|A\000"
 4881      4100
 4882 0348 0000017D 		.ascii	"\000\000\001}A\000"
 4882      4100
 4883 034e 0000017C 		.ascii	"\000\000\001|@\000"
 4883      4000
 4884 0354 00702924 		.ascii	"\000p)$)p"
 4884      2970
 4885 035a 00782F25 		.ascii	"\000x/%/x"
 4885      2F78
 4886 0360 007C5454 		.ascii	"\000|TTUE"
 4886      5545
 4887 0366 0034547C 		.ascii	"\0004T|TX"
 4887      5458
 4888 036c 007E097F 		.ascii	"\000~\011\177II"
 4888      4949
 4889 0372 00384545 		.ascii	"\0008EE9\000"
 4889      3900
 4890 0378 00384544 		.ascii	"\0008ED9\000"
 4890      3900
ARM GAS  /tmp/ccDqKevX.s 			page 138


 4891 037e 00394544 		.ascii	"\0009ED8\000"
 4891      3800
 4892 0384 003C4121 		.ascii	"\000<A!}\000"
 4892      7D00
 4893 038a 003D4120 		.ascii	"\000=A |\000"
 4893      7C00
 4894 0390 009CA160 		.ascii	"\000\234\241`=\000"
 4894      3D00
 4895 0396 003D4242 		.ascii	"\000=BB=\000"
 4895      3D00
 4896 039c 003C4140 		.ascii	"\000<A@=\000"
 4896      3D00
 4897 03a2 80706858 		.ascii	"\200phX8\004"
 4897      3804
 4898 03a8 00483E49 		.ascii	"\000H>IIb"
 4898      4962
 4899 03ae 007E615D 		.ascii	"\000~a]C?"
 4899      433F
 4900 03b4 00221408 		.ascii	"\000\"\024\010\024\""
 4900      1422
 4901 03ba 0040887E 		.ascii	"\000@\210~\011\002"
 4901      0902
 4902 03c0 00205455 		.ascii	"\000 TUUx"
 4902      5578
 4903 03c6 0000007D 		.ascii	"\000\000\000}A\000"
 4903      4100
 4904 03cc 00384445 		.ascii	"\0008DE9\000"
 4904      3900
 4905 03d2 003C4021 		.ascii	"\000<@!}\000"
 4905      7D00
 4906 03d8 007A090A 		.ascii	"\000z\011\012q\000"
 4906      7100
 4907 03de 007A1122 		.ascii	"\000z\021\"y\000"
 4907      7900
 4908 03e4 00085555 		.ascii	"\000\010UUU^"
 4908      555E
 4909 03ea 004E5151 		.ascii	"\000NQQN\000"
 4909      4E00
 4910 03f0 0030484D 		.ascii	"\0000HM@ "
 4910      4020
 4911 03f6 3E415D4B 		.ascii	">A]KU>"
 4911      553E
 4912 03fc 04040404 		.ascii	"\004\004\004\004\004\034"
 4912      041C
 4913 0402 0017084C 		.ascii	"\000\027\010LjP"
 4913      6A50
 4914 0408 00170834 		.ascii	"\000\027\0104*x"
 4914      2A78
 4915 040e 0000307D 		.ascii	"\000\0000}0\000"
 4915      3000
 4916 0414 00081400 		.ascii	"\000\010\024\000\010\024"
 4916      0814
 4917 041a 00140800 		.ascii	"\000\024\010\000\024\010"
 4917      1408
 4918 0420 44114411 		.ascii	"D\021D\021D\021"
 4918      4411
 4919 0426 AA55AA55 		.ascii	"\252U\252U\252U"
ARM GAS  /tmp/ccDqKevX.s 			page 139


 4919      AA55
 4920 042c BBEEBBEE 		.ascii	"\273\356\273\356\273\356"
 4920      BBEE
 4921 0432 000000FF 		.ascii	"\000\000\000\377\000\000"
 4921      0000
 4922 0438 080808FF 		.ascii	"\010\010\010\377\000\000"
 4922      0000
 4923 043e 00702825 		.ascii	"\000p(%)p"
 4923      2970
 4924 0444 00702925 		.ascii	"\000p)%)p"
 4924      2970
 4925 044a 00702925 		.ascii	"\000p)%(p"
 4925      2870
 4926 0450 3E415D55 		.ascii	">A]UA>"
 4926      413E
 4927 0456 0AFB00FF 		.ascii	"\012\373\000\377\000\000"
 4927      0000
 4928 045c 00FF00FF 		.ascii	"\000\377\000\377\000\000"
 4928      0000
 4929 0462 0AFA02FE 		.ascii	"\012\372\002\376\000\000"
 4929      0000
 4930 0468 0A0B080F 		.ascii	"\012\013\010\017\000\000"
 4930      0000
 4931 046e 00182466 		.ascii	"\000\030$f$\000"
 4931      2400
 4932 0474 00292A7C 		.ascii	"\000)*|*)"
 4932      2A29
 4933 047a 080808F8 		.ascii	"\010\010\010\370\000\000"
 4933      0000
 4934 0480 0000000F 		.ascii	"\000\000\000\017\010\010"
 4934      0808
 4935 0486 0808080F 		.ascii	"\010\010\010\017\010\010"
 4935      0808
 4936 048c 080808F8 		.ascii	"\010\010\010\370\010\010"
 4936      0808
 4937 0492 000000FF 		.ascii	"\000\000\000\377\010\010"
 4937      0808
 4938 0498 08080808 		.ascii	"\010\010\010\010\010\010"
 4938      0808
 4939 049e 080808FF 		.ascii	"\010\010\010\377\010\010"
 4939      0808
 4940 04a4 00205655 		.ascii	"\000 VUVy"
 4940      5679
 4941 04aa 00702A25 		.ascii	"\000p*%*q"
 4941      2A71
 4942 04b0 000F080B 		.ascii	"\000\017\010\013\012\012"
 4942      0A0A
 4943 04b6 00FE02FA 		.ascii	"\000\376\002\372\012\012"
 4943      0A0A
 4944 04bc 0A0B080B 		.ascii	"\012\013\010\013\012\012"
 4944      0A0A
 4945 04c2 0AFA02FA 		.ascii	"\012\372\002\372\012\012"
 4945      0A0A
 4946 04c8 00FF00FB 		.ascii	"\000\377\000\373\012\012"
 4946      0A0A
 4947 04ce 0A0A0A0A 		.ascii	"\012\012\012\012\012\012"
 4947      0A0A
ARM GAS  /tmp/ccDqKevX.s 			page 140


 4948 04d4 0AFB00FB 		.ascii	"\012\373\000\373\012\012"
 4948      0A0A
 4949 04da 005D2222 		.ascii	"\000]\"\"\"]"
 4949      225D
 4950 04e0 00225559 		.ascii	"\000\"UY0\000"
 4950      3000
 4951 04e6 00087F49 		.ascii	"\000\010\177IA>"
 4951      413E
 4952 04ec 007C5555 		.ascii	"\000|UUUD"
 4952      5544
 4953 04f2 007C5554 		.ascii	"\000|UTUD"
 4953      5544
 4954 04f8 007C5555 		.ascii	"\000|UUTD"
 4954      5444
 4955 04fe 00000007 		.ascii	"\000\000\000\007\000\000"
 4955      0000
 4956 0504 0000447D 		.ascii	"\000\000D}E\000"
 4956      4500
 4957 050a 0000457D 		.ascii	"\000\000E}E\000"
 4957      4500
 4958 0510 0000457C 		.ascii	"\000\000E|E\000"
 4958      4500
 4959 0516 0808080F 		.ascii	"\010\010\010\017\000\000"
 4959      0000
 4960 051c 000000F8 		.ascii	"\000\000\000\370\010\010"
 4960      0808
 4961 0522 FFFFFFFF 		.ascii	"\377\377\377\377\377\377"
 4961      FFFF
 4962 0528 F0F0F0F0 		.ascii	"\360\360\360\360\360\360"
 4962      F0F0
 4963 052e 00000077 		.ascii	"\000\000\000w\000\000"
 4963      0000
 4964 0534 0000457D 		.ascii	"\000\000E}D\000"
 4964      4400
 4965 053a 0F0F0F0F 		.ascii	"\017\017\017\017\017\017"
 4965      0F0F
 4966 0540 003C4243 		.ascii	"\000<BC=\000"
 4966      3D00
 4967 0546 00FE4A4A 		.ascii	"\000\376JJ4\000"
 4967      3400
 4968 054c 003C4343 		.ascii	"\000<CC=\000"
 4968      3D00
 4969 0552 003D4342 		.ascii	"\000=CB<\000"
 4969      3C00
 4970 0558 0032494A 		.ascii	"\0002IJ1\000"
 4970      3100
 4971 055e 003A4546 		.ascii	"\000:EF9\000"
 4971      3900
 4972 0564 00FC2020 		.ascii	"\000\374  \034\000"
 4972      1C00
 4973 056a 00FEAA28 		.ascii	"\000\376\252(\020\000"
 4973      1000
 4974 0570 00FFA524 		.ascii	"\000\377\245$\030\000"
 4974      1800
 4975 0576 003C4041 		.ascii	"\000<@A=\000"
 4975      3D00
 4976 057c 003C4141 		.ascii	"\000<AA=\000"
ARM GAS  /tmp/ccDqKevX.s 			page 141


 4976      3D00
 4977 0582 003D4140 		.ascii	"\000=A@<\000"
 4977      3C00
 4978 0588 009CA061 		.ascii	"\000\234\240a=\000"
 4978      3D00
 4979 058e 00040871 		.ascii	"\000\004\010q\011\004"
 4979      0904
 4980 0594 00000202 		.ascii	"\000\000\002\002\002\000"
 4980      0200
 4981 059a 00000703 		.ascii	"\000\000\007\003\000\000"
 4981      0000
 4982 05a0 00000808 		.ascii	"\000\000\010\010\010\000"
 4982      0800
 4983 05a6 0000242E 		.ascii	"\000\000$.$\000"
 4983      2400
 4984 05ac 00242424 		.ascii	"\000$$$$$"
 4984      2424
 4985 05b2 05170A34 		.ascii	"\005\027\0124*x"
 4985      2A78
 4986 05b8 0006097F 		.ascii	"\000\006\011\177\001\177"
 4986      017F
 4987 05be 00224D55 		.ascii	"\000\"MUY\""
 4987      5922
 4988 05c4 0008082A 		.ascii	"\000\010\010*\010\010"
 4988      0808
 4989 05ca 00000818 		.ascii	"\000\000\010\030\030\000"
 4989      1800
 4990 05d0 00060909 		.ascii	"\000\006\011\011\006\000"
 4990      0600
 4991 05d6 00000800 		.ascii	"\000\000\010\000\010\000"
 4991      0800
 4992 05dc 00000800 		.ascii	"\000\000\010\000\000\000"
 4992      0000
 4993 05e2 00020F00 		.ascii	"\000\002\017\000\000\000"
 4993      0000
 4994 05e8 00090F05 		.ascii	"\000\011\017\005\000\000"
 4994      0000
 4995 05ee 00090D0A 		.ascii	"\000\011\015\012\000\000"
 4995      0000
 4996 05f4 003C3C3C 		.ascii	"\000<<<<\000"
 4996      3C00
 4997 05fa 00000000 		.ascii	"\000\000\000\000\000\000"
 4997      0000
 4998              		.text
 4999              	.Letext0:
 5000              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 5001              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 5002              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 5003              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 5004              		.file 8 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 5005              		.file 9 "/usr/include/newlib/sys/_types.h"
 5006              		.file 10 "/usr/include/newlib/sys/reent.h"
 5007              		.file 11 "/usr/include/newlib/sys/lock.h"
 5008              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 5009              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 5010              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 5011              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
ARM GAS  /tmp/ccDqKevX.s 			page 142


 5012              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 5013              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 5014              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 5015              		.file 19 "Inc/spi.h"
 5016              		.file 20 "Inc/tim.h"
 5017              		.file 21 "Inc/usart.h"
 5018              		.file 22 "/usr/include/newlib/stdlib.h"
 5019              		.file 23 "Inc/fnt8x8.h"
 5020              		.file 24 "Inc/6x8_vertikal_LSB_1.h"
 5021              		.file 25 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 5022              		.file 26 "/usr/include/newlib/string.h"
 5023              		.file 27 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 5024              		.file 28 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 5025              		.file 29 "Inc/gpio.h"
ARM GAS  /tmp/ccDqKevX.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccDqKevX.s:19     .text.delay_us:0000000000000000 $t
     /tmp/ccDqKevX.s:27     .text.delay_us:0000000000000000 delay_us
     /tmp/ccDqKevX.s:86     .text.delay_us:0000000000000030 $d
     /tmp/ccDqKevX.s:92     .text.ringbuffer_init:0000000000000000 $t
     /tmp/ccDqKevX.s:99     .text.ringbuffer_init:0000000000000000 ringbuffer_init
     /tmp/ccDqKevX.s:121    .text.ringbuffer_init:000000000000000c $d
     /tmp/ccDqKevX.s:127    .text.ringbuffer_pushback:0000000000000000 $t
     /tmp/ccDqKevX.s:134    .text.ringbuffer_pushback:0000000000000000 ringbuffer_pushback
     /tmp/ccDqKevX.s:168    .text.ringbuffer_pushback:000000000000001c $d
                            *COM*:0000000000000800 _RINGBUFFER
     /tmp/ccDqKevX.s:174    .text.ringbuffer_get:0000000000000000 $t
     /tmp/ccDqKevX.s:181    .text.ringbuffer_get:0000000000000000 ringbuffer_get
     /tmp/ccDqKevX.s:227    .text.ringbuffer_get:0000000000000028 $d
     /tmp/ccDqKevX.s:234    .text.isBusy:0000000000000000 $t
     /tmp/ccDqKevX.s:241    .text.isBusy:0000000000000000 isBusy
     /tmp/ccDqKevX.s:273    .text.isBusy:0000000000000024 $d
     /tmp/ccDqKevX.s:283    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccDqKevX.s:290    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccDqKevX.s:343    .text.HAL_UART_RxCpltCallback:0000000000000034 $d
     /tmp/ccDqKevX.s:352    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccDqKevX.s:359    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccDqKevX.s:375    .text.Zeile_aktivieren:0000000000000000 $t
     /tmp/ccDqKevX.s:382    .text.Zeile_aktivieren:0000000000000000 Zeile_aktivieren
     /tmp/ccDqKevX.s:498    .text.Zeile_aktivieren:0000000000000078 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccDqKevX.s:505    .text.Spalte_aktivieren:0000000000000000 $t
     /tmp/ccDqKevX.s:512    .text.Spalte_aktivieren:0000000000000000 Spalte_aktivieren
     /tmp/ccDqKevX.s:644    .text.Spalte_aktivieren:0000000000000070 $d
                            *COM*:0000000000000001 Paneltyp
                            *COM*:0000000000000058 hspi2
     /tmp/ccDqKevX.s:652    .text.Modul_aktivieren:0000000000000000 $t
     /tmp/ccDqKevX.s:659    .text.Modul_aktivieren:0000000000000000 Modul_aktivieren
     /tmp/ccDqKevX.s:720    .text.Modul_aktivieren:0000000000000034 $d
     /tmp/ccDqKevX.s:724    .text.Modul_aktivieren:0000000000000038 $t
     /tmp/ccDqKevX.s:868    .text.Modul_aktivieren:00000000000000d4 $d
                            *COM*:0000000000000001 Panelanzahl
     /tmp/ccDqKevX.s:877    .text.generate_text:0000000000000000 $t
     /tmp/ccDqKevX.s:884    .text.generate_text:0000000000000000 generate_text
     /tmp/ccDqKevX.s:1041   .text.generate_text:0000000000000078 $d
     /tmp/ccDqKevX.s:1047   .rodata.Run_CMD.str1.4:0000000000000000 $d
     /tmp/ccDqKevX.s:1075   .text.Run_CMD:0000000000000000 $t
     /tmp/ccDqKevX.s:1082   .text.Run_CMD:0000000000000000 Run_CMD
     /tmp/ccDqKevX.s:1379   .text.Run_CMD:0000000000000110 $d
     /tmp/ccDqKevX.s:1388   .text.Run_CMD:0000000000000120 $t
     /tmp/ccDqKevX.s:1839   .text.Run_CMD:00000000000002f8 $d
                            *COM*:0000000000000004 dots
                            *COM*:00000000000000c8 textbuffer_8px_UP
     /tmp/ccDqKevX.s:1860   .text.Run_CMD:0000000000000338 $t
     /tmp/ccDqKevX.s:2559   .text.Run_CMD:00000000000005d4 $d
     /tmp/ccDqKevX.s:2574   .text.Run_CMD:00000000000005f8 $t
     /tmp/ccDqKevX.s:2962   .text.Run_CMD:0000000000000774 $d
     /tmp/ccDqKevX.s:2974   .text.bit_not_changed:0000000000000000 $t
     /tmp/ccDqKevX.s:2981   .text.bit_not_changed:0000000000000000 bit_not_changed
     /tmp/ccDqKevX.s:3028   .text.bit_not_changed:0000000000000028 $d
                            *COM*:0000000000000004 dots_old
ARM GAS  /tmp/ccDqKevX.s 			page 144


     /tmp/ccDqKevX.s:3034   .text.Write_Dots:0000000000000000 $t
     /tmp/ccDqKevX.s:3041   .text.Write_Dots:0000000000000000 Write_Dots
     /tmp/ccDqKevX.s:3280   .text.Write_Dots:00000000000000f8 $d
     /tmp/ccDqKevX.s:3291   .text.save_written_dots:0000000000000000 $t
     /tmp/ccDqKevX.s:3298   .text.save_written_dots:0000000000000000 save_written_dots
     /tmp/ccDqKevX.s:3354   .text.save_written_dots:0000000000000030 $d
     /tmp/ccDqKevX.s:3362   .text._Error_Handler:0000000000000000 $t
     /tmp/ccDqKevX.s:3369   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccDqKevX.s:3387   .rodata.SystemClock_Config.str1.4:0000000000000000 $d
     /tmp/ccDqKevX.s:3391   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccDqKevX.s:3398   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccDqKevX.s:3516   .text.SystemClock_Config:0000000000000080 $d
     /tmp/ccDqKevX.s:3522   .text.main:0000000000000000 $t
     /tmp/ccDqKevX.s:3529   .text.main:0000000000000000 main
     /tmp/ccDqKevX.s:4143   .text.main:00000000000002bc $d
     /tmp/ccDqKevX.s:4167   .text.main:0000000000000304 $t
     /tmp/ccDqKevX.s:4460   .text.main:0000000000000464 $d
                            *COM*:0000000000000064 cmd_buffer
     /tmp/ccDqKevX.s:4589   .bss.start_yellow:0000000000000000 start_yellow
     /tmp/ccDqKevX.s:4559   .bss.start_black:0000000000000000 start_black
     /tmp/ccDqKevX.s:4571   .bss.start_refresh_DOWN:0000000000000000 start_refresh_DOWN
     /tmp/ccDqKevX.s:4577   .bss.start_refresh_UP:0000000000000000 start_refresh_UP
     /tmp/ccDqKevX.s:4583   .bss.start_refresh_center:0000000000000000 start_refresh_center
     /tmp/ccDqKevX.s:4565   .bss.start_refresh:0000000000000000 start_refresh
     /tmp/ccDqKevX.s:4608   .bss.yellow_test_or_UP_DOWN:0000000000000000 yellow_test_or_UP_DOWN
     /tmp/ccDqKevX.s:4614   .bss.yellow_test_or_center:0000000000000000 yellow_test_or_center
     /tmp/ccDqKevX.s:4546   .bss.enable_manually_refresh:0000000000000000 enable_manually_refresh
     /tmp/ccDqKevX.s:4540   .bss.enable_fast_refresh:0000000000000000 enable_fast_refresh
                            *COM*:00000000000000c8 textbuffer_8px_DOWN
     /tmp/ccDqKevX.s:4596   .bss.uart_last_time:0000000000000000 uart_last_time
     /tmp/ccDqKevX.s:4602   .bss.uart_puffer:0000000000000000 uart_puffer
     /tmp/ccDqKevX.s:4553   .bss.hspi2_data:0000000000000000 hspi2_data
     /tmp/ccDqKevX.s:4741   .rodata.font_6x8vertikal_LSB:0000000000000000 font_6x8vertikal_LSB
     /tmp/ccDqKevX.s:4621   .rodata.font8x8int:0000000000000000 font8x8int
     /tmp/ccDqKevX.s:4513   .bss._ringbuffer_pos_read:0000000000000000 _ringbuffer_pos_read
     /tmp/ccDqKevX.s:4520   .bss._ringbuffer_pos_write:0000000000000000 _ringbuffer_pos_write
     /tmp/ccDqKevX.s:4504   .rodata:0000000000000000 $d
     /tmp/ccDqKevX.s:4509   .bss._ringbuffer_pos_read:0000000000000000 $d
     /tmp/ccDqKevX.s:4516   .bss._ringbuffer_pos_write:0000000000000000 $d
     /tmp/ccDqKevX.s:4523   .bss.blocked_until.7923:0000000000000000 $d
     /tmp/ccDqKevX.s:4527   .bss.blocked_until.7923:0000000000000000 blocked_until.7923
     /tmp/ccDqKevX.s:4530   .bss.cmd_buffer_pos.7928:0000000000000000 $d
     /tmp/ccDqKevX.s:4534   .bss.cmd_buffer_pos.7928:0000000000000000 cmd_buffer_pos.7928
     /tmp/ccDqKevX.s:4541   .bss.enable_fast_refresh:0000000000000000 $d
     /tmp/ccDqKevX.s:4547   .bss.enable_manually_refresh:0000000000000000 $d
     /tmp/ccDqKevX.s:4549   .bss.hspi2_data:0000000000000000 $d
     /tmp/ccDqKevX.s:4560   .bss.start_black:0000000000000000 $d
     /tmp/ccDqKevX.s:4566   .bss.start_refresh:0000000000000000 $d
     /tmp/ccDqKevX.s:4572   .bss.start_refresh_DOWN:0000000000000000 $d
     /tmp/ccDqKevX.s:4578   .bss.start_refresh_UP:0000000000000000 $d
     /tmp/ccDqKevX.s:4584   .bss.start_refresh_center:0000000000000000 $d
     /tmp/ccDqKevX.s:4590   .bss.start_yellow:0000000000000000 $d
     /tmp/ccDqKevX.s:4592   .bss.uart_last_time:0000000000000000 $d
     /tmp/ccDqKevX.s:4603   .bss.uart_puffer:0000000000000000 $d
     /tmp/ccDqKevX.s:4609   .bss.yellow_test_or_UP_DOWN:0000000000000000 $d
     /tmp/ccDqKevX.s:4615   .bss.yellow_test_or_center:0000000000000000 $d
     /tmp/ccDqKevX.s:4617   .rodata.font8x8int:0000000000000000 $d
ARM GAS  /tmp/ccDqKevX.s 			page 145


     /tmp/ccDqKevX.s:4737   .rodata.font_6x8vertikal_LSB:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_ui2d
__aeabi_dmul
__aeabi_d2uiz
HAL_GPIO_WritePin
HAL_GetTick
HAL_UART_Receive_IT
huart1
HAL_SPI_Transmit
strlen
strtok
strcmp
atoi
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_SPI1_Init
MX_SPI2_Init
MX_USART1_UART_Init
MX_TIM2_Init
HAL_GPIO_ReadPin
malloc
HAL_Delay
HAL_NVIC_EnableIRQ
